//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ?????? ?????????
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibEFD08206"
include "LibCBBB94A3"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void StartLibs () {
    libNtve_InitLib();
    libEFD08206_InitLib();
    libCBBB94A3_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const string gv_gAME_VERSION = "2.127";
const int gv_mAIN_GAME_TIME = 840;
const int gv_rESPONE_INDEX_LAST = 10;
const int gv_tIME_FOR_APPLICATION = 15;
const int gv_rEQUIRED_NUMBER_OF_USERS_FOR_USE_KICKBUTTON = 3;
const int gv_rEQUIRED_NUMBER_OF_USERS_FOR_KICK = 4;
const int gv_aLLOWED_TIMES_FOR_KICK_VOTE = 2;
const int gv_mAIN_GAME_TIME_EXPLOSION_COUNT = 60;
const int gv_eSCAPE_TRAIN_TIME_FOR_VOTE = 25;
const int gv_eSCAPE_TRAIN_TIME_FOR_KILL_CHANGELING = 45;
const int gv_pLAYER_ENEMY = 15;
const int gv_pLAYER_NEUTRAL = 0;
const int gv_uSER_FIRST = 1;
const int gv_uSER_LAST = 8;
const int gv_uSER_COUNT_MAX = (gv_uSER_LAST-gv_uSER_FIRST+1);
const int gv_uSER_INDEX_MAX = (gv_uSER_COUNT_MAX-1);
const int gv_bUTTON_OBSERVER_CHANGE_TARGET_UP = c_keyPageUp;
const int gv_bUTTON_OBSERVER_CHANGE_TARGET_DOWN = c_keyPageDown;
const int gv_lEGACYSCORE_INFO_RAYCAST_RANGE = 5;
const int gv_lEGACYSCORE_HASH_LEVEL = 5;
const string gv_lEGACYSCORE_HASH_KEY = "OHHOHMFB";
const int gv_lEGACYSCORE_RANGE_SCORE = 1000000;
const int gv_lEGACYSCORE_RANGE_LOCALCODE = 10;
const int gv_lEGACYSCORE_RANGE_FIRSTID = 100;
const int gv_lEGACYSCORE_RANGE_SECONDID = 100000000;
const int gv_lEGACYSCORE_ASSIST_TIME_SATELITE = 30;
const string gv_bLACKLIST_BANK_SECTION_BLACKLIST = "Blacklist";
const string gv_bLACKLIST_BANK_SECTION_LASTPLAYERS = "LastPlayers";
const int gv_mESSAGE_AREA_CHAT = c_messageAreaDebug;
const int gv_aNTICHEAT_EVENT_CALL_MAX = 30;
const string gv_eNVIRONMENT_LIGHT_NORMAL = "DominionLab";
const string gv_eNVIRONMENT_LIGHT_EMERGENCY = "PrisonShipEmergency";
const string gv_eNVIRONMENT_LIGHT_BLACKOUT = "StarshipDark";
const string gv_eNVIRONMENT_LIGHT_INCINERATOR = "TTosh01Warning";
const int gv_dAMAGE_ALARM_DELAY = 60;
const string gv_mAIRINE_UNITTYPE = "Marine";
const fixed gv_cHANGELING_TIME_FOR_EAT = 180.0;
const fixed gv_cHANGELING_TIME_DISGUISE_LIMIT = 180.0;
const int gv_bUTTON_GENERIC_CANCEL_1 = c_keyF;
const int gv_bUTTON_GENERIC_CANCEL_2 = c_keyBackSpace;
const int gv_bUTTON_UTILITYHUD = c_keyHome;
const int gv_cONTROL_GATE_TIME_FOR_UNLOCKING = 30;
const fixed gv_sHOT_RIFLE_RANGE = 25.0;
const int gv_sHOT_AMMO_MAX = 65;
const string gv_sHOT_EFFECT = "GuassRifleSet";
const int gv_bUTTON_RUN = c_keyShift;
const fixed gv_rUN_REQUIRED_STAMINA_AMOUNT_RATIO = 30.0;
const int gv_bUTTON_DISGUISE = c_keyR;
const fixed gv_eAT_RANGE = 10.0;
const string gv_eAT_EFFECT = "ChangelingAbductLaunchMissile";
const string gv_eAT_EFFECT_END = "ChangelingAbductFinalSet";
const int gv_cELL_AMOUNT_MAX = 11;
const int gv_cELL_INDEX_MAX = (gv_cELL_AMOUNT_MAX-1);
const int gv_gATE_STATE_CUSTOMVALUE_INDEX = 1;
const int gv_dEVICE_AMOUNT_MONITOR = 2;
const int gv_dEVICE_AMONUT_SECURITY = 1;
const int gv_dEVICE_AMOUNT_PGC = 1;
const int gv_dEVICE_AMOUNT_RDT = 1;
const int gv_dEVICE_AMOUNT_SATELITE = 1;
const int gv_dEVICE_AMOUNT_MEDICAL = 1;
const int gv_dEVICE_AMOUNT_INCINERATOR = 1;
const int gv_dEVICE_AMOUNT_CAGE = 3;
const int gv_dEVICE_AMOUNT_ARCHIVE = 1;
const int gv_dEVICE_AMOUNT_PHASESHIFTER = 3;
const int gv_dEVICE_AMOUNT_TOTAL = (gv_dEVICE_AMOUNT_MONITOR+gv_dEVICE_AMONUT_SECURITY+gv_dEVICE_AMOUNT_PGC+gv_dEVICE_AMOUNT_RDT+gv_dEVICE_AMOUNT_SATELITE+gv_dEVICE_AMOUNT_MEDICAL+gv_dEVICE_AMOUNT_INCINERATOR+gv_dEVICE_AMOUNT_CAGE+gv_dEVICE_AMOUNT_ARCHIVE+gv_dEVICE_AMOUNT_PHASESHIFTER);
const int gv_dEVICE_TYPE_AMOUNT = 10;
const int gv_dEVICE_TYPE_INDEX_MAX = (gv_dEVICE_TYPE_AMOUNT-1);
const int gv_dEVICE_INDEX_MAX = (gv_dEVICE_AMOUNT_TOTAL-1);
const int gv_dEVICE_UNIT_CUSTOMVALUE_INDEX = 0;
const int gv_aBCAGE_ARRAY_INDEX_MAX = (gv_dEVICE_AMOUNT_CAGE-1);
const int gv_aBCAGE_TIME_RELEASING = 8;
const int gv_aBCAGE_TIME_UPDATING_AI = 3;
const int gv_aRCHIVE_WRITING_INSTANCE_MAX = 100;
const int gv_aRCHIVE_LIST_INDEX_MAX = 49;
const int gv_aRCHIVE_RECORD_DELAY = 25;
const int gv_aRCHIVE_SCORE_ASSIST_DURATION = 60;
const int gv_aRCHIVE_TRANSMIT_COOLDOWN = 15;
const int gv_iNCI_TIME_PREPARING = 60;
const int gv_iNCI_TIME_STABILIZING = 150;
const int gv_iNCI_TIME_RUNNING = 15;
const string gv_iNCI_WATER_NORMAL = "Redstone|[Default]";
const string gv_iNCI_WATER_PREPARED = "Redstone|Alternate Setting";
const string gv_iNCI_WATER_RUNNING = "Redstone|Alternate Setting 2";
const int gv_mEDICALBOT_TIME_PREPARING = 5;
const int gv_mONITOR_INDEX_MAX = (gv_dEVICE_AMOUNT_MONITOR-1);
const int gv_mONITOR_TIME_SWITCHING = 5;
const int gv_mONITOR_SCORE_ASSIST_DURATION = 75;
const int gv_mONITOR_TRANSMIT_DELAY = 15;
const int gv_pHASESHIFTER_INDEX_MAX = (gv_dEVICE_AMOUNT_PHASESHIFTER-1);
const int gv_pOWER_CONTROLLER_TIME_SHUT_DOWN = 15;
const int gv_pOWER_CONTROLLER_TIME_STABILIZING = 30;
const int gv_rDT_PREPARING_TIME = 120;
const int gv_rDT_SCAN_DELAY_TIME = 5;
const int gv_sCC_FIRST_PREPARING_TIME = 120;
const int gv_sCC_PREPARING_TIME = 210;
const fixed gv_sCC_TRACKING_DELAY_TIME = 10.0;
const fixed gv_sCC_TRACKING_DURATION_TIME = 15.0;
const int gv_sCC_SCORE_ASSIST_DURATION = 45;
const int gv_eMERGENCYCONSOLE_TIME_SETTING_NORMAL = 35;
const int gv_eMERGENCYCONSOLE_TIME_SETTING_RESTRICT = 70;
const int gv_pROGRESSBAR_WIDTH = 399;
const int gv_pROGRESSBAR_HEIGHT = 53;
const int gv_bAR_HEALTH_WIDHT = 388;
const int gv_bAR_HEALTH_HEIGHT = 30;
const int gv_bAR_STAMINA_WIDHT = 338;
const int gv_bAR_STAMINA_HEIGHT = gv_bAR_HEALTH_HEIGHT;
const int gv_bAR_CHANGELINGPROCESS_WIDHT = gv_bAR_STAMINA_WIDHT;
const int gv_bAR_CHANGELINGPROCESS_HEIGHT = gv_bAR_STAMINA_HEIGHT;
const int gv_bUTTON_MAP_VIEW = c_keyTab;
const int gv_mINIMAP_ICON_LENGTH = 40;
const int gv_mINIMAP_SIZE_X = 650;
const int gv_mINIMAP_SIZE_Y = (gv_mINIMAP_SIZE_X * 160 / 132);
const fixed gv_mINIMAP_RATIO = (gv_mINIMAP_SIZE_X / 132.0);
const int gv_sELECTION_MENU_ITEM_INDEX_MAX = 2;
const int gv_sELECTION_MENU_ITEM_HEIGHT = 90;
const int gv_bLACKLIST_PANEL_TARGET_USER_LIST_TYPE_CURRENT = 1;
const int gv_bLACKLIST_PANEL_TARGET_USER_LIST_TYPE_LAST = 2;
const int gv_cHAT_SETTING_PANEL_ITEM_HEIGHT = 60;
//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_ChangelingSelectionInfo {
    playergroup lv_applicants;
    playergroup[gv_uSER_INDEX_MAX + 1] lv_kickVoteTable;
};
struct gs_UserInfo {
    int lv_mode;
    text lv_recordedName;
    string lv_recordedHandle;
};
struct gs_ObserverInfo {
    int lv_observingTarget;
    int lv_state;
};
struct gs_CameraInfo {
    int lv_mode;
    int lv_state;
    camerainfo lv_sampleCameraObject;
    unit lv_targetUnit;
    region lv_targetRegion;
    int lv_trackingTarget;
};
struct gs_BankInfo {
    bank lv_balck;
    bank lv_lastPlayers;
};
struct gs_ScoreInfo {
    int lv_rankcount;
    int lv_killedChangelings;
    int lv_foundChangelings;
    int lv_changelingWinCount;
    int lv_marineWinCount;
    int lv_onTrainCount;
    int lv_releasedAberrations;
    int lv_eatenMarine;
    int lv_deadCount;
    int lv_killedMarinesByChangeling;
    int lv_killedAberrationsByMarine;
    int lv_killedAllies;
    int lv_timeForWatchingArchive;
    int lv_timeForWatchingMonitor;
    int lv_timeForPlaying;
    int lv_timeForObserving;
    int lv_playedByMarineCount;
    int lv_playedByChangelingcount;
};
struct gs_LegacyScoreInfo {
    int lv_killedChangelings_dirty;
    int lv_foundChangelings_dirty;
    int lv_changelingWins_dirty;
};
struct gs_LegacyScoringInfo {
    int lv_assistUser;
    timer lv_assistTimer;
    int lv_killingChangelingUser;
};
struct gs_ChatInfo {
    playergroup lv_notReceivingPlayers;
};
struct gs_AntiCheatInfo {
    int lv_eventCallCounter;
};
struct gs_EnvironmentInfo {
    sound lv_repeatingSound;
    int lv_localState;
};
struct gs_CharacterInfo {
    unit lv_unit;
    int lv_role;
    int lv_state;
    int lv_statusFlag;
    unit lv_controllingDevice;
    timer lv_genericTimer;
    timer[gv_uSER_INDEX_MAX + 1] lv_damageTakenTimer;
};
struct gs_ChangelingInfo {
    int lv_state;
    int lv_disguiseState;
    int lv_disguiseTargetPlayer;
    timer lv_timer;
    bool lv_isChangelingPlayerInitialized;
    bool lv_canEat;
    bool lv_canDisguise;
    bool lv_canUseChangelingAbility;
};
struct gs_GateControlInfo {
    unit lv_targetGate;
    bool lv_unlockingCancellationRequested;
};
struct gs_ShotInfo {
    int lv_ammoRemaining;
    bool lv_isShotbuttonClicked;
    bool lv_canFire;
};
struct gs_MoveInfo {
    fixed lv_directionAngle;
    int[3] lv_offset;
    bool lv_up;
    bool lv_down;
    bool lv_left;
    bool lv_right;
};
struct gs_LabInfo {
    int lv_powerState;
    int lv_emergencyState;
};
struct gs_CellInfo {
    int lv_cell;
    text lv_name;
    int lv_securitylevel;
    point lv_point;
    region lv_region;
    unitgroup lv_gates;
    unitgroup lv_divices;
};
struct gs_DeviceInfo {
    unit lv_unit;
    int lv_type;
    int lv_mainState;
    int lv_arrayIndex;
    int lv_user;
    int lv_flag;
};
struct gs_AberrationCageInfo {
    int lv_deviceIndex;
    int lv_state;
    unit lv_cageBuilding;
    unit lv_aberration;
    unitgroup lv_doorBlocker;
    timer lv_timer;
};
struct gs_ArchiveInfo {
    int lv_deviceIndex;
    int lv_counter;
    int lv_firstRecordIndex;
    int lv_lastRecordIndex;
    int lv_recordingNumber;
    int[gv_aRCHIVE_LIST_INDEX_MAX + 1] lv_playerRecord;
    int[gv_aRCHIVE_LIST_INDEX_MAX + 1] lv_cellRecord;
    unit[gv_aRCHIVE_LIST_INDEX_MAX + 1] lv_deviceRecord;
    text[gv_aRCHIVE_LIST_INDEX_MAX + 1] lv_textRecord;
    bool lv_assistFlag;
    timer lv_timer;
};
struct gs_IncineratorInfo {
    int lv_deviceIndex;
    int lv_state;
    unit lv_gate;
    region lv_targetRegion;
    playergroup lv_targetsPlayers;
    timer lv_timer;
};
struct gs_MedicalBotInfo {
    int lv_state;
    unit lv_healer;
};
struct gs_MonitorInfo {
    unit lv_unit;
    int lv_monitoringCell;
    int lv_deviceIndex;
    timer lv_targetingDelayTimer;
    timer lv_transmitCooldownTimer;
    timer lv_alertMessageDealyTimer;
};
struct gs_PhaseShifterInfo {
    int lv_deviceIndex;
    point lv_arrivalPoint;
    unit lv_gate;
};
struct gs_PowerControllerInfo {
    int lv_deviceIndex;
    int lv_state;
    timer lv_timer;
};
struct gs_RDTInfo {
    int lv_deviceIndex;
    int lv_state;
    timer lv_timer;
    int lv_scanTarget;
};
struct gs_SateliteControllerInfo {
    int lv_state;
    timer lv_timer;
    int lv_deviceIndex;
};
struct gs_EmergencyControlConsoleInfo {
    int lv_indexOfTargetCell;
    int lv_state;
    timer lv_timer;
    int lv_deviceIndex;
};
struct gs_RevealerInfo {
    revealer lv_vision;
};
struct gs_CustomFullScreenDialogInfo {
    bool lv_isLocked;
    int lv_curType;
    int lv_curDialog;
};
struct gs_ChangelingSelectionPanel {
    int lv_dialog;
    int lv_panel;
    int lv_applyButton;
    int lv_playerList;
    int[gv_uSER_INDEX_MAX + 1] lv_playerListItem;
    int[gv_uSER_INDEX_MAX + 1] lv_playerRankImage;
    int[gv_uSER_INDEX_MAX + 1] lv_playerNameLabel;
    int[gv_uSER_INDEX_MAX + 1] lv_kickVoteButton;
    int[gv_uSER_INDEX_MAX + 1] lv_kickVoteCountLabel;
    int lv_gameStartCounterText;
};
struct gs_CharacterStatusPanel {
    int lv_panel;
    int lv_healthBarImage;
    int lv_staminaBarImage;
    int lv_changelingProcessBarPanel;
    int lv_changelingProcessBarImage;
};
struct gs_DeviceHUDInfo {
    unit lv_currentHUDTargetDevice;
};
struct gs_AberrationCagePanel {
    int lv_panel;
    int lv_progressBar;
};
struct gs_ArchivePanel {
    int lv_panel;
    int lv_list;
    int lv_button;
    int lv_numberLabel;
    int lv_timerWindow;
    int[gv_uSER_INDEX_MAX + 1] lv_selectedItemIndex;
};
struct gs_IncineratorPanel {
    int lv_panel;
    int lv_button;
    int lv_timerWindow;
};
struct gs_MedicalBotPanel {
    int lv_panel;
    int lv_progressBar;
    int lv_progressBarNameLabel;
};
struct gs_MonitorPanel {
    int lv_panel;
    int lv_pulldown;
    int lv_blackImage;
    int lv_restrictLabel;
    int lv_timerWindow;
};
struct gs_PowerControllerPanel {
    int lv_panel;
    int lv_button;
    int lv_timerWindow;
};
struct gs_RdtPanel {
    int lv_panel;
    int lv_button;
    int lv_progressBar;
    int lv_timerWindow;
};
struct gs_EmergencyControlConsolePanel {
    int lv_panel;
    int[gv_cELL_INDEX_MAX + 1] lv_panelItem;
    int[gv_cELL_INDEX_MAX + 1] lv_controlButtonArray;
    int lv_timerWindow;
};
struct gs_SateliteControllerPanel {
    int lv_panel;
    int lv_button;
    int lv_timerWindow;
};
struct gs_GateUnlockProcessPanel {
    int lv_dialog;
    int lv_processBar;
};
struct gs_VoteInfo {
    int lv_dialog;
    playergroup lv_votingUsers;
    int[gv_uSER_INDEX_MAX + 1] lv_voteCounter;
    bool[gv_uSER_INDEX_MAX + 1] lv_hasVoted;
};
struct gs_CustomMinmap {
    int lv_dialog;
    int lv_mapImage;
    int lv_characterIconImage;
    int[gv_aBCAGE_ARRAY_INDEX_MAX + 1] lv_abberationImage;
    bool[gv_uSER_INDEX_MAX + 1] lv_isVisible;
    int[gv_uSER_INDEX_MAX + 1] lv_sateliteTargetImage;
    bool[gv_uSER_INDEX_MAX + 1] lv_isTrackingMode;
    int[gv_cELL_INDEX_MAX + 1] lv_celLabelArray;
};
struct gs_SelectionPanel {
    int lv_panel;
    int[gv_sELECTION_MENU_ITEM_INDEX_MAX + 1] lv_menuItems;
    int[gv_sELECTION_MENU_ITEM_INDEX_MAX + 1] lv_menuValueTable;
};
struct gs_HelpTextPanelItem {
    int lv_listBoxIndex;
    text lv_text;
};
struct gs_HelpTextPanel {
    int lv_panel;
    int lv_listBox;
    int lv_bodyTextLabel;
    gs_HelpTextPanelItem lv_synopsis;
    gs_HelpTextPanelItem lv_commandHelp;
    gs_HelpTextPanelItem lv_objectMarine;
    gs_HelpTextPanelItem lv_objectChangeling;
    gs_HelpTextPanelItem[gv_dEVICE_TYPE_INDEX_MAX + 1] lv_deviceHelp;
    gs_HelpTextPanelItem lv_blacklistHelp;
    gs_HelpTextPanelItem lv_legacyScoreHelp;
    gs_HelpTextPanelItem lv_accountBanHelp;
    gs_HelpTextPanelItem lv_comment;
};
struct gs_BlacklistPanel {
    int lv_panel;
    int lv_targetUserListTypePulldown;
    int lv_targetUserListBox;
    int lv_targetUserHandleEditBox;
    int lv_addTargetUserButton;
    int lv_registeredUserListBox;
    int lv_registeredUserHandleEditBox;
    int lv_removeRegisteredUserButton;
};
struct gs_BlacklistPanelUserInfo {
    int lv_targetUserListType;
};
struct gs_ChatSettingPanel {
    int lv_panel;
    int[gv_uSER_INDEX_MAX + 1] lv_checkBoxArray;
};
struct gs_TutorialMessageInfo {
    int lv_dialog;
    int[gv_uSER_INDEX_MAX + 1] lv_tutorialLabel;
};
struct gs_TraceLineHitResult {
    point lv_point;
    unit lv_unit;
};
//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_GameState_None = 0;
const int ge_GameState_Initializing = 1;
const int ge_GameState_SelectingRandomChangelingPlayer = 2;
const int ge_GameState_MainGame = 3;
const int ge_GameState_LabExplosionScene = 4;
const int ge_GameState_InEscapeTrain = 5;
const int ge_GameState_GameEnd = 6;
const int ge_MainGameState_None = 0;
const int ge_MainGameState_Normal = 1;
const int ge_MainGameState_ExplosionCountReady = 2;
const int ge_MainGameState_ExplosionCountOn = 3;
const int ge_InEcapeTrainState_None = 0;
const int ge_InEcapeTrainState_FindingChangeling = 1;
const int ge_InEcapeTrainState_FoundChangeling = 2;
const int ge_InEcapeTrainState_ChangelingDead = 3;
const int ge_InEcapeTrainState_ChangelingSurvived = 4;
const int ge_GameEndType_None = 0;
const int ge_GameEndType_ChangelingWin = 1;
const int ge_GameEndType_MarineWin = 2;
const int ge_GameEndType_Draw = 3;
const int ge_PlayMode_None = 0;
const int ge_PlayMode_GamePlayer = 1;
const int ge_PlayMode_Observer = 2;
const int ge_ObserverState_None = 0;
const int ge_ObserverState_Idle = 1;
const int ge_ObserverState_UsingUtilityPanel = 2;
const int ge_CameraMode_None = 0;
const int ge_CameraMode_FocusingUnit = 1;
const int ge_CameraMode_TPS = 2;
const int ge_CameraMode_TopSideView = 3;
const int ge_CameraMode_ControllingDevice = 4;
const int ge_CameraMode_TrackingEscapeTrain = 5;
const int ge_CameraState_None = 0;
const int ge_CameraState_Stable = 1;
const int ge_CameraState_Transitioning = 2;
const int ge_CameraState_CancelationRequested = 3;
const int ge_LegacyRankMainTier_Unranked = 0;
const int ge_LegacyRankMainTier__0Bronze = 1;
const int ge_LegacyRankMainTier__1Sivler = 2;
const int ge_LegacyRankMainTier__2Gold = 3;
const int ge_LegacyRankMainTier__3Platinum = 4;
const int ge_LegacyRankMainTier__4Diamond = 5;
const int ge_LegacyRankMainTier__5Master = 6;
const int ge_LegacyRankMainTier__6GrandMaster = 7;
const int ge_LegacyRankMainTier__7SwordMaster = 8;
const int ge_LegacyRankMainTier__8PokemonMaster = 9;
const int ge_LegacyRankMainTier__9BlackB = 10;
const int ge_LegacyRankMainTier__10BlackR = 11;
const int ge_LegacyRankMainTier__11BlackP = 12;
const int ge_LegacyRankMainTier__12BlackG = 13;
const int ge_LegacyRankSubTier__0Normal = 0;
const int ge_LegacyRankSubTier__1Shield = 1;
const int ge_LegacyRankSubTier__2Wings = 2;
const int ge_LegacyRankSubTier__3Star = 3;
const int ge_LegacyScoreType_None = 0;
const int ge_LegacyScoreType_KilledChangelingCount = 1;
const int ge_LegacyScoreType_FoundChangelingCount = 2;
const int ge_LegacyScoreType_ChangelingWinCount = 3;
const int ge_EnvironmentState_None = 0;
const int ge_EnvironmentState_Normal = 1;
const int ge_EnvironmentState_Emergency = 2;
const int ge_EnvironmentState_Explosion = 3;
const int ge_EnvironmentState_BlackOut = 4;
const int ge_EnvironmentState_InIncinerator = 5;
const int ge_CharacterStatusFlag_Abducted = 0x00000001;
const int ge_PlayerCharacterState_None = 0;
const int ge_PlayerCharacterState_Idle = 1;
const int ge_PlayerCharacterState_Move = 2;
const int ge_PlayerCharacterState_Firing = 3;
const int ge_PlayerCharacterState_UnlockingGate = 4;
const int ge_PlayerCharacterState_MorphingChangeling = 5;
const int ge_PlayerCharacterState_EatingChangeling = 6;
const int ge_PlayerCharacterState_ControlingDevice = 7;
const int ge_PlayerCharacterState_WatingforUsersinTrain = 8;
const int ge_PlayerCharacterState_UsingUtilityHUD = 9;
const int ge_PlayerCharacterState_Voting = 10;
const int ge_PlayerCharacterState_Dead = 11;
string ge_PlayerCharacterState_Ident (int lp_val);
const int ge_CharacterRole_None = 0;
const int ge_CharacterRole_Changeling = 1;
const int ge_CharacterRole_Marine = 2;
const int ge_DisguiseState_None = 0;
const int ge_DisguiseState_Disguising = 1;
const int ge_DisguiseState_Exposed = 2;
const int ge_ChangelingState_None = 0;
const int ge_ChangelingState_HasEaten = 1;
const int ge_ChangelingState_HuntingWithDisguise = 2;
const int ge_ChangelingState_HuntingWithoutDisguise = 3;
const int ge_ChangelingState_Paused = 4;
const int ge_EmergencyState_None = 0;
const int ge_EmergencyState_Normal = 1;
const int ge_EmergencyState_Emergency = 2;
const int ge_PowerStateType_None = 0;
const int ge_PowerStateType_PowerOn = 1;
const int ge_PowerStateType_PowerOff = 2;
const int ge_Cell_None = 0;
const int ge_Cell_LabA = 1;
const int ge_Cell_LabB = 2;
const int ge_Cell_LabC = 3;
const int ge_Cell_RadioactiveCell = 4;
const int ge_Cell_EmergencyControlCell = 5;
const int ge_Cell_Archive = 6;
const int ge_Cell_GeneratorCell = 7;
const int ge_Cell_Infirmary = 8;
const int ge_Cell_SateliteControlCell = 9;
const int ge_Cell_IncineratorCell = 10;
const int ge_Cell_SecurityCell = 11;
const int ge_Cell_AnyCell = 12;
const int ge_GateMode_None = 0;
const int ge_GateMode_Open = 1;
const int ge_GateMode_Closed = 2;
const int ge_GateMode_Any = 3;
const int ge_GateState_None = 0;
const int ge_GateState_Idle = 1;
const int ge_GateState_Transitioning = 2;
const int ge_GateState_BeingUnlocked = 3;
const int ge_AccessLevel_None = 0;
const int ge_AccessLevel_Normal = 1;
const int ge_AccessLevel_Restricted = 2;
const int ge_DeviceType_None = 0;
const int ge_DeviceType_AberrationCage = 1;
const int ge_DeviceType_Archive = 2;
const int ge_DeviceType_Incinerator = 3;
const int ge_DeviceType_MedicalBot = 4;
const int ge_DeviceType_Monitor = 5;
const int ge_DeviceType_PhaseShifter = 6;
const int ge_DeviceType_PowerController = 7;
const int ge_DeviceType_RadiationDiagnosticTester = 8;
const int ge_DeviceType_SateliteController = 9;
const int ge_DeviceType_SecurityController = 10;
const int ge_DeviceState_None = 0;
const int ge_DeviceState_Idle = 1;
const int ge_DeviceState_Unpowered = 2;
const int ge_DeviceState_InUse = 3;
const int ge_DeviceState_Used = 4;
const int ge_DeviceFlag_NeedsPower = 0x00000001;
const int ge_DeviceFlag_ForChangeling = 0x00000002;
const int ge_DeviceFlag_OnlyOnce = 0x00000004;
const int ge_DeviceFlag_UseCamera = 0x00000008;
const int ge_DeviceFlag_UseMouse = 0x00000010;
const int ge_AberrationCageState_None = 0;
const int ge_AberrationCageState_Managing = 1;
const int ge_AberrationCageState_InReleasing = 2;
const int ge_AberrationCageState_Released = 3;
const int ge_AberrationCageState_Canceled = 4;
const int ge_IncineratorState_None = 0;
const int ge_IncineratorState_Preparing = 1;
const int ge_IncineratorState_Prepared = 2;
const int ge_IncineratorState_Running = 3;
const int ge_IncineratorState_Stabilizing = 4;
const int ge_IncineratorState_Stabilized = 5;
const int ge_IncineratorState_Canceled = 6;
const int ge_MedicalBotState_Idle = 0;
const int ge_MedicalBotState_Preparing = 1;
const int ge_MedicalBotState_Healing = 2;
const int ge_MedicalBotState_Completed = 3;
const int ge_MedicalBotState_Canceled = 4;
const int ge_PowerControllerState_None = 0;
const int ge_PowerControllerState_Supplying = 1;
const int ge_PowerControllerState_InClosingGenerator = 2;
const int ge_PowerControllerState_NotSupplying = 3;
const int ge_PowerControllerState_Stabilizing = 4;
const int ge_RDTState_None = 0;
const int ge_RDTState_Preparing = 1;
const int ge_RDTState_Prepared = 2;
const int ge_RDTState_Scanning = 3;
const int ge_RDTState_Canceled = 4;
const int ge_SateliteControllerState_None = 0;
const int ge_SateliteControllerState_Preparing = 1;
const int ge_SateliteControllerState_Prepared = 2;
const int ge_SateliteControllerState_StartingTracking = 3;
const int ge_SateliteControllerState_Tracking = 4;
const int ge_EmergencyControlConsoleState_None = 0;
const int ge_EmergencyControlConsoleState_Idle = 1;
const int ge_EmergencyControlConsoleState_InSettingToRestrict = 2;
const int ge_EmergencyControlConsoleState_InSettingToNoraml = 3;
const int ge_CustomFullScreenDialogType_None = 0;
const int ge_CustomFullScreenDialogType_ChangelingSelectionPanel = 1;
const int ge_CustomFullScreenDialogType_CharacterHUD = 2;
const int ge_CustomFullScreenDialogType_DeviceHUD = 3;
const int ge_CustomFullScreenDialogType_GateUnlockProcess = 4;
const int ge_CustomFullScreenDialogType_Vote = 5;
const int ge_ProgressBarState_None = 0;
const int ge_ProgressBarState_Idle = 1;
const int ge_ProgressBarState_Activated = 2;
const int ge_ProgressBarState_StopRequested = 3;
const int ge_ChangelingSelectionPanelElement_KickVoteButton = 0;
const int ge_ChangelingSelectionPanelElement_KickVoteCountLabel = 1;
const int ge_ChangelingSelectionPanelElement_GameStartCounter = 2;
const int ge_ChangelingSelectionPanelElement_WantToPlayChangelingButton = 3;
const int ge_CharacterStatusPanelElement_None = 0;
const int ge_CharacterStatusPanelElement_Panel = 1;
const int ge_CharacterStatusPanelElement_HealthBarImage = 2;
const int ge_CharacterStatusPanelElement_StaminaBarImage = 3;
const int ge_CharacterStatusPanelElement_ChangelingProcessBar = 4;
const int ge_CharacterStatusPanelElement_ChangelingProcessBarImage = 5;
const int ge_ArchivePanelElement_Panel = 0;
const int ge_ArchivePanelElement_ListBox = 1;
const int ge_ArchivePanelElement_RecordingNumberLabel = 2;
const int ge_ArchivePanelElement_Button = 3;
const int ge_UtilityPanelType_None = 0;
const int ge_UtilityPanelType_SelectionPanel = 1;
const int ge_UtilityPanelType_HelpPanel = 2;
const int ge_UtilityPanelType_BlacklistPanel = 3;
const int ge_UtilityPanelType_ChatSettingPanel = 4;
const int ge_HelpTextPanelItemType_None = 0;
const int ge_HelpTextPanelItemType_Command = 1;
const int ge_HelpTextPanelItemType_ObjectOfMarine = 2;
const int ge_HelpTextPanelItemType_ObjectOfChangeling = 3;
const int ge_HelpTextPanelItemType_LegacyScore = 4;
const int ge_HelpTextPanelItemType_Blacklist = 5;
const int ge_HelpTextPanelItemType_Device = 6;
const int ge_HelpTextPanelItemType_AccountBan = 7;
const int ge_HelpTextPanelItemType_Synopsis = 8;
const int ge_HelpTextPanelItemType_CreatorsComment = 9;
const int ge_BlacklistTargetUserListType_None = 0;
const int ge_BlacklistTargetUserListType_CurrentUsers = 1;
const int ge_BlacklistTargetUserListType_LastUsers = 2;
const int ge_BlacklistPanelElement_None = 0;
const int ge_BlacklistPanelElement_AddUserToBlacklistButton = 1;
const int ge_BlacklistPanelElement_RemoveUserFromBlacklistButton = 2;
const int ge_BlacklistPanelElement_TargetUserListTypePulldown = 3;
const int ge_BlacklistPanelElement_TargetUserListBox = 4;
const int ge_BlacklistPanelElement_TargetUserHandleEditBox = 5;
const int ge_BlacklistPanelElement_RegisteredUserListBox = 6;
const int ge_BlacklistPanelElement_RegisteredUserHandleEditBox = 7;
const int ge_TriggerThreadState_None = 0;
const int ge_TriggerThreadState_Idle = 1;
const int ge_TriggerThreadState_Running = 2;
const int ge_TriggerThreadState_CancelationRequested = 3;
const int ge_AssertType_ParameterException = 0;
const int ge_AssertType_NotImplemented = 1;
const int ge_AssertType_InvalidGameState = 2;
const int ge_AssertType_AlreadyInitialized = 3;
const int ge_AssertType_OutOfRange = 4;
const int ge_AssertType_CharacterStateException = 5;
const int ge_AssertType_TestException = 6;
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_gameState;
timer gv_gameTimer;
int gv_gameTimerWindow;
gs_ChangelingSelectionInfo gv_changelingSelectionInfo;
int gv_mainGameState;
unit gv_uNIT_ESCAPE_TRAIN;
region gv_eSCAPE_TRAIN_AREA;
region gv_eSCAPE_TRAIN_AREA_RANDPOINT;
int gv_trainLabelDialog;
int gv_trainLabelItem;
int gv_inEscapeTrainState;
gs_UserInfo[gv_uSER_INDEX_MAX + 1] gv_userInfoArray;
playergroup gv_startingUsers;
playergroup[gv_uSER_INDEX_MAX + 1] gv_observers;
gs_ObserverInfo[gv_uSER_INDEX_MAX + 1] gv_observerInfoArray;
camerainfo gv_cAMERA_SAMPLE_FOCUSING_CHARACTER;
gs_CameraInfo[gv_uSER_INDEX_MAX + 1] gv_cameraInfoArray;
gs_BankInfo[gv_uSER_INDEX_MAX + 1] gv_bankInfoArray;
gs_ScoreInfo[gv_uSER_INDEX_MAX + 1] gv_scoreInfoArray;
bool gv_canSaveLegacyScore;
gs_LegacyScoreInfo[gv_uSER_INDEX_MAX + 1] gv_legacyScoreInfoArray;
gs_LegacyScoringInfo gv_legacyScoringInfo;
int[gv_uSER_INDEX_MAX + 1] gv_legacyScoreDialogCancelationToken;
gs_ChatInfo[gv_uSER_INDEX_MAX + 1] gv_chatInfoArray;
timer gv_antiCheatTimer;
gs_AntiCheatInfo[gv_uSER_INDEX_MAX + 1] gv_antiCheatInfo;
soundlink gv_eNVIRONMENT_SOUND_REPEAT_ALARM;
soundlink gv_eNVIRONMENT_SOUND_REPEAT_INCINERATOR;
soundlink gv_eNVIRONMENT_SOUND_ONCE_CLOSING;
int gv_globalEnvironmentState;
gs_EnvironmentInfo[gv_uSER_INDEX_MAX + 1] gv_environmentInfo;
gs_CharacterInfo[gv_uSER_INDEX_MAX + 1] gv_characterInfoArray;
string gv_cHANGELING_UNITTYPE_NORMAL_FORM;
string gv_cHANGELING_UNITTYPE_DISGUISING_FORM;
gs_ChangelingInfo gv_changelingInfo;
gs_GateControlInfo[gv_uSER_INDEX_MAX + 1] gv_gateControlInfoArray;
bool[gv_uSER_INDEX_MAX + 1] gv_requestedToCancelUnlcokingGate;
gs_ShotInfo[gv_uSER_INDEX_MAX + 1] gv_shotInfoArray;
gs_MoveInfo[gv_uSER_INDEX_MAX + 1] gv_moveInfoArray;
bool[gv_uSER_INDEX_MAX + 1] gv_isRunButtonPressed;
bool[gv_uSER_INDEX_MAX + 1] gv_isRunButtonLocked;
int gv_eatTargetPlayer;
timer gv_eatAlertMessageTimer;
region gv_lAB_AREA;
gs_LabInfo gv_labInfo;
region gv_cELL_REGION_ARCHIVE;
region gv_cELL_REGION_EMERGENCY_CONTROL;
region gv_cELL_REGION_POWER_GENERATOR;
region gv_cELL_REGION_INCINERATOR;
region gv_cELL_REGION_INFIRMARY;
region gv_cELL_REGION_LAB_A;
region gv_cELL_REGION_LAB_B;
region gv_cELL_REGION_LAB_C;
region gv_cELL_REGION_RADIATION_DIAGNOSTIC;
region gv_cELL_REGION_SATELITE_CONTROL;
region gv_cELL_REGION_SECURITY;
gs_CellInfo[gv_cELL_INDEX_MAX + 1] gv_cellInfoArray;
int gv_initializedCellCounter;
text gv_dEVICE_NAME_MONITOR;
text gv_dEVICE_NAME_EMERGENCY_CONSOLE;
text gv_dEVICE_NAME_POWER_CONTROLLER;
text gv_dEVICE_NAME_RDT;
text gv_dEVICE_NAME_SATELITE;
text gv_dEVICE_NAME_MEDICAL;
text gv_dEVICE_NAME_INCINERATOR;
text gv_dEVICE_NAME_CAGE;
text gv_dEVICE_NAME_ARCHIVE;
text gv_dEVICE_NAME_PHASESHIFTER;
int gv_deviceIndexLast;
gs_DeviceInfo[gv_dEVICE_INDEX_MAX + 1] gv_deviceInfoArray;
unit[gv_uSER_INDEX_MAX + 1] gv_deviceUserControlling;
gs_AberrationCageInfo[gv_aBCAGE_ARRAY_INDEX_MAX + 1] gv_aberrationCageInfoArray;
int gv_aberrationCageIndexLast;
gs_ArchiveInfo gv_archiveInfo;
bool gv_isArchiveInitialized;
text gv_iNCI_TEXT_STABILIZING;
text gv_iNCI_TEXT_CLEANING;
text gv_iNCI_TEXT_RUNNING;
text gv_iNCI_TEXT_PREPARED;
text gv_iNCI_TEXT_PREPARING;
gs_IncineratorInfo gv_incineratorInfo;
bool gv_isIncineratorInfoInitialized;
gs_MedicalBotInfo gv_medicalBotInfo;
bool gv_isMedicalBotInitialized;
gs_MonitorInfo[gv_mONITOR_INDEX_MAX + 1] gv_monitorInfoArray;
int gv_monitorIndexLast;
gs_PhaseShifterInfo[gv_pHASESHIFTER_INDEX_MAX + 1] gv_phaseShifterInfoArray;
int gv_phaseShifterLastIndex;
gs_PowerControllerInfo gv_powerControllerInfo;
bool gv_isPowerControllerInitialized;
gs_RDTInfo gv_rdtInfo;
bool gv_isRDTInitialized;
gs_SateliteControllerInfo gv_sateliteControllerInfo;
bool gv_isSateliteControllerInitialized;
text gv_eMERGENCYCONSOLE_TEXT_NORMAL;
text gv_eMERGENCYCONSOLE_TEXT_RESTRICT;
gs_EmergencyControlConsoleInfo gv_emergencyControlConsoleInfo;
bool gv_isEmergencyControlConsoleInitialized;
gs_RevealerInfo[gv_uSER_INDEX_MAX + 1] gv_revealerInfoArray;
gs_CustomFullScreenDialogInfo[gv_uSER_INDEX_MAX + 1] gv_fullscreenDialogInfoArray;
gs_ChangelingSelectionPanel gv_changelingSelectionPanel;
int gv_characterHUDDailog;
int gv_characterHUDPanel;
string gv_wEAPON_IMAGE_RIFLE;
string gv_wEAPON_IMAGE_ABDUCT;
int gv_weaponPanel;
int gv_weaponAmmoText;
int gv_weaponIconImage;
int gv_weaponIconBorderImage;
int gv_aimBox;
int gv_hitBox;
gs_CharacterStatusPanel gv_characterStatusPanel;
color gv_bAR_CHANGELINGPROCESS_COLOR1;
color gv_bAR_CHANGELINGPROCESS_COLOR2;
int gv_deviceHUDDialog;
gs_DeviceHUDInfo[gv_uSER_INDEX_MAX + 1] gv_deviceHUDInfo;
gs_AberrationCagePanel gv_aberrationCagePanel;
gs_ArchivePanel gv_archivePanel;
gs_IncineratorPanel gv_incineratorPanel;
gs_MedicalBotPanel gv_medicalBotPanel;
gs_MonitorPanel[gv_mONITOR_INDEX_MAX + 1] gv_monitorPanelArray;
int[gv_uSER_INDEX_MAX + 1] gv_monitorTrackingDialog;
text gv_pGC_TEXT_SHUTDOWN;
text gv_pGC_TEXT_SUPPLYPOWER;
gs_PowerControllerPanel gv_powerControllerPanel;
gs_RdtPanel gv_rdtPanel;
gs_EmergencyControlConsolePanel gv_emergencyControlConsolePanel;
gs_RdtPanel gv_sateliteControllerPanel;
gs_GateUnlockProcessPanel gv_gateUnlockProcessPanel;
gs_VoteInfo gv_voteInfo;
fixed gv_mINIMAP_CONVERSION_MULT_FACTOR;
gs_CustomMinmap gv_customMinimap;
bool[gv_uSER_INDEX_MAX + 1] gv_canControlMinimap;
int gv_utilityDialog;
int[gv_uSER_INDEX_MAX + 1] gv_currentUtilityPanelType;
bool[gv_uSER_INDEX_MAX + 1] gv_canControlUtilityPanel;
gs_SelectionPanel gv_selectionPanel;
gs_HelpTextPanel gv_helpTextPanel;
gs_BlacklistPanel gv_blacklistPanel;
gs_BlacklistPanelUserInfo[gv_uSER_INDEX_MAX + 1] gv_blacklistPanelUserInfoArray;
gs_ChatSettingPanel gv_chatSettingPanel;
gs_TutorialMessageInfo gv_tutorialMessageInfo;
int gv_dirtyFactor;
gs_TraceLineHitResult[gv_uSER_INDEX_MAX + 1] gv_traceLineHitResult;
bool gv_doDisplayDebugMessage;
int gv_testDialog;
unitgroup[9] gv_unitgroups;
unit gv_changeling_unit;
int gv_changeling_player;
bool[8] gv_chat_notReceiving_exchange_changling_and_eattarget;
int[8] hotkey_jump_by_e;
int gv_bUTTON_CONTROL_DEVICE = c_keySpace;
int gv_bUTTON_CONTROL_DOOR = c_keySpace;
int gv_bUTTON_CONTROL_DEVICE_by_E = c_keyE;
int gv_bUTTON_CONTROL_DOOR_by_E = c_keyE;
// default key setting
void StartGlobals () {
    int init_i;
    int init_i1;
    gv_gameState = ge_GameState_None;
    gv_gameTimer = TimerCreate();
    gv_gameTimerWindow = c_timerWindowNone;
    gv_changelingSelectionInfo.lv_applicants = PlayerGroupEmpty();
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_changelingSelectionInfo.lv_kickVoteTable[init_i1] = PlayerGroupEmpty();
    }
    gv_mainGameState = ge_MainGameState_None;
    gv_uNIT_ESCAPE_TRAIN = UnitFromId(370);
    gv_eSCAPE_TRAIN_AREA = RegionFromId(19);
    gv_eSCAPE_TRAIN_AREA_RANDPOINT = RegionFromId(18);
    gv_trainLabelDialog = c_invalidDialogId;
    gv_trainLabelItem = c_invalidDialogControlId;
    gv_inEscapeTrainState = ge_InEcapeTrainState_None;
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_userInfoArray[init_i].lv_mode = ge_PlayMode_None;
        gv_userInfoArray[init_i].lv_recordedHandle = "";
    }
    gv_startingUsers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_observers[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_observerInfoArray[init_i].lv_observingTarget = c_playerAny;
        gv_observerInfoArray[init_i].lv_state = ge_ObserverState_None;
    }
    gv_cAMERA_SAMPLE_FOCUSING_CHARACTER = CameraInfoFromId(386);
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_cameraInfoArray[init_i].lv_mode = ge_CameraMode_None;
        gv_cameraInfoArray[init_i].lv_state = ge_CameraState_Stable;
        gv_cameraInfoArray[init_i].lv_trackingTarget = c_playerAny;
    }
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_scoreInfoArray[init_i].lv_rankcount = libEFD08206_gf_ENCRYPTEncrypt(0);
    }
    gv_legacyScoringInfo.lv_assistUser = c_playerAny;
    gv_legacyScoringInfo.lv_assistTimer = TimerCreate();
    gv_legacyScoringInfo.lv_killingChangelingUser = c_playerAny;
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_legacyScoreDialogCancelationToken[init_i] = ge_TriggerThreadState_Idle;
    }
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_chatInfoArray[init_i].lv_notReceivingPlayers = PlayerGroupEmpty();
    }
    gv_antiCheatTimer = TimerCreate();
    gv_eNVIRONMENT_SOUND_REPEAT_ALARM = SoundLink("Lab03_alarm", -1);
    gv_eNVIRONMENT_SOUND_REPEAT_INCINERATOR = SoundLink("Doodad_RedstoneFlameGeyserStand", -1);
    gv_eNVIRONMENT_SOUND_ONCE_CLOSING = SoundLink("Lab_Intro_Doors_Close", -1);
    gv_globalEnvironmentState = ge_EnvironmentState_Normal;
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_environmentInfo[init_i].lv_localState = ge_EnvironmentState_None;
    }
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_characterInfoArray[init_i].lv_role = ge_CharacterRole_None;
        gv_characterInfoArray[init_i].lv_state = ge_PlayerCharacterState_None;
        gv_characterInfoArray[init_i].lv_statusFlag = 0;
        gv_characterInfoArray[init_i].lv_genericTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
            gv_characterInfoArray[init_i].lv_damageTakenTimer[init_i1] = TimerCreate();
        }
    }
    gv_cHANGELING_UNITTYPE_NORMAL_FORM = "Changeling";
    gv_cHANGELING_UNITTYPE_DISGUISING_FORM = "ChangelingMarine";
    gv_changelingInfo.lv_state = ge_ChangelingState_None;
    gv_changelingInfo.lv_disguiseState = ge_DisguiseState_None;
    gv_changelingInfo.lv_disguiseTargetPlayer = c_playerAny;
    gv_changelingInfo.lv_timer = TimerCreate();
    gv_changelingInfo.lv_canDisguise = true;
    gv_changelingInfo.lv_canUseChangelingAbility = true;
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_shotInfoArray[init_i].lv_ammoRemaining = gv_sHOT_AMMO_MAX;
        gv_shotInfoArray[init_i].lv_canFire = true;
    }
    gv_eatTargetPlayer = c_playerAny;
    gv_eatAlertMessageTimer = TimerCreate();
    gv_lAB_AREA = RegionFromId(20);
    gv_labInfo.lv_powerState = ge_PowerStateType_None;
    gv_labInfo.lv_emergencyState = ge_EmergencyState_None;
    gv_cELL_REGION_ARCHIVE = RegionFromId(13);
    gv_cELL_REGION_EMERGENCY_CONTROL = RegionFromId(5);
    gv_cELL_REGION_POWER_GENERATOR = RegionFromId(8);
    gv_cELL_REGION_INCINERATOR = RegionFromId(26);
    gv_cELL_REGION_INFIRMARY = RegionFromId(29);
    gv_cELL_REGION_LAB_A = RegionFromId(6);
    gv_cELL_REGION_LAB_B = RegionFromId(7);
    gv_cELL_REGION_LAB_C = RegionFromId(15);
    gv_cELL_REGION_RADIATION_DIAGNOSTIC = RegionFromId(11);
    gv_cELL_REGION_SATELITE_CONTROL = RegionFromId(28);
    gv_cELL_REGION_SECURITY = RegionFromId(4);
    for (init_i = 0; init_i <= gv_cELL_INDEX_MAX; init_i += 1) {
        gv_cellInfoArray[init_i].lv_cell = ge_Cell_None;
        gv_cellInfoArray[init_i].lv_securitylevel = ge_AccessLevel_Normal;
        gv_cellInfoArray[init_i].lv_gates = UnitGroupEmpty();
        gv_cellInfoArray[init_i].lv_divices = UnitGroupEmpty();
    }
    gv_dEVICE_NAME_MONITOR = StringExternal("Param/Value/E4F800F5");
    gv_dEVICE_NAME_EMERGENCY_CONSOLE = StringExternal("Param/Value/8FD00034");
    gv_dEVICE_NAME_POWER_CONTROLLER = StringExternal("Param/Value/3713459F");
    gv_dEVICE_NAME_RDT = StringExternal("Param/Value/FD355BE8");
    gv_dEVICE_NAME_SATELITE = StringExternal("Param/Value/0E5BC3E0");
    gv_dEVICE_NAME_MEDICAL = StringExternal("Param/Value/3022F82E");
    gv_dEVICE_NAME_INCINERATOR = StringExternal("Param/Value/7DC6ACB9");
    gv_dEVICE_NAME_CAGE = StringExternal("Param/Value/511102E3");
    gv_dEVICE_NAME_ARCHIVE = StringExternal("Param/Value/CD94AF06");
    gv_dEVICE_NAME_PHASESHIFTER = StringExternal("Param/Value/91881EB7");
    gv_deviceIndexLast = -1;
    for (init_i = 0; init_i <= gv_dEVICE_INDEX_MAX; init_i += 1) {
        gv_deviceInfoArray[init_i].lv_type = ge_DeviceType_None;
        gv_deviceInfoArray[init_i].lv_mainState = ge_DeviceState_None;
        gv_deviceInfoArray[init_i].lv_arrayIndex = -1;
        gv_deviceInfoArray[init_i].lv_user = c_playerAny;
        gv_deviceInfoArray[init_i].lv_flag = ge_DeviceFlag_NeedsPower;
    }
    for (init_i = 0; init_i <= gv_aBCAGE_ARRAY_INDEX_MAX; init_i += 1) {
        gv_aberrationCageInfoArray[init_i].lv_deviceIndex = -1;
        gv_aberrationCageInfoArray[init_i].lv_state = ge_AberrationCageState_Managing;
        gv_aberrationCageInfoArray[init_i].lv_timer = TimerCreate();
    }
    gv_aberrationCageIndexLast = -1;
    gv_archiveInfo.lv_deviceIndex = -1;
    gv_archiveInfo.lv_firstRecordIndex = -1;
    gv_archiveInfo.lv_lastRecordIndex = -1;
    for (init_i1 = 0; init_i1 <= gv_aRCHIVE_LIST_INDEX_MAX; init_i1 += 1) {
        gv_archiveInfo.lv_playerRecord[init_i1] = c_playerAny;
    }
    for (init_i1 = 0; init_i1 <= gv_aRCHIVE_LIST_INDEX_MAX; init_i1 += 1) {
        gv_archiveInfo.lv_cellRecord[init_i1] = ge_Cell_None;
    }
    gv_archiveInfo.lv_timer = TimerCreate();
    gv_iNCI_TEXT_STABILIZING = StringExternal("Param/Value/CC08C667");
    gv_iNCI_TEXT_CLEANING = StringExternal("Param/Value/86432E0A");
    gv_iNCI_TEXT_RUNNING = StringExternal("Param/Value/877BB664");
    gv_iNCI_TEXT_PREPARED = StringExternal("Param/Value/7A60B396");
    gv_iNCI_TEXT_PREPARING = StringExternal("Param/Value/F5787424");
    gv_incineratorInfo.lv_deviceIndex = -1;
    gv_incineratorInfo.lv_targetsPlayers = PlayerGroupEmpty();
    gv_incineratorInfo.lv_timer = TimerCreate();
    gv_medicalBotInfo.lv_state = ge_MedicalBotState_Idle;
    for (init_i = 0; init_i <= gv_mONITOR_INDEX_MAX; init_i += 1) {
        gv_monitorInfoArray[init_i].lv_deviceIndex = -1;
        gv_monitorInfoArray[init_i].lv_targetingDelayTimer = TimerCreate();
        gv_monitorInfoArray[init_i].lv_transmitCooldownTimer = TimerCreate();
        gv_monitorInfoArray[init_i].lv_alertMessageDealyTimer = TimerCreate();
    }
    gv_monitorIndexLast = -1;
    for (init_i = 0; init_i <= gv_pHASESHIFTER_INDEX_MAX; init_i += 1) {
        gv_phaseShifterInfoArray[init_i].lv_deviceIndex = -1;
    }
    gv_phaseShifterLastIndex = -1;
    gv_powerControllerInfo.lv_deviceIndex = -1;
    gv_powerControllerInfo.lv_timer = TimerCreate();
    gv_rdtInfo.lv_deviceIndex = -1;
    gv_rdtInfo.lv_state = ge_RDTState_None;
    gv_rdtInfo.lv_timer = TimerCreate();
    gv_rdtInfo.lv_scanTarget = c_playerAny;
    gv_sateliteControllerInfo.lv_state = ge_SateliteControllerState_None;
    gv_sateliteControllerInfo.lv_timer = TimerCreate();
    gv_sateliteControllerInfo.lv_deviceIndex = -1;
    gv_eMERGENCYCONSOLE_TEXT_NORMAL = StringExternal("Param/Value/A7BBCF4F");
    gv_eMERGENCYCONSOLE_TEXT_RESTRICT = StringExternal("Param/Value/B6EDB9F0");
    gv_emergencyControlConsoleInfo.lv_indexOfTargetCell = -1;
    gv_emergencyControlConsoleInfo.lv_state = ge_EmergencyControlConsoleState_None;
    gv_emergencyControlConsoleInfo.lv_timer = TimerCreate();
    gv_emergencyControlConsoleInfo.lv_deviceIndex = -1;
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_fullscreenDialogInfoArray[init_i].lv_curType = ge_CustomFullScreenDialogType_None;
        gv_fullscreenDialogInfoArray[init_i].lv_curDialog = c_invalidDialogId;
    }
    gv_changelingSelectionPanel.lv_dialog = c_invalidDialogId;
    gv_changelingSelectionPanel.lv_panel = c_invalidDialogControlId;
    gv_changelingSelectionPanel.lv_applyButton = c_invalidDialogControlId;
    gv_changelingSelectionPanel.lv_playerList = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_changelingSelectionPanel.lv_playerListItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_changelingSelectionPanel.lv_playerRankImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_changelingSelectionPanel.lv_playerNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_changelingSelectionPanel.lv_kickVoteButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_changelingSelectionPanel.lv_kickVoteCountLabel[init_i1] = c_invalidDialogControlId;
    }
    gv_changelingSelectionPanel.lv_gameStartCounterText = c_invalidDialogControlId;
    gv_characterHUDDailog = c_invalidDialogId;
    gv_characterHUDPanel = c_invalidDialogControlId;
    gv_wEAPON_IMAGE_RIFLE = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel0.dds";
    gv_wEAPON_IMAGE_ABDUCT = "Assets\\Textures\\btn-upgrade-zerg-abathur-abduct.dds";
    gv_weaponPanel = c_invalidDialogControlId;
    gv_weaponAmmoText = c_invalidDialogControlId;
    gv_weaponIconImage = c_invalidDialogControlId;
    gv_weaponIconBorderImage = c_invalidDialogControlId;
    gv_aimBox = c_invalidDialogControlId;
    gv_hitBox = c_invalidDialogControlId;
    gv_characterStatusPanel.lv_panel = c_invalidDialogControlId;
    gv_characterStatusPanel.lv_healthBarImage = c_invalidDialogControlId;
    gv_characterStatusPanel.lv_staminaBarImage = c_invalidDialogControlId;
    gv_characterStatusPanel.lv_changelingProcessBarPanel = c_invalidDialogControlId;
    gv_characterStatusPanel.lv_changelingProcessBarImage = c_invalidDialogControlId;
    gv_bAR_CHANGELINGPROCESS_COLOR1 = Color(30.59, 9.41, 58.82);
    gv_bAR_CHANGELINGPROCESS_COLOR2 = Color(1.96, 0.00, 60.00);
    gv_deviceHUDDialog = c_invalidDialogId;
    gv_aberrationCagePanel.lv_panel = c_invalidDialogControlId;
    gv_aberrationCagePanel.lv_progressBar = c_invalidDialogControlId;
    gv_archivePanel.lv_panel = c_invalidDialogControlId;
    gv_archivePanel.lv_list = c_invalidDialogControlId;
    gv_archivePanel.lv_button = c_invalidDialogControlId;
    gv_archivePanel.lv_numberLabel = c_invalidDialogControlId;
    gv_archivePanel.lv_timerWindow = c_timerWindowNone;
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_archivePanel.lv_selectedItemIndex[init_i1] = -1;
    }
    gv_incineratorPanel.lv_panel = c_invalidDialogControlId;
    gv_incineratorPanel.lv_button = c_invalidDialogControlId;
    gv_incineratorPanel.lv_timerWindow = c_timerWindowNone;
    gv_medicalBotPanel.lv_panel = c_invalidDialogControlId;
    gv_medicalBotPanel.lv_progressBar = c_invalidDialogControlId;
    gv_medicalBotPanel.lv_progressBarNameLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_mONITOR_INDEX_MAX; init_i += 1) {
        gv_monitorPanelArray[init_i].lv_panel = c_invalidDialogControlId;
        gv_monitorPanelArray[init_i].lv_pulldown = c_invalidDialogControlId;
        gv_monitorPanelArray[init_i].lv_blackImage = c_invalidDialogControlId;
        gv_monitorPanelArray[init_i].lv_restrictLabel = c_invalidDialogControlId;
        gv_monitorPanelArray[init_i].lv_timerWindow = c_timerWindowNone;
    }
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_monitorTrackingDialog[init_i] = c_invalidDialogId;
    }
    gv_pGC_TEXT_SHUTDOWN = StringExternal("Param/Value/E1FD4EAF");
    gv_pGC_TEXT_SUPPLYPOWER = StringExternal("Param/Value/3FE5CE5B");
    gv_powerControllerPanel.lv_panel = c_invalidDialogControlId;
    gv_powerControllerPanel.lv_button = c_invalidDialogControlId;
    gv_powerControllerPanel.lv_timerWindow = c_timerWindowNone;
    gv_rdtPanel.lv_panel = c_invalidDialogControlId;
    gv_rdtPanel.lv_button = c_invalidDialogControlId;
    gv_rdtPanel.lv_progressBar = c_invalidDialogControlId;
    gv_rdtPanel.lv_timerWindow = c_timerWindowNone;
    gv_emergencyControlConsolePanel.lv_panel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_cELL_INDEX_MAX; init_i1 += 1) {
        gv_emergencyControlConsolePanel.lv_panelItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_cELL_INDEX_MAX; init_i1 += 1) {
        gv_emergencyControlConsolePanel.lv_controlButtonArray[init_i1] = c_invalidDialogControlId;
    }
    gv_emergencyControlConsolePanel.lv_timerWindow = c_timerWindowNone;
    gv_sateliteControllerPanel.lv_panel = c_invalidDialogControlId;
    gv_sateliteControllerPanel.lv_button = c_invalidDialogControlId;
    gv_sateliteControllerPanel.lv_progressBar = c_invalidDialogControlId;
    gv_sateliteControllerPanel.lv_timerWindow = c_timerWindowNone;
    gv_gateUnlockProcessPanel.lv_dialog = c_invalidDialogId;
    gv_gateUnlockProcessPanel.lv_processBar = c_invalidDialogControlId;
    gv_voteInfo.lv_dialog = c_invalidDialogId;
    gv_mINIMAP_CONVERSION_MULT_FACTOR = 6.34;
    gv_customMinimap.lv_dialog = c_invalidDialogId;
    gv_customMinimap.lv_mapImage = c_invalidDialogControlId;
    gv_customMinimap.lv_characterIconImage = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_aBCAGE_ARRAY_INDEX_MAX; init_i1 += 1) {
        gv_customMinimap.lv_abberationImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_customMinimap.lv_sateliteTargetImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_cELL_INDEX_MAX; init_i1 += 1) {
        gv_customMinimap.lv_celLabelArray[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_canControlMinimap[init_i] = true;
    }
    gv_utilityDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_canControlUtilityPanel[init_i] = true;
    }
    gv_selectionPanel.lv_panel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_sELECTION_MENU_ITEM_INDEX_MAX; init_i1 += 1) {
        gv_selectionPanel.lv_menuItems[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_sELECTION_MENU_ITEM_INDEX_MAX; init_i1 += 1) {
        gv_selectionPanel.lv_menuValueTable[init_i1] = ge_UtilityPanelType_None;
    }
    gv_helpTextPanel.lv_panel = c_invalidDialogControlId;
    gv_helpTextPanel.lv_listBox = c_invalidDialogControlId;
    gv_helpTextPanel.lv_bodyTextLabel = c_invalidDialogControlId;
    gv_helpTextPanel.lv_synopsis.lv_listBoxIndex = -1;
    gv_helpTextPanel.lv_commandHelp.lv_listBoxIndex = -1;
    gv_helpTextPanel.lv_objectMarine.lv_listBoxIndex = -1;
    gv_helpTextPanel.lv_objectChangeling.lv_listBoxIndex = -1;
    for (init_i1 = 0; init_i1 <= gv_dEVICE_TYPE_INDEX_MAX; init_i1 += 1) {
        gv_helpTextPanel.lv_deviceHelp[init_i1].lv_listBoxIndex = -1;
    }
    gv_helpTextPanel.lv_blacklistHelp.lv_listBoxIndex = -1;
    gv_helpTextPanel.lv_legacyScoreHelp.lv_listBoxIndex = -1;
    gv_helpTextPanel.lv_accountBanHelp.lv_listBoxIndex = -1;
    gv_helpTextPanel.lv_comment.lv_listBoxIndex = -1;
    gv_blacklistPanel.lv_panel = c_invalidDialogControlId;
    gv_blacklistPanel.lv_targetUserListTypePulldown = c_invalidDialogControlId;
    gv_blacklistPanel.lv_targetUserListBox = c_invalidDialogControlId;
    gv_blacklistPanel.lv_targetUserHandleEditBox = c_invalidDialogControlId;
    gv_blacklistPanel.lv_addTargetUserButton = c_invalidDialogControlId;
    gv_blacklistPanel.lv_registeredUserListBox = c_invalidDialogControlId;
    gv_blacklistPanel.lv_registeredUserHandleEditBox = c_invalidDialogControlId;
    gv_blacklistPanel.lv_removeRegisteredUserButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        gv_blacklistPanelUserInfoArray[init_i].lv_targetUserListType = ge_BlacklistTargetUserListType_None;
    }
    gv_chatSettingPanel.lv_panel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_chatSettingPanel.lv_checkBoxArray[init_i1] = c_invalidDialogControlId;
    }
    gv_tutorialMessageInfo.lv_dialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= gv_uSER_INDEX_MAX; init_i1 += 1) {
        gv_tutorialMessageInfo.lv_tutorialLabel[init_i1] = c_invalidDialogControlId;
    }
    gv_dirtyFactor = RandomInt(-99999, 99999);
    gv_testDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_unitgroups[init_i] = UnitGroupEmpty();
    }
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_GameState ();
timer gf_GameTimer ();
int gf_GameTimerWindow ();
point gf_ResponePointbyIndex (int lp_index);
int gf_KickVoteCount (int lp_user);
int gf_MainGameSubState ();
void gf_SendMainGameStateChangedEvent ();
void gf_MainGameStateChanged (trigger t);
bool gf_IsUnitInEscapeTrain (unit lp_unit);
playergroup gf_GetUsersInEscapeTrain ();
void gf_MoveUnitintoEscapeTrain (unit lp_unit);
void gf_SetGameStatetoGameEnd (int lp_gameEndType);
void gf_GameEndChangelingHasBeenKilled (int lp_changelingKiller);
void gf_GameEndNoChangelingIsinEscapeTrain ();
void gf_GameEndChangelingKilledAllMarines ();
void gf_GameEndDrawbyExplosion ();
void gf_GameEndChangelingSurvivedInEscapeTrain ();
bool gf_IsUser (int lp_player);
text gf_RecordedUserName (int lp_user);
text gf_RecordedUserNamewithColor (int lp_player);
string gf_RecordedHandleofUser (int lp_user);
int gf_LastNumberofHandle (int lp_user);
int gf_GetUserIndex (int lp_user);
playergroup gf_StartingUsers ();
playergroup gf_AllPlayingUsers ();
int gf_UserPlayMode (int lp_player);
int gf_PreviousAliveUser (int lp_user, int lp_playMode);
int gf_NextAliveUser (int lp_user, int lp_playMode);
void gf_KickUser (int lp_user, text lp_reason);
int gf_GetObserverState (int lp_observer);
playergroup gf_GetUserwithObservers (int lp_player);
playergroup gf_GetUser (int lp_player);
playergroup gf_GetObservers (int lp_targetPlayer);
playergroup gf_GetAllObservers ();
int gf_GetObserverTargetUser (int lp_user);
void gf_SetUserModetoObserver (int lp_user, int lp_targetUser);
void gf_SetObserverTargetUser (int lp_user, int lp_targetUser);
bool gf_IsCancelationRequestedforCamera (int lp_user);
int gf_CameraState (int lp_user);
int gf_CameraMode (int lp_user);
unit gf_CameraTargetUnit (int lp_user);
region gf_CameraTargetRegion (int lp_user);
int gf_CameraTrackingTargetUser (int lp_user);
playergroup gf_CameraTrackingUsers ();
camerainfo gf_CameraSampleObject (int lp_user);
void gf_ApplyCameraObjectNotIncludeTargetandAnlgeofAttack (int lp_player, camerainfo lp_cameraObject, fixed lp_duration, fixed lp_initialiVelocity, fixed lp_decelerate);
void gf_SetCameraModetoFocusingUnit (int lp_user, unit lp_tagetUnit, camerainfo lp_sampleCameraObject, fixed lp_duration);
void gf_SetCameraModetoTPS (int lp_user, unit lp_targetUnit, fixed lp_duration, fixed lp_deceleration, bool lp_keepPitchAndYaw);
void gf_SetCameraModetoTopSideView (int lp_user, region lp_targetRegion, fixed lp_duration, point lp_startingPoint);
void gf_SetCameraModetoControllingDevice (int lp_user, unit lp_device, fixed lp_duration);
void gf_SetCameraModetoTrackingEscapeTrain (int lp_user);
void gf_SetCameraStatetoTransitioning (int lp_player, fixed lp_duration);
void gf_SetCameraStatetoStable (int lp_player);
void gf_SetCameraTrackingTargetUser (int lp_user, int lp_targetUser);
void gf_RequestCancelationandWaituntilAcceptedforCamera (int lp_player);
void gf_CameraTrackingTickAction (int lp_user, fixed lp_duration);
void gf_OnCameraModeChanged (int lp_user);
void gf_OpenBlacklistBank (int lp_user);
void gf_OpenLastPlayersBank (int lp_user);
bool gf_IsValidBankKeyIndex (bank lp_bank, string lp_section, int lp_keyIndex);
bank gf_GetBlacklistBank (int lp_user);
bank gf_GetLastPlayersBank (int lp_user);
void gf_LoadLegacyScore (int lp_user);
void gf_SaveLegacyScorebyGameEndType (int lp_gameEndType);
void gf_GiveandSaveLegacyScorePointforUser (int lp_user, int lp_scoreType);
void gf_ScoreGive (int lp_user, int lp_scoreType, int lp_scoreInt);
bank gf_GetLegacyScoreBank (int lp_user);
string gf_GetLegacyRankImagebyTier (int lp_mainTier, int lp_subTier);
string gf_GetLegacyRankImagebyScore (int lp_killedChangelings, int lp_foundChangelings, int lp_changelingWinCount);
string gf_GetLegacyRankImagefromUser (int lp_user);
int gf_GetLegacyScore (int lp_user, int lp_scoreType);
int gf_GetTotalLegacyScore (int lp_user);
string gf_GetHandlebyCombiningId (int lp_localCode, int lp_firstId, int lp_secondId);
timer gf_GetAssistUserResetTimer ();
int gf_GetAssistUser ();
int gf_GetKillingChangelingUser ();
int gf_GetLegacyScoreDialogCancelationToken (int lp_user);
void gf_SetAssistUserforFoundChangelingScore (int lp_user, fixed lp_duration, bool lp_forced);
void gf_SetKillingChangelingUser (int lp_user);
bool gf_CanSaveLegacyScore ();
playergroup gf_GetUsersRegisteringTargetUserAsBlacklist (int lp_targetUser);
bool gf_IsUserinBlacklistBank (int lp_blacklistOwner, int lp_targetUser, int lp_saveType);
bool gf_IsHandleinBlacklistBank (int lp_blacklistOwner, string lp_handle, int lp_saveType);
string gf_GetBlacklistBankSection (int lp_saveType);
text gf_GetUserNameFromBlacklistBank (int lp_blacklistOwner, string lp_handle, int lp_saveType);
text gf_GetUserNameFromBlacklistBankbyKeyIndex (int lp_blacklistOwner, int lp_keyIndex, int lp_saveType);
string gf_GetUserHandleFromBlacklistBankbyKeyIndex (int lp_blacklistOwner, int lp_keyIndex, int lp_saveType);
int gf_GetLastBlacklistBankKeyIndex (int lp_blacklistOwner);
void gf_UpdateLastPlayersinBlacklist (int lp_user);
void gf_AddUsertoBlacklist (int lp_blacklistOwner, text lp_userName, string lp_userHandle);
void gf_RemoveUserfromBlacklist (int lp_blacklistOwner, string lp_handle);
void gf_RemoveUserfromBlacklistbyIndex (int lp_blacklistOwner, int lp_index);
void gf_UpdateUserNameInBlackistBank (int lp_blacklistOwner);
bool gf_IsReceivingPlayer (int lp_sender, int lp_receiver);
string gf_RemoveAngleBracketsInString (string lp_string);
playergroup gf_GetChatReceivingPlayers (int lp_sender);
playergroup gf_GetChatNotReceivingUsers (int lp_sender);
void gf_ChatMesssageFromGamePlayer (int lp_gamePlayer, string lp_message);
void gf_ChatMesssageFromObservers (int lp_observer, string lp_message);
void gf_RemoveNotReceivingUsersFromPlayers (int lp_sender, playergroup lp_targetUsers);
void gf_AddUsertoNotReceivingUserGroup (int lp_sender, int lp_receiver);
void gf_RemoveUserfromNotRecievingUserGroup (int lp_sender, int lp_reciever);
void gf_ClearMessageinChatArea (playergroup lp_pg);
int gf_GetGlobalEnvironmentState ();
int gf_GetLocalEnvironmentState (int lp_user);
void gf_SetEnvironmentSFXforPlayer (int lp_player, int lp_state);
void gf_SetGlobalEnvironmentState (int lp_state);
void gf_SetLocalEnvironmentStateforUser (int lp_user, int lp_state);
void gf_SetLocalEnvironmentStateforUserwithObs (int lp_user, int lp_state);
void gf_RemoveLocalEnvironmentStateforUser (int lp_player);
void gf_RemoveLocalEnvironmentStateforUserwithObs (int lp_player, int lp_state);
void gf_CopyEnvironmentStatefromUsertoUser (int lp_sourceUser, int lp_targetUser);
void gf_SetMarineCharacterforUser (int lp_user, unit lp_unit);
int gf_GetChangelingState ();
int gf_GetChangelingPlayer ();
int gf_GetDisguiseTargetUser ();
int gf_GetDisguiseTargetUserifUserisChangeling (int lp_user);
int gf_GetChangelingDisguiseState ();
bool gf_ChangelingCanDisguise ();
bool gf_ChangelingCanEat ();
bool gf_ChangelingCanUseAbility ();
timer gf_GetChangelingTimer ();
bool gf_IsChangelingCloaked ();
void gf_SetUserasChangeling (int lp_player, unit lp_unit);
void gf_SetTargetPlayerofDisguise (int lp_player);
void gf_SetChangelingState (int lp_state);
void gf_SetChangelingDisguiseState (int lp_state);
void gf_AllowDisallowUseChangelingAbility (bool lp_allowdisallow);
void gf_SetCharacterRole (int lp_player, int lp_role);
void gf_BehaviorTickAction (int lp_user);
void gf_SetCharacterStatetoControllingDevice (int lp_user, unit lp_device);
void gf_RemoveCharacterStateofControllingDevice (int lp_player);
void gf_ActionsforReleasingAberration (int lp_player);
void gf_ActionsforStopReleasingAberration (int lp_player);
void gf_ActionforReadingArchive (int lp_player);
void gf_ActionforStopReadingArchive (int lp_player);
void gf_ActionsforControllingIncinerator (int lp_player);
void gf_ActionsforStopControllingIncinerator (int lp_player);
void gf_ActionsforControllingMedicalBot (unit lp_medicalBot, int lp_user);
void gf_ActionsforStopControllingMedicalBot (int lp_player);
void gf_ActionsforControllingMonitor (int lp_user, unit lp_monitor);
void gf_ActionsforStopControllingMonitor (int lp_user);
void gf_ActionsforControllingPowerController (int lp_player);
void gf_ActionsforStopControllingPowerController (int lp_player);
void gf_ActionsforControllingRDT (int lp_player);
void gf_ActionsforStopContollingRDT (int lp_player);
void gf_ActionsforControllingSateliteController (int lp_player, unit lp_unit);
void gf_ActionsforStopControllingSateliteController (int lp_player);
void gf_ActionsforControllingSecurityController (int lp_player);
void gf_ActionsforStopControllingSecurityController (int lp_player);
unit gf_GetTargetGatetoUnlockforUser (int lp_user);
void gf_SetCharacterStatetoUnlockingGate (int lp_user, unit lp_gate);
void gf_CancelUnlockingGateforUser (int lp_user);
int gf_GetRemainingAmmo (int lp_user);
bool gf_IsAllowedtoFire (int lp_user);
void gf_AllowDisallowUsertoFire (int lp_user, bool lp_bool);
void gf_SetAmmoAmount (int lp_user, int lp_amount);
bool gf_IsMoveKeyPressed (int lp_player);
void gf_UpdateDirectionofUserMovement (int lp_player);
void gf_MarineDeadMainGameQ (int lp_killingPlayer, int lp_deadMarine);
void gf_SetCharacterStatetoWaitingInEscapeTrain (int lp_user);
void gf_SetCharacterStatetoVoting (int lp_user);
void gf_IssueOrderforChangelingtoEat (int lp_targetUser);
playergroup gf_AliveMarineUsers ();
playergroup gf_AliveUsers ();
unit gf_CharacterUnit (int lp_user);
unitgroup gf_AllAliveCharacters ();
unitgroup gf_AllMarines ();
int gf_CharacterState (int lp_user);
int gf_CharacterRole (int lp_user);
playergroup gf_GetUserGroupbyTypeofControllingDevice (int lp_devicetype);
unit gf_GetDeviceInUse (int lp_user);
timer gf_CharacterGenericTimer (int lp_user);
timer gf_CharacterDamageTakenTimer (int lp_user, int lp_attacker);
bool gf_CharacterHasStatusFlag (int lp_user, int lp_flag);
void gf_SetUnitasCharacter (int lp_user, unit lp_unit);
void gf_SetCharacterStatetoNormalState (int lp_user);
void gf_SetCharacterStatusFlag (int lp_user, int lp_flag, bool lp_onoff);
bool gf_IsUserAlive (int lp_user);
bool gf_IsChangelingUser (int lp_player);
bool gf_IsCharacter (unit lp_unit);
bool gf_CanControlDevice (int lp_player, int lp_device);
int gf_GetEmergencyState ();
void gf_SetEmergencyState (int lp_state);
void gf_PowerStateofLabChanged (trigger t);
string gf_GetEventNameofPowerState (int lp_powerState);
int gf_TriggeringPowerState ();
int gf_GetPowerState ();
void gf_SetPowerState (int lp_state);
void gf_UpdateGlobalEnvironmentbyPropertiesofLab ();
unitgroup gf_GetCharactersInLab ();
bool gf_IsUnitInRestrictedCell (unit lp__unit);
void gf_InitializeCellInfo (int lp_cell, text lp_name, region lp_area, point lp_point, int lp_securityLevel, unitgroup lp_doors);
int gf_GetCellbyIndex (int lp_index);
int gf_GetCellbyRegion (region lp_region);
int gf_GetCellwhereUnitExists (unit lp_unit);
region gf_GetCellRegionPreloadVersion (int lp_cell);
region gf_GetCellRegion (int lp_cell);
region gf_GetCellRegionbyIndex (int lp_index);
point gf_GetCellPointbyIndex (int lp_index);
int gf_GetCellIndex (int lp_cell);
int gf_GetLastCellIndex ();
text gf_GetCellName (int lp_cell);
bool gf_IsUnitInCell (unit lp_unit, int lp_cell);
unitgroup gf_GetCharactersInCell (int lp_cell);
playergroup gf_GetUsersInCellwithObs (int lp_cell);
void gf_UnitEntersLeavesCell (trigger t, bool lp_enterleave);
bool gf_IsGate (unit lp_gate, int lp_mode);
unitgroup gf_GetCellGates (int lp_cell);
unitgroup gf_GetAllofCellGates ();
unitgroup gf_GetAllGates (int lp_mode);
int gf_GetGateState (unit lp_gate);
unit gf_GetGateInFrontofUser (int lp_user, int lp_mode);
void gf_InitializeGate (unit lp_gate);
void gf_OpenCloseGate (unit lp_gate, bool lp_openclose);
void gf_SetPowerStateforGate (unit lp_gate, int lp_powerState);
int gf_TriggeringAccessLevelChangedCell ();
int gf_GetAccessLevelofCell (int lp_cell);
void gf_SetAccessLevelofCell (int lp_cell, int lp_securityLevel);
void gf_AccessLevelChanged (trigger t);
bool gf_IsDevice (unit lp_unit);
bool gf_CanInitializeNewDeviceInfo ();
void gf_SetDeviceStatetoInUse (unit lp_device, int lp_user);
void gf_SetDeviceStatetoUsed (unit lp_device);
void gf_SetDeviceStatetoNormalState (unit lp_device);
void gf_InitializeDeviceInfo (unit lp_device, int lp_type, int lp_flag);
bool gf_MaskDeviceFlag (int lp_lhs, int lp_rhs);
bool gf_HasDeviceFlag (unit lp_device, int lp_lhs);
unitgroup gf_AllDevices ();
unitgroup gf_AllDevicesofDeviceType (int lp_deviceType);
unit gf_DevicewithIdleStateNearbycharacter (int lp_player);
unit gf_DeviceTesters (int lp_player);
unit gf_DevicebyIndex (int lp_index);
int gf_DeviceState (unit lp_device);
int gf_DeviceUser (unit lp_device);
int gf_DeviceIndex (unit lp_device);
text gf_DeviceName (int lp_deviceType);
int gf_DeviceType (unit lp_device);
int gf_DeviceTypeIndex (int lp_deviceType);
int gf_LastDeviceIndex ();
text gf_DeviceNamebyDeviceType (int lp_type);
int gf_DefaultDeviceFlag (int lp_deviceType);
bool gf_IsAberration (unit lp_unit);
void gf_InitializeAberrationCage (unit lp_device, unit lp_cage, unitgroup lp_doorBlocker);
void gf_StartReleasingAberration (unit lp_aberrationCage, int lp_user, fixed lp_time);
void gf_CancelReleasingAberration (unit lp_aberrationCage);
void gf_ReleaseAberration (unit lp_aberrationCage, int lp_user);
unit gf_GetAberrationCage (int lp_index);
unit gf_GetAberrationCageBuildingbyIndex (int lp_index);
int gf_GetAberrationCageIndex (unit lp_cage);
int gf_GetAberrationCageIndexbyAberration (unit lp_aberration);
int gf_GetLastAberrationCageIndex ();
unitgroup gf_GetAllAberrations ();
unit gf_GetAberrationbyIndex (int lp_index);
int gf_GetAberrationCageState (unit lp_cage);
int gf_GetAberrationCageStatebyIndex (int lp_index);
void gf_InitializeArchive (unit lp_device);
void gf_WriteRecordtoArchive (int lp_user, unit lp_device, int lp_cell, text lp_text);
unit gf_ArchiveUnit ();
timer gf_ArchiveTimer ();
int gf_FirstRecordIndexofArchive ();
int gf_LastRecordIndexofArchive ();
int gf_CellRecordfromArchive (int lp_archiveIndex);
int gf_PlayerRecordFromArchive (int lp_archiveIndex);
unit gf_DeviceRecordFromArchive (int lp_archiveIndex);
text gf_TextRecordfromArchive (int lp_archiveIndex);
int gf_NextRecordIndex (int lp_index);
int gf_PreviousRecordIndex (int lp_index);
void gf_IncineratorTimerExpires (trigger t);
void gf_IncineratorOperationFinished (trigger t);
void gf_InitializeIncinerator (unit lp_device, unit lp_gate, region lp_targetRegion);
void gf_SetIncineratorStatetoPreparing (fixed lp_time);
void gf_SetIncineratorStatetoPrepared ();
void gf_SetIncineratorStatetoStabilizing (fixed lp_time);
void gf_SetIncineratorStatetoStabilized ();
void gf_RunIncinerator (int lp_user, fixed lp_timeRunning, fixed lp_timeStabilizing, bool lp_requiresPower);
void gf_CancelRunningIncinerator ();
unit gf_IncineratorUnit ();
int gf_IncineratorState ();
unit gf_IncineratorGate ();
timer gf_IncineratorTimer ();
region gf_IncineratorTargetArea ();
unitgroup gf_UnitsinIncineratorTargetArea ();
playergroup gf_UsersinIncineratorTargetArea ();
void gf_InitializeMedicalBot (unit lp_device, unit lp_healer);
void gf_OrderMedicalBottoStartHealing (unit lp_medicalBot, int lp_user, fixed lp_preparingTime);
void gf_OrderMedicalBottoHealCharacter (unit lp_medicalBot, int lp_user);
void gf_CancelMedicalBotHealing (unit lp_medicalBot);
int gf_MedicalBotState ();
unit gf_MedicalBotHealerUnit ();
void gf_MonitorTimerExpires (trigger t);
void gf_InitializeMonitorInfo (unit lp_device);
void gf_SetMonitoringCell (unit lp_monitor, int lp_targetCell);
void gf_SetUsertoWatchEntireCellArea (int lp_user, int lp_targetCell);
void gf_ClearRevealerforPlayer (int lp_player);
unit gf_GetMonitor (int lp_monitorIndex);
unit gf_GetMonitorbyTriggeringPulldown ();
unit gf_GetMonitorbyTriggeringTimer ();
int gf_GetMonitoringCell (unit lp_monitor);
int gf_GetMonitorIndex (unit lp_monitor);
timer gf_GetMonitorTargetingDelayTimer (unit lp_monitor);
timer gf_GetMonitorTransmitCooldownTimer (unit lp_monitor);
unitgroup gf_GetAllMonitors ();
int gf_GetLastMonitorIndex ();
void gf_InitializePhaseShifter (unit lp_device, point lp_arrivalPoint, unit lp_gate);
int gf_GetLastIndexofPhaseShifter ();
void gf_InitializePowerController (unit lp_device);
unit gf_PowerControllerUnit ();
int gf_PowerControllerState ();
timer gf_PowerControllerTimer ();
void gf_PowerControllerTimerExpiers (trigger t);
unit gf_GetRDT ();
int gf_GetRDTState ();
timer gf_GetRDTTimer ();
int gf_GetTargetUserofRDT ();
void gf_InitializeRadiationDiagnosticTester (unit lp_device);
void gf_SetRDTStatetoPreparing (fixed lp_time);
void gf_SetRDTStatetoPrepared ();
void gf_RDTStartScanning (int lp_targetUser, fixed lp_scanningTime, fixed lp_preparingTime);
void gf_RDTCancelScanning ();
void gf_RDTScanTargetUser (int lp_targetUser);
void gf_InitializeSateliteController (unit lp_device, fixed lp_preparingTime);
void gf_SetSateliteControllerStatetoPrepared ();
void gf_SetSateliteControllerStatetoPreparing (fixed lp_preparingTime);
void gf_SetSateliteControllerStatetoTrackingforTime (fixed lp_trackingTime, fixed lp_preparingTime, playergroup lp_playerGroup);
void gf_OrderSatelitetoStartTracking (int lp_orderingUser, playergroup lp_recievingUserGroup, fixed lp_trackingDelayTime, fixed lp_trackingDurationTime, fixed lp_preparingTime);
void gf_UpdateDirectionMessageSCC (int lp_player);
timer gf_GetSateliteControllerTimer ();
int gf_GetSateliteControllerState ();
unit gf_GetSatatliteController ();
void gf_InitializeEmergencyControlConsole (unit lp_device);
unit gf_GetEmergencyControlConsole ();
int gf_GetEmergencyControlConsoleState ();
int gf_GetEmergencyControlConsoleTargetIndex ();
timer gf_GetEmergencyControlConsoleTimer ();
int gf_GetCustomFullScreenDialog (int lp_dialogType);
int gf_GetCurrentFullScreenDialogType (int lp_user);
void gf_SetCurrentFullScreenDialogforPlayer (int lp_player, int lp_dialogType);
void gf_LockCustomFullScreenDialog (int lp_user, bool lp_lock);
void gf_EnableDisableRevealerforEntireMap (bool lp_enabledisable, int lp_player);
void gf_CopyHUDStatefromUsertoUser (int lp_sourceUser, int lp_targetUser);
void gf_CreatePlainDialog ();
void gf_CreatePlainPanelInDialog (int lp_parentDialog);
void gf_CreateCustomizedPanelInDialog (int lp_parentDialog, int lp_width, int lp_height);
void gf_CreateCustomizedButtonInPanel (int lp_panel, text lp_text);
void gf_HookupInnerPanelinCustomizedPanel (int lp_panel);
void gf_CreateCustomizedProgressBarInPanel (int lp_panel);
void gf_HookupBarImageinCustomizedProgressBar (int lp_progressBar);
void gf_HookupNameLabelinCustomizedProgressBar (int lp_progressBar);
void gf_HookupLeftBarLabelinCustomizedProgressBar (int lp_progressBar);
void gf_SetValueofBarImageinProgressBar (int lp_barImage, fixed lp_value, playergroup lp_playerGroup);
void gf_SetColorofBarImageinProgressBar (int lp_progressBar, color lp_color);
void gf_ActivateProgressBarforTimer (int lp_progressBar, int lp_user, timer lp_timer);
void gf_ActivateProgressBarforUnitProperty (int lp_progressBar, int lp_user, unit lp_unit, int lp_unitPropertyPercent);
void gf_RequestStopProgressBar (int lp_progressBar, int lp_user);
void gf_RequestStopProgressBarAndLockUntilAccepted (int lp_progressBar, int lp_user);
void gf_SetProgressBarState (int lp_progressBar, int lp_state, int lp_user);
int gf_GetProgressBarState (int lp_progressBar, int lp_user);
int gf_GetChangelingSelectionPanelElement (int lp_element, int lp_userneedsforuserrelateditem);
int gf_GetTargetUserofKickVoteButton (int lp_button);
void gf_UpdateWeaponFrameToRifle (int lp_sourceUser, playergroup lp_pg);
void gf_UpdateWeaponFrameToAbduct (playergroup lp_pg);
void gf_UpdateWeaponStatusPanel (int lp_sourceUser, playergroup lp_pg);
void gf_UpdateWeaponStatusforUserwithObservers (int lp_user);
void gf_ShowHideAimBox (bool lp_showhide, playergroup lp_playergroup);
int gf_CalcualteUnitPropertyBarWidth (fixed lp_sourceLife, fixed lp_targetLife, int lp_barWidthMax);
int gf_GetCharacterStatusPanelElement (int lp_element);
color gf_GetMixedColor (color lp_colorA, color lp_colorB, fixed lp_per);
void gf_UpdateCharacterHealthBar (int lp_sourceUser, playergroup lp_pg);
void gf_UpdateCharacterStaminaBar (int lp_sourceUser, playergroup lp_pg);
bool gf_IsPanelofDeviceVisible (int lp_player, unit lp_deivce);
bool gf_IsDeviceHUDVisible (int lp_player);
void gf_SetTargetDeviceofDevicePanel (int lp_player, unit lp_device);
void gf_ShowHideDevicePanel (int lp_player, bool lp_showhide, unit lp_device);
int gf_GetDeviceHUDDialog ();
unit gf_GetCurrentTargetDeviceofDeviceHUD (int lp_player);
playergroup gf_GetUsersUsingDeviceHUD (unit lp_device);
void gf_ShowHidePanelofAberrationPanel (int lp_player, bool lp_showhide);
int gf_GetAberrationCageProgressBar ();
void gf_ShowHidePanelofArchive (int lp_player, bool lp_showhide);
void gf_UpdateArchivePanel ();
void gf_UpdateArchiveRecordingNumberLabel ();
void gf_UpdateArchiveTransmitButton ();
int gf_GetArchivePanelElement (int lp_element);
int gf_GetArchiveRecordIndexFromListItem (int lp_itemIndex);
int gf_GetArchiveListItemFromRecordIndex (int lp_recordIndex);
int gf_GetArchiveListBox ();
void gf_ShowHidePanelofIncinerator (int lp_player, bool lp_showhide);
void gf_UpdatePanelofIncinerator ();
int gf_GetIncineratorButton ();
void gf_ShowHidePanelofMedicalBot (int lp_player, bool lp_showhide);
void gf_UpdatePanelofMedicalBot ();
int gf_GetMedicalBotProgressBar ();
void gf_ShowHidePanelofMonitor (int lp_player, bool lp_showhide, unit lp_device);
void gf_UpdateTrackingDialogOfSecurityMonitorForPlayerGroup (unit lp_monitor, playergroup lp_pg);
void gf_UpdateTrackingDialogOfSecurityMonitor (unit lp_monitor);
void gf_UpdatePanelofMonitor (unit lp_device);
int gf_TargetUserOfMonitorTrakingDialog (int lp_diaolg);
int gf_MonitorTrackingDialog (int lp_user);
int gf_GetSelectedCellofMonitor (unit lp_monitor);
int gf_GetCellIndexbySelectedItemofMonitorPulldown (int lp_player, int lp_pulldown);
int gf_GetPulldownofMonitorbyMonitorIndex (int lp_monitorIndex);
int gf_GetPulldownItemIndexforMonitoringCell (unit lp_monitor);
void gf_ShowHidePanelofPowerGeneratorController (int lp_player, bool lp_showhide);
void gf_UpdatePanelofPowerController ();
int gf_GetPowerControllerButton ();
void gf_ShowHidePanelofRDT (int lp_player, bool lp_showhide);
void gf_UpdatePanelofRDT ();
int gf_GetRDTButton ();
int gf_GetRDTProgressBar ();
void gf_ShowHidePanelofEmergencyControlConsole (bool lp_showhide, int lp_player);
void gf_UpdatePanelofEmergencyControlConsole ();
bool gf_IsSecurityButton (int lp__item);
int gf_GetCellIndexbyEmergencyControlConsolebutton (int lp_item);
void gf_ShowHidePanelofSateliteController (int lp_player, bool lp_showhide);
void gf_UpdatePanelofSateliteController ();
int gf_GetSateliteControllerButton ();
int gf_GetGateUnlockProcessProgressBar ();
int gf_GetMostVotedUser ();
int gf_GetVoteTargetUser (int lp_dialogItem);
bool gf_HasVoted (int lp_user);
void gf_InitializeVoteDialog (playergroup lp_pg);
void gf_VoteforTargetUser (int lp_user, int lp_targetUser);
void gf_CustomMinimapTickActions ();
void gf_SetTrackingModeofCustomMinimap (int lp_user, bool lp_isTrackingMode);
void gf_AllowDisallowControlMinimap (int lp_user, bool lp_allowdisallow);
void gf_ShowHideCustomMinimap (int lp_player, bool lp_showhide);
void gf_CreatePointMarkerToMinimap (point lp_point, color lp_color, playergroup lp_pg, fixed lp_duration);
playergroup gf_GetCustomMinimapTrackingModeUsers ();
int gf_GetCustomMinimapTrackingIconImage (int lp_trackingTargetUser);
bool gf_CanControlMinimap (int lp_user);
int gf_MinimapXPositionbyWorldPoint (point lp_point);
int gf_MinimapYPositionbyWorldPoint (point lp_point);
void gf_UpdateDialogItemPositionInCustomMimimap (int lp_dialogItem, point lp_point, playergroup lp_pg);
void gf_DoDontUpdateCustomMinimap (bool lp_dodonot);
void gf_ShowHideUtilityHUD (int lp_user, bool lp_showhide, int lp_panelType);
int gf_GetUtilityPanel (int lp_panelType);
int gf_GetUtilityPanelTypeofSelectionPanelMenuItem (int lp_item);
int gf_GetHelpTextPanelListBox ();
int gf_GetHelpTextPanelListBoxItemIndex (int lp_helpPanelItemType, int lp_deviceTypeOnlyForDevice);
text gf_GetHelpTextPanelTextbyListBoxItemIndex (int lp_index);
text gf_CreateDeviceHelpText (int lp_deviceType);
void gf_ResetBlacklistSelectionInfo ();
void gf_UpdateBlacklistTargetUserListBox (int lp_user, int lp_itemIndex);
void gf_UpdateBlacklistRegisteredUserListBox (int lp_user);
int gf_GetBlacklistTargetUserInCurrentUserList (int lp_user, int lp_itemIndex);
int gf_GetBlacklistBankKeyIndexFromListBox (int lp_user, int lp_listBox, int lp_itemIndex);
int gf_GetBlacklistPanelElement (int lp_element);
int gf_GetCurrentBlacklistTargetUserListType (int lp_user);
int gf_GetCheckBoxOwnerofChatSettingsPanel (int lp_checkBox);
void gf_CustomizedShowHideMouseCursor (int lp_player, bool lp_showhide);
void gf_DisplayMessageforChatArea (text lp_text, playergroup lp_playergroup, soundlink lp_soundlink);
void gf_DisplayTransmissionStyleMessage (int lp_user, text lp_text, playergroup lp_playerGroup, int lp_securityLevel);
void gf_DisplayObserverStyleMessage (int lp_player, text lp_text, playergroup lp_playerGroup);
void gf_DisplayDataTransferStyleMessage (unit lp_device, text lp_text, playergroup lp_playerGroup, soundlink lp_soundLink);
void gf_DisplayAlertMessage (text lp_text, playergroup lp_target);
void gf_DisplayInformationMessage (text lp_text, playergroup lp_playerGroup);
void gf_DisplayTutorialMessage (text lp_text, playergroup lp_pg);
void gf_DisplayDirectiveMessageforPlayer (text lp_text, int lp_player);
void gf_DisplayDirectiveMessageforPlayerGroup (text lp_text, playergroup lp_playerGroup);
void gf_DisplayDirectiveMessageforPlayerwithObs (text lp_text, int lp_player);
void gf_ClearDirectiveMessageforPlayer (int lp_player);
void gf_ClearDirectiveMessageforPlayerwithObs (int lp_player);
void gf_ClearDirectiveMessageforPlayerGroup (playergroup lp_playerGroup);
int gf_MakeDirtyInteger (int lp_integer);
int gf_CleanDirtyInteger (int lp_dirtyInteger);
unit gf_LeastPathCostUnit (unit lp_sourceUnit, unitgroup lp_targetUnitGroup, bool lp_includeBuildings);
string gf_UnitInfoInstancebyUnitType (string lp_unitType);
unit gf_TraceLineHitUnit (int lp_player);
point gf_TraceLineHitPoint (int lp_player);
void gf_CastTraceline (int lp_user, point lp_sourcePoint, fixed lp_pitch, fixed lp_yaw, fixed lp_zOffset, unitfilter lp_unitFilter, fixed lp_range);
bool gf_IsAuthorizedUser (int lp_player);
string gf_GenerateDummyHandle (int lp_user);
string gf_HandleofCreator ();
void gf_DisplayUserList (playergroup lp_users);
void gf_CustomDebugMessage (text lp_tEXT);
void gf_Assert (int lp_exceptionType, string lp_from);
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitializationforGame;
trigger gt_DelayedInitializationforChangelingSelection;
trigger gt_RandomChangelingPlayerSelection;
trigger gt_ApplyForChangeling;
trigger gt_VoteUserToKick;
trigger gt_SetGameStatetoMainGame;
trigger gt_StartExplosionCount;
trigger gt_EndExplosionCount;
trigger gt_Entertheescapetrain;
trigger gt_CreateExplosionEffect;
trigger gt_SetGameStatetoInEscapeTrain;
trigger gt_StartFoundChangelingInEscapeTrainQ;
trigger gt_MarineVictoryQ;
trigger gt_ChangelingMainGameVicoryQ;
trigger gt_InitializationforUser;
trigger gt_MainGameSettingsforUser;
trigger gt_UserLeavesGame;
trigger gt_KickAcountBlockedUsers;
trigger gt_ChangeObserverTarget;
trigger gt_ShowHideUtilityPanelforObserver;
trigger gt_HideUtilityPanelforObserver;
trigger gt_InitializationforCamera;
trigger gt_MainGameSettingsforCamera;
trigger gt_CameraTrackingLoop;
trigger gt_InitializationforBank;
trigger gt_InitializationforLegacyScore;
trigger gt_ShowLegacyScoreInfoofTargetUser;
trigger gt_ResetAssistUser;
trigger gt_SetLastUserDamagingChangeling;
trigger gt_InitializationforBlacklist;
trigger gt_UpdateLastPlayersinBlacklist;
trigger gt_InitializationforChat;
trigger gt_ChatMessageTyped;
trigger gt_ShowListofUserHandle;
trigger gt_AntiMassEventCalling;
trigger gt_ResetEventCallingCounter;
trigger gt_InitializationforCharacter;
trigger gt_MainGameSettingforCharacter;
trigger gt_AddRemovePowerStateOffBehaviorForCharacter;
trigger gt_MainGameSettingsforChangeling;
trigger gt_CreateDisguiseEffectforChangeling;
trigger gt_ChangelingTimerExpired;
trigger gt_MainGameSettingforBehavior;
trigger gt_UpdateBehavior;
trigger gt_ShowHideUtilityPanel;
trigger gt_HideUtilityPanelforGamePlayer;
trigger gt_SearchandControlDeviceDirectly;
trigger gt_SearchandControlDeviceDirectly_by_E;
trigger gt_EndControllingDevice;
trigger gt_ForcedEndControllingDevicePowerStateChanged;
trigger gt_ForcedEndControllingDeviceMainGameStateChanged;
trigger gt_OpenCloseaGate;
trigger gt_OpenCloseaGate_by_E;
trigger gt_CancelUnlockingGate;
trigger gt_ForcedCancelationofUnlockingGatePowerOff;
trigger gt_StartFiring;
trigger gt_StopFiring;
trigger gt_MoveKeyPressed;
trigger gt_MoveKeyReleased;
trigger gt_RunButtonPressed;
trigger gt_RunButtonReleased;
trigger gt_MarineDead;
trigger gt_ChangelingDead;
trigger gt_VoteforSuspiciousMarine;
trigger gt_ToggleChangelingDisguiseStateButtonPressed;
trigger gt_DisguiseCompleted;
trigger gt_Eat;
trigger gt_EatSuccessed;
trigger gt_GettingEaten;
trigger gt_InitializationforLab;
trigger gt_MainGameSettingforLab;
trigger gt_InitializationforCell;
trigger gt_UpdatePowerStateforGates;
trigger gt_SetGateStatetoStable;
trigger gt_InitializationforDevices;
trigger gt_MainGameSettingforDevice;
trigger gt_UpdateDeviceState;
trigger gt_InitializationforAberrationCage;
trigger gt_MainGameSettingsforAberrationCage;
trigger gt_BeaconMessageLabHoldingPen;
trigger gt_AIforAberrations;
trigger gt_InitializationforArchive;
trigger gt_BeaconMessageArchive;
trigger gt_UnpoweredArchiveConsole;
trigger gt_TransmitRecord;
trigger gt_InitializationforIncinerator;
trigger gt_IncineratorTimerExpired;
trigger gt_PoweredUnpoweredIncinerator;
trigger gt_RunIncinerator;
trigger gt_BeaconMessageIncinerator;
trigger gt_NotifyIncineratorEndOperation;
trigger gt_InitializationforAutomaticMedicalBot;
trigger gt_BreaconMessageAutomaticMedicalBot;
trigger gt_InitializationforMonitor;
trigger gt_BeaconMessageMonitor;
trigger gt_MonitorUnpowered;
trigger gt_TransmitCharacterPosition;
trigger gt_StartChangingTargetofMonitor;
trigger gt_MonitorTimerExpired;
trigger gt_UpdateMonitorWhenAccessLevelChanged;
trigger gt_InitializationforPowerGeneratorController;
trigger gt_BeaconMessagePowerController;
trigger gt_PowerControllerButtonClicked;
trigger gt_PowerControllerTimerExpired;
trigger gt_InitializationforRadiationDiagnosticTester;
trigger gt_MainGameSettingforRDT;
trigger gt_BeaconMessageRadiationDiagnosticTester;
trigger gt_StartScanningTargetUser;
trigger gt_PauseUnpauseRDTTimer;
trigger gt_UpdateRDTState;
trigger gt_InitializationforSateliteController;
trigger gt_MainGameSettingforSatelite;
trigger gt_BeaconMessageSCC;
trigger gt_SateliteControllerUnpowered;
trigger gt_OrderSatelitetoStartTracking;
trigger gt_SetSateliteControllerStatetoPrepared;
trigger gt_InitializationforEmergencyControlConsole;
trigger gt_BeaconMessageIndexofTargetCellof;
trigger gt_EmergencyControlConsoleUnpowered;
trigger gt_EmergencyControlConsoleButtonPressed;
trigger gt_EmergencyControlConsoleTimerExpired;
trigger gt_InitializationforHUD;
trigger gt_MainGameSettingsforHUD;
trigger gt_InitializationforPanelofChangelingSelection;
trigger gt_InitializationforCharacterHUD;
trigger gt_MainGameSettingsforCharacterHUD;
trigger gt_UpdateChangelingCharacterHUD;
trigger gt_CharacterPropertyChanged;
trigger gt_InitializationforDeviceHUD;
trigger gt_InitializationforPanelofAberrationCage;
trigger gt_InitializationforPanelofArchive;
trigger gt_UpdatePanelofArchive;
trigger gt_UpdateArchiveButton;
trigger gt_InitializationforPanelofIncinerator;
trigger gt_InitializationforPanelofMedicalBot;
trigger gt_InitializationforPanelofMonitor;
trigger gt_UpdateTrackingDialogOfSecurityMonitor;
trigger gt_UpdateTrackingDialogForChangelingCloak;
trigger gt_MainGameSettingsForPanelofMonitor;
trigger gt_InitializationforPanelofPowerGeneratorController;
trigger gt_InitializationforPanelofRDT;
trigger gt_InitializationforPanelofEmergencyControlConsole;
trigger gt_InitializationforPanelofSateliteController;
trigger gt_InitializationforPanelofGatUnlockProcess;
trigger gt_InitializationforMinimap;
trigger gt_MainGameSettingforMinimap;
trigger gt_LoopforUpdateMinimap;
trigger gt_MinimapKeyPressed;
trigger gt_HideIconImageofMInimap;
trigger gt_InitializationforUtilityHUD;
trigger gt_InitializationforUtilitySelectionPanel;
trigger gt_SelectUtilityPanel;
trigger gt_InitializationforPanelofHelpText;
trigger gt_ShowHelpText;
trigger gt_InitializationforPanelofBlacklist;
trigger gt_UpdateBlacklistTargetUserListBox;
trigger gt_UpdateHandleEditBoxInBlacklistPanel;
trigger gt_AddUserToBlacklist;
trigger gt_RemoveUserFromBlacklist;
trigger gt_InitializationforPanelofChatSettings;
trigger gt_ToggleChatBlockState;
trigger gt_InitializationforUI;
trigger gt_TextCrawlforEnteringCell;
trigger gt_InitializationforTutorialMessage;
trigger gt_InitializationTracline;
//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------
string ge_PlayerCharacterState_Ident (int lp_val) {
         if (lp_val == ge_PlayerCharacterState_None) { return "None"; }
    else if (lp_val == ge_PlayerCharacterState_Idle) { return "Idle"; }
    else if (lp_val == ge_PlayerCharacterState_Move) { return "Move"; }
    else if (lp_val == ge_PlayerCharacterState_Firing) { return "Firing"; }
    else if (lp_val == ge_PlayerCharacterState_UnlockingGate) { return "UnlockingGate"; }
    else if (lp_val == ge_PlayerCharacterState_MorphingChangeling) { return "MorphingChangeling"; }
    else if (lp_val == ge_PlayerCharacterState_EatingChangeling) { return "EatingChangeling"; }
    else if (lp_val == ge_PlayerCharacterState_ControlingDevice) { return "ControlingDevice"; }
    else if (lp_val == ge_PlayerCharacterState_WatingforUsersinTrain) { return "WatingforUsersinTrain"; }
    else if (lp_val == ge_PlayerCharacterState_UsingUtilityHUD) { return "UsingUtilityHUD"; }
    else if (lp_val == ge_PlayerCharacterState_Voting) { return "Voting"; }
    else if (lp_val == ge_PlayerCharacterState_Dead) { return "Dead"; }
    return null;
}
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_GameState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_gameState;
}
timer gf_GameTimer () {
    // Automatic Variable Declarations
    // Implementation
    return gv_gameTimer;
}
int gf_GameTimerWindow () {
    // Automatic Variable Declarations
    // Implementation
    return gv_gameTimerWindow;
}
point gf_ResponePointbyIndex (int lp_index) {
    // Variable Declarations
    point lv__p;
    // Automatic Variable Declarations
    int auto4C5BA97E_val;
    // Variable Initialization
    // Implementation
    auto4C5BA97E_val = lp_index;
    if (auto4C5BA97E_val == 0) {
        lv__p = PointFromId(1183);
    }
    else if (auto4C5BA97E_val == 1) {
        lv__p = PointFromId(378);
    }
    else if (auto4C5BA97E_val == 2) {
        lv__p = PointFromId(379);
    }
    else if (auto4C5BA97E_val == 3) {
        lv__p = PointFromId(380);
    }
    else if (auto4C5BA97E_val == 4) {
        lv__p = PointFromId(381);
    }
    else if (auto4C5BA97E_val == 5) {
        lv__p = PointFromId(382);
    }
    else if (auto4C5BA97E_val == 6) {
        lv__p = PointFromId(383);
    }
    else if (auto4C5BA97E_val == 7) {
        lv__p = PointFromId(384);
    }
    else if (auto4C5BA97E_val == 8) {
        lv__p = PointFromId(385);
    }
    else if (auto4C5BA97E_val == 9) {
        lv__p = PointFromId(1181);
    }
    else if (auto4C5BA97E_val == 10) {
        lv__p = PointFromId(1182);
    }
    else {
    }
    return lv__p;
}
int gf_KickVoteCount (int lp_user) {
    // Variable Declarations
    int lv__i;
    int lv__result;
    // Automatic Variable Declarations
    playergroup autoD7392F1F_g;
    // Variable Initialization
    // Implementation
    if (gf_IsUser(lp_user)) {
        autoD7392F1F_g = gf_StartingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoD7392F1F_g, lv__i);
            if (lv__i < 0) { break; }
            if ((PlayerGroupHasPlayer(gv_changelingSelectionInfo.lv_kickVoteTable[gf_GetUserIndex(lv__i)], lp_user) == true)) {
                lv__result = (lv__result+1);
            }
        }
    }
    return lv__result;
}
int gf_MainGameSubState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_mainGameState;
}
void gf_SendMainGameStateChangedEvent () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent("MainGameStateChanged");
}
void gf_MainGameStateChanged (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent("MainGameStateChanged");
}
bool gf_IsUnitInEscapeTrain (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_unit != null) && (libNtve_gf_UnitInRegion(lp_unit, gv_eSCAPE_TRAIN_AREA) == true)) {
        return true;
    }
    else {
        return false;
    }
}
playergroup gf_GetUsersInEscapeTrain () {
    // Variable Declarations
    int lv__i;
    playergroup lv__pg;
    // Automatic Variable Declarations
    playergroup autoB9757A1A_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    autoB9757A1A_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoB9757A1A_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_IsUnitInEscapeTrain(gf_CharacterUnit(lv__i)) == true)) {
            PlayerGroupAdd(lv__pg, lv__i);
        }
    }
    return lv__pg;
}
void gf_MoveUnitintoEscapeTrain (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_unit != null)) {
        UnitSetPosition(lp_unit, RegionRandomPoint(gv_eSCAPE_TRAIN_AREA_RANDPOINT), false);
        UnitSetFacing(lp_unit, AngleBetweenPoints(RegionGetCenter(gv_eSCAPE_TRAIN_AREA_RANDPOINT), UnitGetPosition(lp_unit)), 0.0);
    }
}
void gf_SetGameStatetoGameEnd (int lp_gameEndType) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoE77E331A_g;
    // Variable Initialization
    // Implementation
    gf_SaveLegacyScorebyGameEndType(lp_gameEndType);
    autoE77E331A_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoE77E331A_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_None);
        gf_LockCustomFullScreenDialog(lv__i, true);
        gf_ShowHideCustomMinimap(lv__i, false);
        gf_ShowHideUtilityHUD(lv__i, false, ge_UtilityPanelType_None);
        CameraLockInput(lv__i, true);
    }
    TimerPause(gv_gameTimer, true);
    TimerWindowShow(gv_gameTimerWindow, PlayerGroupAll(), false);
    gv_gameState = ge_GameState_GameEnd;
}
trigger auto_gf_GameEndChangelingHasBeenKilled_Trigger = null;
int auto_gf_GameEndChangelingHasBeenKilled_lp_changelingKiller;
void gf_GameEndChangelingHasBeenKilled (int lp_changelingKiller) {
    auto_gf_GameEndChangelingHasBeenKilled_lp_changelingKiller = lp_changelingKiller;
    if (auto_gf_GameEndChangelingHasBeenKilled_Trigger == null) {
        auto_gf_GameEndChangelingHasBeenKilled_Trigger = TriggerCreate("auto_gf_GameEndChangelingHasBeenKilled_TriggerFunc");
    }
    TriggerExecute(auto_gf_GameEndChangelingHasBeenKilled_Trigger, false, false);
}
bool auto_gf_GameEndChangelingHasBeenKilled_TriggerFunc (bool testConds, bool runActions) {
    int lp_changelingKiller = auto_gf_GameEndChangelingHasBeenKilled_lp_changelingKiller;
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoB29E260E_g;
    // Variable Initialization
    // Implementation
    if ((gf_CharacterRole(lp_changelingKiller) == ge_CharacterRole_Marine)) {
        TextExpressionSetToken("Param/Expression/E908EB7E", "A", gf_RecordedUserNamewithColor(libNtve_gf_KillingPlayer()));
        gf_DisplayInformationMessage(TextExpressionAssemble("Param/Expression/E908EB7E"), PlayerGroupAll());
        if (gf_IsUserAlive(lp_changelingKiller)) {
            autoB29E260E_g = gf_AliveMarineUsers();
            lv__i = -1;
            while (true) {
                lv__i = PlayerGroupNextPlayer(autoB29E260E_g, lv__i);
                if (lv__i < 0) { break; }
                if ((lv__i != lp_changelingKiller)) {
                    gf_SetCameraTrackingTargetUser(lv__i, lp_changelingKiller);
                }
            }
        }
        gf_SetKillingChangelingUser(lp_changelingKiller);
    }
    else {
        gf_DisplayInformationMessage(StringExternal("Param/Value/3BBF9068"), PlayerGroupAll());
    }
    UnitPauseAll(true);
    gf_SetGameStatetoGameEnd(ge_GameEndType_MarineWin);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_MarineVictoryQ, true, false);
    return true;
}
trigger auto_gf_GameEndNoChangelingIsinEscapeTrain_Trigger = null;
void gf_GameEndNoChangelingIsinEscapeTrain () {
    if (auto_gf_GameEndNoChangelingIsinEscapeTrain_Trigger == null) {
        auto_gf_GameEndNoChangelingIsinEscapeTrain_Trigger = TriggerCreate("auto_gf_GameEndNoChangelingIsinEscapeTrain_TriggerFunc");
    }
    TriggerExecute(auto_gf_GameEndNoChangelingIsinEscapeTrain_Trigger, false, false);
}
bool auto_gf_GameEndNoChangelingIsinEscapeTrain_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoD7B45F86_g;
    // Variable Initialization
    // Implementation
    gf_SetGameStatetoGameEnd(ge_GameEndType_MarineWin);
    autoD7B45F86_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoD7B45F86_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_None);
        gf_ShowHideCustomMinimap(lv__i, false);
    }
    TriggerExecute(gt_MarineVictoryQ, true, false);
    return true;
}
trigger auto_gf_GameEndChangelingKilledAllMarines_Trigger = null;
void gf_GameEndChangelingKilledAllMarines () {
    if (auto_gf_GameEndChangelingKilledAllMarines_Trigger == null) {
        auto_gf_GameEndChangelingKilledAllMarines_Trigger = TriggerCreate("auto_gf_GameEndChangelingKilledAllMarines_TriggerFunc");
    }
    TriggerExecute(auto_gf_GameEndChangelingKilledAllMarines_Trigger, false, false);
}
bool auto_gf_GameEndChangelingKilledAllMarines_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitPauseAll(true);
    gf_SetGameStatetoGameEnd(ge_GameEndType_ChangelingWin);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_ChangelingMainGameVicoryQ, true, false);
    return true;
}
trigger auto_gf_GameEndDrawbyExplosion_Trigger = null;
void gf_GameEndDrawbyExplosion () {
    if (auto_gf_GameEndDrawbyExplosion_Trigger == null) {
        auto_gf_GameEndDrawbyExplosion_Trigger = TriggerCreate("auto_gf_GameEndDrawbyExplosion_TriggerFunc");
    }
    TriggerExecute(auto_gf_GameEndDrawbyExplosion_Trigger, false, false);
}
bool auto_gf_GameEndDrawbyExplosion_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoB6C33E19_g;
    // Variable Initialization
    // Implementation
    UnitPauseAll(true);
    gf_SetGameStatetoGameEnd(ge_GameEndType_Draw);
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(2.0, c_timeGame);
    gf_DisplayAlertMessage(StringExternal("Param/Value/53A13C7C"), PlayerGroupAll());
    Wait(5.0, c_timeGame);
    autoB6C33E19_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoB6C33E19_g, lv__i);
        if (lv__i < 0) { break; }
        gf_CustomizedShowHideMouseCursor(lv__i, true);
        Wait(0.1, c_timeGame);
        GameOver(lv__i, c_gameOverTie, true, true);
    }
    return true;
}
trigger auto_gf_GameEndChangelingSurvivedInEscapeTrain_Trigger = null;
void gf_GameEndChangelingSurvivedInEscapeTrain () {
    if (auto_gf_GameEndChangelingSurvivedInEscapeTrain_Trigger == null) {
        auto_gf_GameEndChangelingSurvivedInEscapeTrain_Trigger = TriggerCreate("auto_gf_GameEndChangelingSurvivedInEscapeTrain_TriggerFunc");
    }
    TriggerExecute(auto_gf_GameEndChangelingSurvivedInEscapeTrain_Trigger, false, false);
}
bool auto_gf_GameEndChangelingSurvivedInEscapeTrain_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__t;
    // Automatic Variable Declarations
    playergroup auto7106AE54_g;
    playergroup auto744A65C4_g;
    playergroup autoCA3161EF_g;
    // Variable Initialization
    // Implementation
    gv_inEscapeTrainState = ge_InEcapeTrainState_ChangelingSurvived;
    SoundStopAllTriggerSounds(false);
    GameSetLighting(gv_eNVIRONMENT_LIGHT_BLACKOUT, 1.0);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Amb_ElectricArc_PowerConduit2", -1), PlayerGroupAll(), 300.0, 0.0);
    GameSetLighting(gv_eNVIRONMENT_LIGHT_NORMAL, 1.0);
    Wait(1.0, c_timeGame);
    GameSetLighting(gv_eNVIRONMENT_LIGHT_BLACKOUT, 1.0);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Amb_ElectricArc_PowerConduit2", -1), PlayerGroupAll(), 300.0, 0.0);
    GameSetLighting(gv_eNVIRONMENT_LIGHT_NORMAL, 1.0);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Amb_ElectricArc_PowerConduit2", -1), PlayerGroupAll(), 300.0, 0.0);
    GameSetLighting(gv_eNVIRONMENT_LIGHT_BLACKOUT, 1.0);
    SoundPlay(SoundLink("Amb_ElectricArc_PowerConduit2", -1), PlayerGroupAll(), 300.0, 0.0);
    Wait(0.3, c_timeGame);
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    gf_SetGameStatetoGameEnd(ge_GameEndType_ChangelingWin);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, false);
    auto7106AE54_g = gf_AliveMarineUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto7106AE54_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_GetChangelingPlayer() != lv__i)) {
            Wait(RandomFixed(0.2, 1.0), c_timeGame);
            libNtve_gf_CreateActorAtPoint("BloodSplats", UnitGetPosition(gf_CharacterUnit(lv__i)));
            UnitKill(gf_CharacterUnit(lv__i));
        }
    }
    UnitSetPosition(gf_CharacterUnit(gf_GetChangelingPlayer()), PointFromId(415), false);
    UnitSetFacing(gf_CharacterUnit(gf_GetChangelingPlayer()), PointGetFacing(PointFromId(415)), 0.0);
    auto744A65C4_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto744A65C4_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCameraModetoFocusingUnit(lv__i, gf_CharacterUnit(gf_GetChangelingPlayer()), CameraInfoFromId(1240122871), 0.0);
    }
    Wait(5.0, c_timeGame);
    SoundStopAllTriggerSounds(false);
    SoundPlay(SoundLink("Lab_Intro_Doors_Close", -1), PlayerGroupAll(), 100.0, 0.0);
    CutsceneFade(true, 0.5, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    GameSetLighting(gv_eNVIRONMENT_LIGHT_NORMAL, 0.5);
    Wait(4.0, c_timeGame);
    gf_SetChangelingDisguiseState(ge_DisguiseState_Exposed);
    Wait(6.0, c_timeGame);
    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    SoundPlay(SoundLink("Lab_Intro_Doors_Close", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    autoCA3161EF_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoCA3161EF_g, lv__i);
        if (lv__i < 0) { break; }
        if (gf_IsChangelingUser(lv__i)) {
            GameOver(lv__i, c_gameOverVictory, true, true);
        }
        else {
            GameOver(lv__i, c_gameOverDefeat, true, true);
        }
    }
    return true;
}
bool gf_IsUser (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_player >= gv_uSER_FIRST) && (lp_player <= gv_uSER_LAST))) {
        return true;
    }
    return false;
}
text gf_RecordedUserName (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_userInfoArray[lv__userIndex].lv_recordedName;
    }
    else {
        return null;
    }
}
text gf_RecordedUserNamewithColor (int lp_player) {
    // Variable Declarations
    text lv__text;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    lv__text = TextWithColor(gf_RecordedUserName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)));
    return lv__text;
}
string gf_RecordedHandleofUser (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_userInfoArray[lv__userIndex].lv_recordedHandle;
    }
    else {
        return null;
    }
}
int gf_LastNumberofHandle (int lp_user) {
    // Variable Declarations
    string lv__string;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__string = "";
    // Implementation
    if (gf_IsUser(lp_user)) {
        lv__string = gf_RecordedHandleofUser(lp_user);
        lv__string = StringReplaceWord(lv__string, "-", " ", c_stringReplaceAll, c_stringCase);
        lv__string = StringWord(lv__string, 4);
        return StringToInt(lv__string);
    }
    else {
        return 0;
    }
}
int gf_GetUserIndex (int lp_user) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = (lp_user-gv_uSER_FIRST);
    // Implementation
    if (((lv__index >= 0) && (lv__index <= gv_uSER_INDEX_MAX))) {
        return lv__index;
    }
    else {
        return -1;
    }
}
playergroup gf_StartingUsers () {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupCopy(gv_startingUsers);
}
playergroup gf_AllPlayingUsers () {
    // Variable Declarations
    int lv__i;
    playergroup lv__pg;
    // Automatic Variable Declarations
    const int auto4D19E374_ae = gv_uSER_LAST;
    const int auto4D19E374_ai = 1;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    lv__i = gv_uSER_FIRST;
    for ( ; ( (auto4D19E374_ai >= 0 && lv__i <= auto4D19E374_ae) || (auto4D19E374_ai < 0 && lv__i >= auto4D19E374_ae) ) ; lv__i += auto4D19E374_ai ) {
        if ((PlayerStatus(lv__i) == c_playerStatusActive)) {
            PlayerGroupAdd(lv__pg, lv__i);
        }
    }
    return lv__pg;
}
int gf_UserPlayMode (int lp_player) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_player);
    // Implementation
    if ((lv__index != -1)) {
        return gv_userInfoArray[lv__index].lv_mode;
    }
    else {
        return ge_PlayMode_None;
    }
}
int gf_PreviousAliveUser (int lp_user, int lp_playMode) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__i = (lp_user-1);
    // Implementation
    if (gf_IsUser(lp_user)) {
        while (true) {
            if ((gf_IsUser(lv__i) == false)) {
                lv__i = gv_uSER_LAST;
            }
            if (gf_IsUserAlive(lv__i)) {
                return lv__i;
            }
            else if ((lp_user == lv__i)) {
                break;
            }
            lv__i = (lv__i-1);
        }
        return c_playerAny;
    }
    else {
        return gf_PreviousAliveUser(gv_uSER_FIRST, lp_playMode);
    }
}
int gf_NextAliveUser (int lp_user, int lp_playMode) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__i = (lp_user+1);
    // Implementation
    if (gf_IsUser(lp_user)) {
        while (true) {
            if ((gf_IsUser(lv__i) == false)) {
                lv__i = gv_uSER_FIRST;
            }
            if (gf_IsUserAlive(lv__i)) {
                return lv__i;
            }
            else if ((lp_user == lv__i)) {
                break;
            }
            lv__i = (lv__i+1);
        }
        return c_playerAny;
    }
    else {
        return gf_NextAliveUser(gv_uSER_LAST, lp_playMode);
    }
}
void gf_KickUser (int lp_user, text lp_reason) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_user)) {
        GameOver(lp_user, c_gameOverDefeat, false, false);
        if ((lp_reason != null)) {
            TextExpressionSetToken("Param/Expression/8FC6A4DC", "A", gf_RecordedUserNamewithColor(lp_user));
            TextExpressionSetToken("Param/Expression/8FC6A4DC", "B", lp_reason);
            gf_DisplayAlertMessage(TextExpressionAssemble("Param/Expression/8FC6A4DC"), PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/84842B90", "A", gf_RecordedUserNamewithColor(lp_user));
            gf_DisplayAlertMessage(TextExpressionAssemble("Param/Expression/84842B90"), PlayerGroupAll());
        }
    }
}
int gf_GetObserverState (int lp_observer) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_observer);
    // Implementation
    if ((lv__userIndex != -1) && (gf_UserPlayMode(lp_observer) == ge_PlayMode_Observer)) {
        return gv_observerInfoArray[lv__userIndex].lv_state;
    }
    else {
        return ge_ObserverState_None;
    }
}
playergroup gf_GetUserwithObservers (int lp_player) {
    // Variable Declarations
    int lv__i;
    playergroup lv__pg;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__pg = gf_GetObservers(lp_player);
    // Implementation
    if (gf_IsUser(lp_player)) {
        PlayerGroupAdd(lv__pg, lp_player);
    }
    return lv__pg;
}
playergroup gf_GetUser (int lp_player) {
    // Variable Declarations
    int lv__i;
    playergroup lv__pg;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (gf_IsUser(lp_player)) {
        PlayerGroupAdd(lv__pg, lp_player);
    }
    return lv__pg;
}
playergroup gf_GetObservers (int lp_targetPlayer) {
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    int lv__userIndex;
    // Automatic Variable Declarations
    playergroup auto19DF3C39_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    if (gf_IsUser(lp_targetPlayer)) {
        auto19DF3C39_g = gf_AllPlayingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto19DF3C39_g, lv__i);
            if (lv__i < 0) { break; }
            if ((gf_GetObserverTargetUser(lv__i) == lp_targetPlayer)) {
                PlayerGroupAdd(lv__pg, lv__i);
            }
        }
    }
    return lv__pg;
}
playergroup gf_GetAllObservers () {
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto63FDA901_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    auto63FDA901_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto63FDA901_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_UserPlayMode(lv__i) == ge_PlayMode_Observer)) {
            PlayerGroupAdd(lv__pg, lv__i);
        }
    }
    return lv__pg;
}
int gf_GetObserverTargetUser (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((gf_UserPlayMode(lp_user) == ge_PlayMode_Observer) && (lv__userIndex != -1)) {
        return gv_observerInfoArray[lv__userIndex].lv_observingTarget;
    }
    else {
        return c_playerAny;
    }
}
void gf_SetUserModetoObserver (int lp_user, int lp_targetUser) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        gv_userInfoArray[lv__userIndex].lv_mode = ge_PlayMode_Observer;
        gv_observerInfoArray[lv__userIndex].lv_state = ge_ObserverState_Idle;
        gf_ShowHideUtilityHUD(lp_user, false, ge_UtilityPanelType_None);
        gf_SetObserverTargetUser(lp_user, lp_targetUser);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/21EC9F9B"));
    }
}
void gf_SetObserverTargetUser (int lp_user, int lp_targetUser) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && gf_IsUser(lp_targetUser) && (gf_UserPlayMode(lp_user) == ge_PlayMode_Observer)) {
        CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        gf_ClearDirectiveMessageforPlayer(lp_user);
        gf_CopyEnvironmentStatefromUsertoUser(lp_targetUser, lp_user);
        gf_CopyHUDStatefromUsertoUser(lp_targetUser, lp_user);
        gf_SetCameraTrackingTargetUser(lp_user, lp_targetUser);
        if ((gf_GetObserverTargetUser(lp_user) != c_playerAny)) {
            PlayerSetAlliance(gf_GetObserverTargetUser(lp_user), c_allianceIdVision, lp_user, false);
        }
        PlayerSetAlliance(lp_targetUser, c_allianceIdVision, lp_user, true);
        gv_observerInfoArray[lv__userIndex].lv_observingTarget = lp_targetUser;
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/1889B883"));
    }
}
bool gf_IsCancelationRequestedforCamera (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return (gv_cameraInfoArray[lv__userIndex].lv_state == ge_CameraState_CancelationRequested);
    }
    else {
        return false;
    }
}
int gf_CameraState (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_cameraInfoArray[lv__userIndex].lv_state;
    }
    else {
        return ge_CameraState_None;
    }
}
int gf_CameraMode (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_cameraInfoArray[lv__userIndex].lv_mode;
    }
    else {
        return ge_CameraMode_None;
    }
}
unit gf_CameraTargetUnit (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    int lv__cameraMode;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__cameraMode = gf_CameraMode(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && ((lv__cameraMode == ge_CameraMode_TPS) || (lv__cameraMode == ge_CameraMode_ControllingDevice) || (lv__cameraMode == ge_CameraMode_FocusingUnit))) {
        return gv_cameraInfoArray[lv__userIndex].lv_targetUnit;
    }
    else {
        return null;
    }
}
region gf_CameraTargetRegion (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    int lv__cameraMode;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__cameraMode = gf_CameraMode(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && (lv__cameraMode == ge_CameraMode_TopSideView)) {
        return gv_cameraInfoArray[lv__userIndex].lv_targetRegion;
    }
    else {
        return null;
    }
}
int gf_CameraTrackingTargetUser (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_cameraInfoArray[lv__userIndex].lv_trackingTarget;
    }
    else {
        return c_playerAny;
    }
}
playergroup gf_CameraTrackingUsers () {
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoBDD1B4DB_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    autoBDD1B4DB_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoBDD1B4DB_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_CameraTrackingTargetUser(lv__i) != c_playerAny)) {
            PlayerGroupAdd(lv__pg, lv__i);
        }
    }
    return lv__pg;
}
camerainfo gf_CameraSampleObject (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_cameraInfoArray[lv__userIndex].lv_sampleCameraObject;
    }
    else {
        return null;
    }
}
void gf_ApplyCameraObjectNotIncludeTargetandAnlgeofAttack (int lp_player, camerainfo lp_cameraObject, fixed lp_duration, fixed lp_initialiVelocity, fixed lp_decelerate) {
    // Automatic Variable Declarations
    // Implementation
    CameraSetValue(lp_player, c_cameraValueDistance, CameraInfoGetValue(lp_cameraObject, c_cameraValueDistance), lp_duration, lp_initialiVelocity, lp_decelerate);
    CameraSetValue(lp_player, c_cameraValueDepthOfField, CameraInfoGetValue(lp_cameraObject, c_cameraValueDepthOfField), lp_duration, lp_initialiVelocity, lp_decelerate);
    CameraSetValue(lp_player, c_cameraValueFalloffEnd, CameraInfoGetValue(lp_cameraObject, c_cameraValueFalloffEnd), lp_duration, lp_initialiVelocity, lp_decelerate);
    CameraSetValue(lp_player, c_cameraValueFalloffStart, CameraInfoGetValue(lp_cameraObject, c_cameraValueFalloffStart), lp_duration, lp_initialiVelocity, lp_decelerate);
    CameraSetValue(lp_player, c_cameraValueFarClip, CameraInfoGetValue(lp_cameraObject, c_cameraValueFarClip), lp_duration, lp_initialiVelocity, lp_decelerate);
    CameraSetValue(lp_player, c_cameraValueFieldOfView, CameraInfoGetValue(lp_cameraObject, c_cameraValueFieldOfView), lp_duration, lp_initialiVelocity, lp_decelerate);
    CameraSetValue(lp_player, c_cameraValueFocalDepth, CameraInfoGetValue(lp_cameraObject, c_cameraValueFocalDepth), lp_duration, lp_initialiVelocity, lp_decelerate);
    CameraSetValue(lp_player, c_cameraValueNearClip, CameraInfoGetValue(lp_cameraObject, c_cameraValueNearClip), lp_duration, lp_initialiVelocity, lp_decelerate);
    CameraSetValue(lp_player, c_cameraValueShadowClip, CameraInfoGetValue(lp_cameraObject, c_cameraValueShadowClip), lp_duration, lp_initialiVelocity, lp_decelerate);
}
trigger auto_gf_SetCameraModetoFocusingUnit_Trigger = null;
int auto_gf_SetCameraModetoFocusingUnit_lp_user;
unit auto_gf_SetCameraModetoFocusingUnit_lp_tagetUnit;
camerainfo auto_gf_SetCameraModetoFocusingUnit_lp_sampleCameraObject;
fixed auto_gf_SetCameraModetoFocusingUnit_lp_duration;
void gf_SetCameraModetoFocusingUnit (int lp_user, unit lp_tagetUnit, camerainfo lp_sampleCameraObject, fixed lp_duration) {
    auto_gf_SetCameraModetoFocusingUnit_lp_user = lp_user;
    auto_gf_SetCameraModetoFocusingUnit_lp_tagetUnit = lp_tagetUnit;
    auto_gf_SetCameraModetoFocusingUnit_lp_sampleCameraObject = lp_sampleCameraObject;
    auto_gf_SetCameraModetoFocusingUnit_lp_duration = lp_duration;
    if (auto_gf_SetCameraModetoFocusingUnit_Trigger == null) {
        auto_gf_SetCameraModetoFocusingUnit_Trigger = TriggerCreate("auto_gf_SetCameraModetoFocusingUnit_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetCameraModetoFocusingUnit_Trigger, false, false);
}
bool auto_gf_SetCameraModetoFocusingUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_user = auto_gf_SetCameraModetoFocusingUnit_lp_user;
    unit lp_tagetUnit = auto_gf_SetCameraModetoFocusingUnit_lp_tagetUnit;
    camerainfo lp_sampleCameraObject = auto_gf_SetCameraModetoFocusingUnit_lp_sampleCameraObject;
    fixed lp_duration = auto_gf_SetCameraModetoFocusingUnit_lp_duration;
    // Variable Declarations
    int lv__userIndex;
    point lv__p;
    fixed lv__timer;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && (lp_tagetUnit != null) && (lp_sampleCameraObject != null)) {
        gf_RequestCancelationandWaituntilAcceptedforCamera(lp_user);
        lv__p = libNtve_gf_PointFacingAngle(UnitGetPosition(lp_tagetUnit), UnitGetFacing(lp_tagetUnit));
        gv_cameraInfoArray[lv__userIndex].lv_mode = ge_CameraMode_FocusingUnit;
        gv_cameraInfoArray[lv__userIndex].lv_targetUnit = lp_tagetUnit;
        gv_cameraInfoArray[lv__userIndex].lv_sampleCameraObject = lp_sampleCameraObject;
        CameraSetBounds(PlayerGroupSingle(lp_user), RegionEntireMap(), true);
        CameraFollowUnitGroup(lp_user, CameraFollowUnitGroupGet(lp_user), false, false);
        CameraSetMouseRotates(lp_user, false);
        CameraForceMouseRelative(lp_user, false);
        CameraLockInput(lp_user, true);
        CameraPan(lp_user, PointWithOffsetPolar(lv__p, 2.0, PointGetFacing(lv__p)), 0.0, -1, 10.0, false);
        CameraApplyInfo(lp_user, lp_sampleCameraObject, lp_duration, -1, 10.0, false);
        CameraSetValue(lp_user, c_cameraValuePitch, CameraInfoGetValue(CameraInfoFromId(1450913119), c_cameraValuePitch), lp_duration, -1, 10.0);
        CameraSetValue(lp_user, c_cameraValueHeightOffset, CameraInfoGetValue(CameraInfoFromId(1450913119), c_cameraValueHeightOffset), lp_duration, -1, 10.0);
        CameraSetValue(lp_user, c_cameraValueYaw, (180.0 + UnitGetFacing(lp_tagetUnit)), lp_duration, -1, 10.0);
        gf_OnCameraModeChanged(lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/0211F5F7"));
        return true;
    }
    return true;
}
trigger auto_gf_SetCameraModetoTPS_Trigger = null;
int auto_gf_SetCameraModetoTPS_lp_user;
unit auto_gf_SetCameraModetoTPS_lp_targetUnit;
fixed auto_gf_SetCameraModetoTPS_lp_duration;
fixed auto_gf_SetCameraModetoTPS_lp_deceleration;
bool auto_gf_SetCameraModetoTPS_lp_keepPitchAndYaw;
void gf_SetCameraModetoTPS (int lp_user, unit lp_targetUnit, fixed lp_duration, fixed lp_deceleration, bool lp_keepPitchAndYaw) {
    auto_gf_SetCameraModetoTPS_lp_user = lp_user;
    auto_gf_SetCameraModetoTPS_lp_targetUnit = lp_targetUnit;
    auto_gf_SetCameraModetoTPS_lp_duration = lp_duration;
    auto_gf_SetCameraModetoTPS_lp_deceleration = lp_deceleration;
    auto_gf_SetCameraModetoTPS_lp_keepPitchAndYaw = lp_keepPitchAndYaw;
    if (auto_gf_SetCameraModetoTPS_Trigger == null) {
        auto_gf_SetCameraModetoTPS_Trigger = TriggerCreate("auto_gf_SetCameraModetoTPS_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetCameraModetoTPS_Trigger, false, false);
}
bool auto_gf_SetCameraModetoTPS_TriggerFunc (bool testConds, bool runActions) {
    int lp_user = auto_gf_SetCameraModetoTPS_lp_user;
    unit lp_targetUnit = auto_gf_SetCameraModetoTPS_lp_targetUnit;
    fixed lp_duration = auto_gf_SetCameraModetoTPS_lp_duration;
    fixed lp_deceleration = auto_gf_SetCameraModetoTPS_lp_deceleration;
    bool lp_keepPitchAndYaw = auto_gf_SetCameraModetoTPS_lp_keepPitchAndYaw;
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && (lp_targetUnit != null)) {
        gf_RequestCancelationandWaituntilAcceptedforCamera(lp_user);
        gv_cameraInfoArray[lv__userIndex].lv_mode = ge_CameraMode_TPS;
        gv_cameraInfoArray[lv__userIndex].lv_targetUnit = lp_targetUnit;
        CameraSetBounds(PlayerGroupSingle(lp_user), RegionEntireMap(), true);
        CameraSetMouseRotates(lp_user, true);
        CameraForceMouseRelative(lp_user, true);
        CameraFollowUnitGroup(lp_user, CameraFollowUnitGroupGet(lp_user), false, false);
        CameraLockInput(lp_user, true);
        gf_ApplyCameraObjectNotIncludeTargetandAnlgeofAttack(lp_user, CameraInfoFromId(354934228), lp_duration, -1, lp_deceleration);
        CameraSetValue(lp_user, c_cameraValueHeightOffset, CameraInfoGetValue(CameraInfoFromId(354934228), c_cameraValueHeightOffset), lp_duration, -1, lp_deceleration);
        CameraPan(lp_user, UnitGetPosition(lp_targetUnit), lp_duration, -1, lp_deceleration, false);
        if ((lp_keepPitchAndYaw == false)) {
            CameraSetValue(lp_user, c_cameraValuePitch, CameraInfoGetValue(CameraInfoFromId(354934228), c_cameraValuePitch), lp_duration, -1, lp_deceleration);
            CameraSetValue(lp_user, c_cameraValueYaw, UnitGetFacing(lp_targetUnit), lp_duration, -1, lp_deceleration);
        }
        gf_SetCameraStatetoTransitioning(lp_user, lp_duration);
        if ((gf_IsCancelationRequestedforCamera(lp_user) == false)) {
            CameraFollowUnitGroup(lp_user, libNtve_gf_ConvertUnitToUnitGroup(lp_targetUnit), true, false);
            CameraLockInput(lp_user, false);
            gf_OnCameraModeChanged(lp_user);
        }
        gf_SetCameraStatetoStable(lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/C9F28C88"));
        return true;
    }
    return true;
}
trigger auto_gf_SetCameraModetoTopSideView_Trigger = null;
int auto_gf_SetCameraModetoTopSideView_lp_user;
region auto_gf_SetCameraModetoTopSideView_lp_targetRegion;
fixed auto_gf_SetCameraModetoTopSideView_lp_duration;
point auto_gf_SetCameraModetoTopSideView_lp_startingPoint;
void gf_SetCameraModetoTopSideView (int lp_user, region lp_targetRegion, fixed lp_duration, point lp_startingPoint) {
    auto_gf_SetCameraModetoTopSideView_lp_user = lp_user;
    auto_gf_SetCameraModetoTopSideView_lp_targetRegion = lp_targetRegion;
    auto_gf_SetCameraModetoTopSideView_lp_duration = lp_duration;
    auto_gf_SetCameraModetoTopSideView_lp_startingPoint = lp_startingPoint;
    if (auto_gf_SetCameraModetoTopSideView_Trigger == null) {
        auto_gf_SetCameraModetoTopSideView_Trigger = TriggerCreate("auto_gf_SetCameraModetoTopSideView_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetCameraModetoTopSideView_Trigger, false, false);
}
bool auto_gf_SetCameraModetoTopSideView_TriggerFunc (bool testConds, bool runActions) {
    int lp_user = auto_gf_SetCameraModetoTopSideView_lp_user;
    region lp_targetRegion = auto_gf_SetCameraModetoTopSideView_lp_targetRegion;
    fixed lp_duration = auto_gf_SetCameraModetoTopSideView_lp_duration;
    point lp_startingPoint = auto_gf_SetCameraModetoTopSideView_lp_startingPoint;
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && (lp_targetRegion != null)) {
        gf_RequestCancelationandWaituntilAcceptedforCamera(lp_user);
        gv_cameraInfoArray[lv__userIndex].lv_mode = ge_CameraMode_TopSideView;
        gv_cameraInfoArray[lv__userIndex].lv_targetRegion = lp_targetRegion;
        CameraFollowUnitGroup(lp_user, CameraFollowUnitGroupGet(lp_user), false, false);
        CameraSetBounds(PlayerGroupSingle(lp_user), lp_targetRegion, true);
        CameraLockInput(lp_user, false);
        CameraForceMouseRelative(lp_user, false);
        CameraSetMouseRotates(lp_user, false);
        CameraApplyInfo(lp_user, CameraInfoFromId(1257473226), lp_duration, -1, 0.0, false);
        CameraSetValue(lp_user, c_cameraValueYaw, 225.0, lp_duration, -1, 10.0);
        if ((lp_startingPoint != null)) {
            CameraPan(lp_user, lp_startingPoint, lp_duration, -1, 10.0, false);
        }
        else {
            CameraPan(lp_user, RegionGetCenter(lp_targetRegion), lp_duration, -1, 10.0, false);
        }
        gf_OnCameraModeChanged(lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/3E382202"));
        return true;
    }
    return true;
}
trigger auto_gf_SetCameraModetoControllingDevice_Trigger = null;
int auto_gf_SetCameraModetoControllingDevice_lp_user;
unit auto_gf_SetCameraModetoControllingDevice_lp_device;
fixed auto_gf_SetCameraModetoControllingDevice_lp_duration;
void gf_SetCameraModetoControllingDevice (int lp_user, unit lp_device, fixed lp_duration) {
    auto_gf_SetCameraModetoControllingDevice_lp_user = lp_user;
    auto_gf_SetCameraModetoControllingDevice_lp_device = lp_device;
    auto_gf_SetCameraModetoControllingDevice_lp_duration = lp_duration;
    if (auto_gf_SetCameraModetoControllingDevice_Trigger == null) {
        auto_gf_SetCameraModetoControllingDevice_Trigger = TriggerCreate("auto_gf_SetCameraModetoControllingDevice_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetCameraModetoControllingDevice_Trigger, false, false);
}
bool auto_gf_SetCameraModetoControllingDevice_TriggerFunc (bool testConds, bool runActions) {
    int lp_user = auto_gf_SetCameraModetoControllingDevice_lp_user;
    unit lp_device = auto_gf_SetCameraModetoControllingDevice_lp_device;
    fixed lp_duration = auto_gf_SetCameraModetoControllingDevice_lp_duration;
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && gf_IsDevice(lp_device)) {
        gf_RequestCancelationandWaituntilAcceptedforCamera(lp_user);
        gv_cameraInfoArray[lv__userIndex].lv_mode = ge_CameraMode_ControllingDevice;
        gv_cameraInfoArray[lv__userIndex].lv_targetUnit = lp_device;
        CameraSetBounds(PlayerGroupSingle(lp_user), RegionEntireMap(), true);
        CameraFollowUnitGroup(lp_user, CameraFollowUnitGroupGet(lp_user), false, false);
        CameraLockInput(lp_user, true);
        CameraSetMouseRotates(lp_user, false);
        CameraForceMouseRelative(lp_user, false);
        gf_ApplyCameraObjectNotIncludeTargetandAnlgeofAttack(lp_user, CameraInfoFromId(1440514945), lp_duration, -1, 10.0);
        CameraSetValue(lp_user, c_cameraValuePitch, CameraInfoGetValue(CameraInfoFromId(1440514945), c_cameraValuePitch), lp_duration, -1, 10.0);
        CameraSetValue(lp_user, c_cameraValueHeightOffset, CameraInfoGetValue(CameraInfoFromId(1440514945), c_cameraValueHeightOffset), lp_duration, -1, 10.0);
        CameraSetValue(lp_user, c_cameraValueYaw, (UnitGetFacing(lp_device)+180), lp_duration, -1, 10.0);
        CameraPan(lp_user, UnitGetPosition(lp_device), lp_duration, -1, 10.0, false);
        gf_OnCameraModeChanged(lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/132FC4FD"));
        return true;
    }
    return true;
}
trigger auto_gf_SetCameraModetoTrackingEscapeTrain_Trigger = null;
int auto_gf_SetCameraModetoTrackingEscapeTrain_lp_user;
void gf_SetCameraModetoTrackingEscapeTrain (int lp_user) {
    auto_gf_SetCameraModetoTrackingEscapeTrain_lp_user = lp_user;
    if (auto_gf_SetCameraModetoTrackingEscapeTrain_Trigger == null) {
        auto_gf_SetCameraModetoTrackingEscapeTrain_Trigger = TriggerCreate("auto_gf_SetCameraModetoTrackingEscapeTrain_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetCameraModetoTrackingEscapeTrain_Trigger, false, false);
}
bool auto_gf_SetCameraModetoTrackingEscapeTrain_TriggerFunc (bool testConds, bool runActions) {
    int lp_user = auto_gf_SetCameraModetoTrackingEscapeTrain_lp_user;
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        gf_RequestCancelationandWaituntilAcceptedforCamera(lp_user);
        gv_cameraInfoArray[lv__userIndex].lv_mode = ge_CameraMode_TrackingEscapeTrain;
        CameraSetBounds(PlayerGroupSingle(lp_user), RegionEntireMap(), true);
        CameraFollowUnitGroup(lp_user, CameraFollowUnitGroupGet(lp_user), false, false);
        CameraLockInput(lp_user, true);
        CameraSetMouseRotates(lp_user, true);
        CameraForceMouseRelative(lp_user, true);
        CameraApplyInfo(lp_user, CameraInfoFromId(330840056), 0.0, -1, 10.0, false);
        CameraFollowUnitGroup(lp_user, libNtve_gf_ConvertUnitToUnitGroup(gv_uNIT_ESCAPE_TRAIN), true, false);
        gf_OnCameraModeChanged(lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/3D5AB287"));
        return true;
    }
    return true;
}
void gf_SetCameraStatetoTransitioning (int lp_player, fixed lp_duration) {
    // Variable Declarations
    timer lv__timer;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__timer = TimerCreate();
    // Implementation
    if ((gf_IsUser(lp_player) == false)) {
        gf_Assert(ge_AssertType_ParameterException, "Lock Camera");
    }
    if ((lp_duration > 0.0)) {
        gv_cameraInfoArray[gf_GetUserIndex(lp_player)].lv_state = ge_CameraState_Transitioning;
        TimerStart(lv__timer, lp_duration, false, c_timeGame);
        while ((gv_cameraInfoArray[gf_GetUserIndex(lp_player)].lv_state == ge_CameraState_Transitioning) && (TimerGetRemaining(lv__timer) > 0.0)) {
            Wait(0.0625, c_timeGame);
        }
    }
}
void gf_SetCameraStatetoStable (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_IsUser(lp_player) == false)) {
        gf_Assert(ge_AssertType_ParameterException, "Lock Camera");
    }
    gv_cameraInfoArray[gf_GetUserIndex(lp_player)].lv_state = ge_CameraState_Stable;
}
void gf_SetCameraTrackingTargetUser (int lp_user, int lp_targetUser) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    int auto463862B6_val;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        if (gf_IsUser(lp_targetUser)) {
            gv_cameraInfoArray[lv__userIndex].lv_trackingTarget = lp_targetUser;
            auto463862B6_val = gf_CameraMode(lp_targetUser);
            if (auto463862B6_val == ge_CameraMode_FocusingUnit) {
                gf_SetCameraModetoFocusingUnit(lp_user, gf_CameraTargetUnit(lp_user), gf_CameraSampleObject(lp_targetUser), 0.0);
            }
            else if (auto463862B6_val == ge_CameraMode_TPS) {
                gf_SetCameraModetoTPS(lp_user, gf_CameraTargetUnit(lp_targetUser), 0.0, 0.0, false);
            }
            else if (auto463862B6_val == ge_CameraMode_ControllingDevice) {
                gf_SetCameraModetoControllingDevice(lp_user, gf_CameraTargetUnit(lp_targetUser), 0.0);
            }
            else if (auto463862B6_val == ge_CameraMode_TopSideView) {
                gf_SetCameraModetoTopSideView(lp_user, gf_CameraTargetRegion(lp_targetUser), 0.0, CameraGetTarget(lp_targetUser));
            }
            else if (auto463862B6_val == ge_CameraMode_TrackingEscapeTrain) {
                gf_SetCameraModetoTrackingEscapeTrain(lp_user);
            }
            else {
            }
            gf_CameraTrackingTickAction(lp_user, 0.0);
        }
        else {
            gv_cameraInfoArray[lv__userIndex].lv_trackingTarget = c_playerAny;
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/DBAAE7E0"));
    }
}
void gf_RequestCancelationandWaituntilAcceptedforCamera (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player)) {
        if ((gf_CameraState(lp_player) == ge_CameraState_Transitioning)) {
            gv_cameraInfoArray[gf_GetUserIndex(lp_player)].lv_state = ge_CameraState_CancelationRequested;
            while (!((gf_CameraState(lp_player) != ge_CameraState_CancelationRequested))) {
                Wait(0.0625, c_timeGame);
            }
        }
    }
    else {
        gf_Assert(ge_AssertType_ParameterException, "Request Cancelation and Wait until Accepted for Camera");
    }
}
void gf_CameraTrackingTickAction (int lp_user, fixed lp_duration) {
    // Variable Declarations
    int lv__trackingTargetUser;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__trackingTargetUser = gf_CameraTrackingTargetUser(lp_user);
    // Implementation
    if ((lv__trackingTargetUser != c_playerAny)) {
        CameraSetValue(lp_user, c_cameraValuePitch, CameraGetPitch(lv__trackingTargetUser), lp_duration, -1, 10.0);
        CameraSetValue(lp_user, c_cameraValueYaw, CameraGetYaw(lv__trackingTargetUser), lp_duration, -1, 10.0);
        if ((gf_CameraTargetUnit(lv__trackingTargetUser) == null)) {
            CameraPan(lp_user, CameraGetTarget(lv__trackingTargetUser), lp_duration, -1, 10.0, false);
        }
    }
}
void gf_OnCameraModeChanged (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CameraTrackingTargetUser(lp_user) != c_playerAny)) {
        CameraLockInput(lp_user, true);
    }
    if ((gf_UserPlayMode(lp_user) == ge_PlayMode_Observer)) {
        if ((gf_GetObserverState(lp_user) == ge_ObserverState_UsingUtilityPanel)) {
            gf_CustomizedShowHideMouseCursor(lp_user, true);
        }
        else {
            gf_CustomizedShowHideMouseCursor(lp_user, false);
        }
    }
}
bool gf_IsValidBankKeyIndex (bank lp_bank, string lp_section, int lp_keyIndex) {
    // Variable Declarations
    int lv__lastIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((lp_bank != null) && (BankSectionExists(lp_bank, lp_section) == true)) {
        lv__lastIndex = (BankKeyCount(lp_bank, lp_section) - 1);
        if (((lp_keyIndex >= 0) && (lp_keyIndex <= lv__lastIndex))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}
bank gf_GetBlacklistBank (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_bankInfoArray[lv__userIndex].lv_balck;
    }
    else {
        return null;
    }
}
bank gf_GetLastPlayersBank (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_bankInfoArray[lv__userIndex].lv_lastPlayers;
    }
    else {
        return null;
    }
}
void gf_LoadLegacyScore (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    bank lv__bank;
    string lv__s;
    int lv__killedChangelings;
    int lv__foundChangeligs;
    int lv__changelingWinCount;
    int lv__localCode;
    int lv__firstId;
    int lv__secondId;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__bank = gf_GetLegacyScoreBank(lp_user);
    lv__s = "";
    
    // Implementation
    if ((lv__userIndex != -1)) {
        if ((lv__bank != null) && (BankKeyExists(lv__bank, "k", "k") == true)){
            libEFD08206_gf_StarcodeStartCode();
            lv__s = BankValueGetAsString(lv__bank, "k", "k");
            lv__s = libEFD08206_gf_StarcodeRemoveHashfromString(lv__s, gv_lEGACYSCORE_HASH_LEVEL);
            lv__s = libEFD08206_gf_StarcodeDecryptString(lv__s, gv_lEGACYSCORE_HASH_KEY);
            lv__s = libEFD08206_gf_StarcodeDecompressString(lv__s);
            libEFD08206_gf_StarcodeSetCode(lv__s);
            lv__changelingWinCount = libEFD08206_gf_StarcodeGetIntegerValue(gv_lEGACYSCORE_RANGE_SCORE);
            lv__killedChangelings = libEFD08206_gf_StarcodeGetIntegerValue(gv_lEGACYSCORE_RANGE_SCORE);
            lv__foundChangeligs = libEFD08206_gf_StarcodeGetIntegerValue(gv_lEGACYSCORE_RANGE_SCORE);
            lv__secondId = libEFD08206_gf_StarcodeGetIntegerValue(gv_lEGACYSCORE_RANGE_SECONDID);
            lv__firstId = libEFD08206_gf_StarcodeGetIntegerValue(gv_lEGACYSCORE_RANGE_FIRSTID);
            lv__localCode = libEFD08206_gf_StarcodeGetIntegerValue(gv_lEGACYSCORE_RANGE_LOCALCODE);
            lv__s = gf_GetHandlebyCombiningId(lv__localCode, lv__firstId, lv__secondId);
            if ((gf_RecordedHandleofUser(lp_user) == lv__s)) {
                gv_legacyScoreInfoArray[lv__userIndex].lv_killedChangelings_dirty = gf_MakeDirtyInteger(lv__killedChangelings);
                gv_legacyScoreInfoArray[lv__userIndex].lv_foundChangelings_dirty = gf_MakeDirtyInteger(lv__foundChangeligs);
                gv_legacyScoreInfoArray[lv__userIndex].lv_changelingWins_dirty = gf_MakeDirtyInteger(lv__changelingWinCount);
            }
            else {
                gv_legacyScoreInfoArray[lv__userIndex].lv_killedChangelings_dirty = gf_MakeDirtyInteger(0);
                gv_legacyScoreInfoArray[lv__userIndex].lv_foundChangelings_dirty = gf_MakeDirtyInteger(0);
                gv_legacyScoreInfoArray[lv__userIndex].lv_changelingWins_dirty = gf_MakeDirtyInteger(0);
                gf_CustomDebugMessage(StringExternal("Param/Value/D529F947"));
            }
        }
        else {
            gv_legacyScoreInfoArray[lv__userIndex].lv_killedChangelings_dirty = gf_MakeDirtyInteger(0);
            gv_legacyScoreInfoArray[lv__userIndex].lv_foundChangelings_dirty = gf_MakeDirtyInteger(0);
            gv_legacyScoreInfoArray[lv__userIndex].lv_changelingWins_dirty = gf_MakeDirtyInteger(0);
            
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/D2AF6FC7"));
    }
}
void gf_SaveLegacyScorebyGameEndType (int lp_gameEndType) {
    // Automatic Variable Declarations
    int auto7A0FBAD0_val;
    // Implementation
    if (gf_CanSaveLegacyScore()) {
        auto7A0FBAD0_val = lp_gameEndType;
        if (auto7A0FBAD0_val == ge_GameEndType_ChangelingWin) {
            gf_GiveandSaveLegacyScorePointforUser(gf_GetChangelingPlayer(), ge_LegacyScoreType_ChangelingWinCount);
        }
        else if (auto7A0FBAD0_val == ge_GameEndType_MarineWin) {
            if (gf_IsUser(gf_GetKillingChangelingUser())) {
                gf_GiveandSaveLegacyScorePointforUser(gf_GetKillingChangelingUser(), ge_LegacyScoreType_KilledChangelingCount);
            }
            if (gf_IsUser(gf_GetAssistUser())) {
                gf_GiveandSaveLegacyScorePointforUser(gf_GetAssistUser(), ge_LegacyScoreType_FoundChangelingCount);
            }
        }
        else {
        }
    }
}
void gf_GiveandSaveLegacyScorePointforUser (int lp_user, int lp_scoreType) {
    // Variable Declarations
    bank lv__bank;
    int lv__killedChangelings;
    int lv__foundChangeligs;
    int lv__changelingWinCount;
    string lv__s;
    int lv__localCode;
    int lv__firstId;
    int lv__secondId;
    // Automatic Variable Declarations
    int auto23CD7479_val;
    // Variable Initialization
    lv__bank = gf_GetLegacyScoreBank(lp_user);
    lv__s = "";
    // Implementation
    if ((lv__bank != null)) {
        if (gf_CanSaveLegacyScore()) {
            gf_LoadLegacyScore(lp_user);
            lv__killedChangelings = gf_GetLegacyScore(lp_user, ge_LegacyScoreType_KilledChangelingCount);
            lv__foundChangeligs = gf_GetLegacyScore(lp_user, ge_LegacyScoreType_FoundChangelingCount);
            lv__changelingWinCount = gf_GetLegacyScore(lp_user, ge_LegacyScoreType_ChangelingWinCount);
            auto23CD7479_val = lp_scoreType;
            if (auto23CD7479_val == ge_LegacyScoreType_KilledChangelingCount) {
                lv__killedChangelings = (lv__killedChangelings+1);
            }
            else if (auto23CD7479_val == ge_LegacyScoreType_ChangelingWinCount) {
                lv__changelingWinCount = (lv__changelingWinCount+1);
            }
            else if (auto23CD7479_val == ge_LegacyScoreType_FoundChangelingCount) {
                lv__foundChangeligs = (lv__foundChangeligs+1);
            }
            else {
            }
            if (gf_IsAuthorizedUser(lp_user)) {
                lv__s = StringReplaceWord(gf_HandleofCreator(), "-", " ", c_stringReplaceAll, c_stringCase);
            }
            else {
                lv__s = StringReplaceWord(PlayerHandle(lp_user), "-", " ", c_stringReplaceAll, c_stringCase);
            }
            lv__localCode = StringToInt(StringWord(lv__s, 1));
            lv__firstId = StringToInt(StringWord(lv__s, 3));
            lv__secondId = StringToInt(StringWord(lv__s, 4));
            TextExpressionSetToken("Param/Expression/58658DEA", "killedChangelings", IntToText(lv__killedChangelings));
            TextExpressionSetToken("Param/Expression/58658DEA", "foundChangelings", IntToText(lv__foundChangeligs));
            TextExpressionSetToken("Param/Expression/58658DEA", "changelingWinCount", IntToText(lv__changelingWinCount));
            TextExpressionSetToken("Param/Expression/58658DEA", "handle", StringToText(gf_GetHandlebyCombiningId(lv__localCode, lv__firstId, lv__secondId)));
            gf_CustomDebugMessage(TextExpressionAssemble("Param/Expression/58658DEA"));
            libEFD08206_gf_StarcodeStartCode();
            libEFD08206_gf_StarcodeStoreIntegerValue(lv__localCode, gv_lEGACYSCORE_RANGE_LOCALCODE);
            libEFD08206_gf_StarcodeStoreIntegerValue(lv__firstId, gv_lEGACYSCORE_RANGE_FIRSTID);
            libEFD08206_gf_StarcodeStoreIntegerValue(lv__secondId, gv_lEGACYSCORE_RANGE_SECONDID);
            libEFD08206_gf_StarcodeStoreIntegerValue(lv__foundChangeligs, gv_lEGACYSCORE_RANGE_SCORE);
            libEFD08206_gf_StarcodeStoreIntegerValue(lv__killedChangelings, gv_lEGACYSCORE_RANGE_SCORE);
            libEFD08206_gf_StarcodeStoreIntegerValue(lv__changelingWinCount, gv_lEGACYSCORE_RANGE_SCORE);
            lv__s = libEFD08206_gf_StarcodeCompressString(libEFD08206_gf_StarcodeGetCode());
            lv__s = libEFD08206_gf_StarcodeEncryptString(lv__s, gv_lEGACYSCORE_HASH_KEY);
            lv__s = libEFD08206_gf_StarcodeHashString(lv__s, gv_lEGACYSCORE_HASH_LEVEL);
            gf_CustomDebugMessage(StringToText(lv__s));
            BankValueSetFromString(lv__bank, "k", "k", lv__s);
            BankSave(lv__bank);
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/30A76AEF"));
    }
}
void gf_ScoreGive (int lp_user, int lp_scoreType, int lp_scoreInt) {
    // Variable Declarations
    bank lv__bank;
    int lv__killedChangelings;
    int lv__foundChangeligs;
    int lv__changelingWinCount;
    string lv__s;
    int lv__localCode;
    int lv__firstId;
    int lv__secondId;
    // Automatic Variable Declarations
    int auto23CD7479_val;
    // Variable Initialization
    lv__bank = gf_GetLegacyScoreBank(lp_user);
    lv__s = "";
    // Implementation
    if ((lv__bank != null)) {
        gf_LoadLegacyScore(lp_user);
        lv__killedChangelings = gf_GetLegacyScore(lp_user, ge_LegacyScoreType_KilledChangelingCount);
        lv__foundChangeligs = gf_GetLegacyScore(lp_user, ge_LegacyScoreType_FoundChangelingCount);
        lv__changelingWinCount = gf_GetLegacyScore(lp_user, ge_LegacyScoreType_ChangelingWinCount);
        auto23CD7479_val = lp_scoreType;
        if (auto23CD7479_val == ge_LegacyScoreType_KilledChangelingCount) {
            lv__killedChangelings = lp_scoreInt;
        }
        else if (auto23CD7479_val == ge_LegacyScoreType_ChangelingWinCount) {
            lv__changelingWinCount = lp_scoreInt;
        }
        else if (auto23CD7479_val == ge_LegacyScoreType_FoundChangelingCount) {
            lv__foundChangeligs = lp_scoreInt;
        }
        else {
        }
        if (gf_IsAuthorizedUser(lp_user)) {
            lv__s = StringReplaceWord(gf_HandleofCreator(), "-", " ", c_stringReplaceAll, c_stringCase);
        }
        else {
            lv__s = StringReplaceWord(PlayerHandle(lp_user), "-", " ", c_stringReplaceAll, c_stringCase);
        }
        lv__localCode = StringToInt(StringWord(lv__s, 1));
        lv__firstId = StringToInt(StringWord(lv__s, 3));
        lv__secondId = StringToInt(StringWord(lv__s, 4));
        TextExpressionSetToken("Param/Expression/58658DEA", "killedChangelings", IntToText(lv__killedChangelings));
        TextExpressionSetToken("Param/Expression/58658DEA", "foundChangelings", IntToText(lv__foundChangeligs));
        TextExpressionSetToken("Param/Expression/58658DEA", "changelingWinCount", IntToText(lv__changelingWinCount));
        TextExpressionSetToken("Param/Expression/58658DEA", "handle", StringToText(gf_GetHandlebyCombiningId(lv__localCode, lv__firstId, lv__secondId)));
        gf_CustomDebugMessage(TextExpressionAssemble("Param/Expression/58658DEA"));
        libEFD08206_gf_StarcodeStartCode();
        libEFD08206_gf_StarcodeStoreIntegerValue(lv__localCode, gv_lEGACYSCORE_RANGE_LOCALCODE);
        libEFD08206_gf_StarcodeStoreIntegerValue(lv__firstId, gv_lEGACYSCORE_RANGE_FIRSTID);
        libEFD08206_gf_StarcodeStoreIntegerValue(lv__secondId, gv_lEGACYSCORE_RANGE_SECONDID);
        libEFD08206_gf_StarcodeStoreIntegerValue(lv__foundChangeligs, gv_lEGACYSCORE_RANGE_SCORE);
        libEFD08206_gf_StarcodeStoreIntegerValue(lv__killedChangelings, gv_lEGACYSCORE_RANGE_SCORE);
        libEFD08206_gf_StarcodeStoreIntegerValue(lv__changelingWinCount, gv_lEGACYSCORE_RANGE_SCORE);
        lv__s = libEFD08206_gf_StarcodeCompressString(libEFD08206_gf_StarcodeGetCode());
        lv__s = libEFD08206_gf_StarcodeEncryptString(lv__s, gv_lEGACYSCORE_HASH_KEY);
        lv__s = libEFD08206_gf_StarcodeHashString(lv__s, gv_lEGACYSCORE_HASH_LEVEL);
        gf_CustomDebugMessage(StringToText(lv__s));
        BankValueSetFromString(lv__bank, "k", "k", lv__s);
        BankSave(lv__bank);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/30A76AEF"));
    }
}
bank gf_GetLegacyScoreBank (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    return gf_GetLastPlayersBank(lp_user);
}
string gf_GetLegacyRankImagebyTier (int lp_mainTier, int lp_subTier) {
    // Variable Declarations
    string lv__fileName;
    int lv__subTierIndex;
    // Automatic Variable Declarations
    int auto456F88B7_val;
    int auto4589216E_val;
    // Variable Initialization
    lv__fileName = "";
    // Implementation
    auto456F88B7_val = lp_mainTier;
    if (auto456F88B7_val == ge_LegacyRankMainTier__0Bronze) {
        lv__fileName = "0Bronze";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__1Sivler) {
        lv__fileName = "1Silver";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__2Gold) {
        lv__fileName = "2Gold";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__3Platinum) {
        lv__fileName = "3Platinum";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__4Diamond) {
        lv__fileName = "4Diamond";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__5Master) {
        lv__fileName = "5Masters";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__6GrandMaster) {
        lv__fileName = "6Grandmasters";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__7SwordMaster) {
        lv__fileName = "7Swordmasters";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__8PokemonMaster) {
        lv__fileName = "8Pokemonmaster";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__9BlackB) {
        lv__fileName = "9BlackB";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__10BlackR) {
        lv__fileName = "10BlackR";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__11BlackP) {
        lv__fileName = "11BlackP";
    }
    else if (auto456F88B7_val == ge_LegacyRankMainTier__12BlackG) {
        lv__fileName = "12BlackG";
    }
    else {
        return "NoRank.tga";
    }
    auto4589216E_val = lp_subTier;
    if (auto4589216E_val == ge_LegacyRankSubTier__0Normal) {
        lv__subTierIndex = 0;
    }
    else if (auto4589216E_val == ge_LegacyRankSubTier__1Shield) {
        lv__subTierIndex = 1;
    }
    else if (auto4589216E_val == ge_LegacyRankSubTier__2Wings) {
        lv__subTierIndex = 2;
    }
    else if (auto4589216E_val == ge_LegacyRankSubTier__3Star) {
        lv__subTierIndex = 3;
    }
    else {
        lv__subTierIndex = 0;
    }
    lv__fileName = (lv__fileName + IntToString(lv__subTierIndex) + ".tga");
    return (lv__fileName);
}
string gf_GetLegacyRankImagebyScore (int lp_killedChangelings, int lp_foundChangelings, int lp_changelingWinCount) {
    // Variable Declarations
    const int lv__REQUIRED_SCORE_FOR_UNLOCK_RANK = 1;
    int lv__sum;
    int lv__rankInfoIndex;
    int lv__requiredScoreForPromotion;
    int lv__requiredScoreStack;
    int lv__subTierIndex;
    // Automatic Variable Declarations
    const int autoE45248E8_ae = 1;
    const int autoE45248E8_ai = -1;
    // Variable Initialization
    lv__sum = (lp_killedChangelings+lp_foundChangelings+lp_changelingWinCount);
    lv__requiredScoreStack = lv__REQUIRED_SCORE_FOR_UNLOCK_RANK;
    // Implementation
    if ((lv__sum < lv__REQUIRED_SCORE_FOR_UNLOCK_RANK)) {
        return "NoRank.tga";
    }
    else {
        while ((lv__rankInfoIndex < UserDataInstanceCount("RankInfo"))) {
            lv__rankInfoIndex = (lv__rankInfoIndex+1);
            lv__requiredScoreForPromotion = UserDataGetInt("RankInfo", UserDataInstance("RankInfo", lv__rankInfoIndex), "RequiredScoreForPromotion", 1);
            lv__requiredScoreStack = (lv__requiredScoreStack+lv__requiredScoreForPromotion*4);
            if ((lv__sum < lv__requiredScoreStack)) {
                lv__subTierIndex = 4;
                for ( ; ( (autoE45248E8_ai >= 0 && lv__subTierIndex <= autoE45248E8_ae) || (autoE45248E8_ai < 0 && lv__subTierIndex >= autoE45248E8_ae) ) ; lv__subTierIndex += autoE45248E8_ai ) {
                    if ((lv__sum >= (lv__requiredScoreStack-lv__requiredScoreForPromotion*(5-lv__subTierIndex)))) {
                        return UserDataGetImagePath("RankInfo", UserDataInstance("RankInfo", lv__rankInfoIndex), "SubTierImageArray", lv__subTierIndex);
                    }
                }
                gf_CustomDebugMessage(StringExternal("Param/Value/19E77BAB"));
                return null;
            }
        }
        return UserDataGetImagePath("RankInfo", UserDataInstance("RankInfo", UserDataInstanceCount("RankInfo")), "SubTierImageArray", 4);
    }
}
string gf_GetLegacyRankImagefromUser (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_user)) {
        return gf_GetLegacyRankImagebyScore(gf_GetLegacyScore(lp_user, ge_LegacyScoreType_KilledChangelingCount), gf_GetLegacyScore(lp_user, ge_LegacyScoreType_FoundChangelingCount), gf_GetLegacyScore(lp_user, ge_LegacyScoreType_ChangelingWinCount));
    }
    else {
        return gf_GetLegacyRankImagebyScore(0, 0, 0);
    }
}
int gf_GetLegacyScore (int lp_user, int lp_scoreType) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    int autoE9CE0214_val;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        autoE9CE0214_val = lp_scoreType;
        if (autoE9CE0214_val == ge_LegacyScoreType_KilledChangelingCount) {
            return gf_CleanDirtyInteger(gv_legacyScoreInfoArray[lv__userIndex].lv_killedChangelings_dirty);
        }
        else if (autoE9CE0214_val == ge_LegacyScoreType_FoundChangelingCount) {
            return gf_CleanDirtyInteger(gv_legacyScoreInfoArray[lv__userIndex].lv_foundChangelings_dirty);
        }
        else if (autoE9CE0214_val == ge_LegacyScoreType_ChangelingWinCount) {
            return gf_CleanDirtyInteger(gv_legacyScoreInfoArray[lv__userIndex].lv_changelingWins_dirty);
        }
        else {
            return 0;
        }
    }
    else {
        return 0;
    }
}
int gf_GetTotalLegacyScore (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    return (gf_GetLegacyScore(lp_user, ge_LegacyScoreType_ChangelingWinCount)+gf_GetLegacyScore(lp_user, ge_LegacyScoreType_FoundChangelingCount)+gf_GetLegacyScore(lp_user, ge_LegacyScoreType_KilledChangelingCount));
}
string gf_GetHandlebyCombiningId (int lp_localCode, int lp_firstId, int lp_secondId) {
    // Automatic Variable Declarations
    // Implementation
    return (IntToString(lp_localCode) + "-S2-" + IntToString(lp_firstId) + "-" + IntToString(lp_secondId));
}
timer gf_GetAssistUserResetTimer () {
    // Automatic Variable Declarations
    // Implementation
    return gv_legacyScoringInfo.lv_assistTimer;
}
int gf_GetAssistUser () {
    // Automatic Variable Declarations
    // Implementation
    return gv_legacyScoringInfo.lv_assistUser;
}
int gf_GetKillingChangelingUser () {
    // Automatic Variable Declarations
    // Implementation
    return gv_legacyScoringInfo.lv_killingChangelingUser;
}
int gf_GetLegacyScoreDialogCancelationToken (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_legacyScoreDialogCancelationToken[lv__userIndex];
    }
    else {
        return gv_legacyScoreDialogCancelationToken[lv__userIndex];
    }
}
void gf_SetAssistUserforFoundChangelingScore (int lp_user, fixed lp_duration, bool lp_forced) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CharacterRole(lp_user) == ge_CharacterRole_Marine) && (lp_duration > 0.0) && ((lp_forced == true) || (TimerGetRemaining(gf_GetAssistUserResetTimer()) == 0.0))) {
        gv_legacyScoringInfo.lv_assistUser = lp_user;
        TimerStart(gf_GetAssistUserResetTimer(), lp_duration, false, c_timeGame);
    }
}
void gf_SetKillingChangelingUser (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CharacterRole(lp_user) == ge_CharacterRole_Marine)) {
        gv_legacyScoringInfo.lv_killingChangelingUser = lp_user;
    }
}
bool gf_CanSaveLegacyScore () {
    // Automatic Variable Declarations
    // Implementation
    return gv_canSaveLegacyScore;
}
playergroup gf_GetUsersRegisteringTargetUserAsBlacklist (int lp_targetUser) {
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto0738D51F_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    if (gf_IsUser(lp_targetUser)) {
        auto0738D51F_g = gf_StartingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto0738D51F_g, lv__i);
            if (lv__i < 0) { break; }
            if ((lp_targetUser != lv__i) && (gf_IsUserinBlacklistBank(lv__i, lp_targetUser, 1) == true)) {
                PlayerGroupAdd(lv__pg, lv__i);
            }
        }
    }
    return lv__pg;
}
bool gf_IsUserinBlacklistBank (int lp_blacklistOwner, int lp_targetUser, int lp_saveType) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if ((lv__bank != null) && gf_IsUser(lp_targetUser) && (lp_blacklistOwner != lp_targetUser) && (BankKeyExists(lv__bank, gf_GetBlacklistBankSection(lp_saveType), gf_RecordedHandleofUser(lp_targetUser)) == true)) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_IsHandleinBlacklistBank (int lp_blacklistOwner, string lp_handle, int lp_saveType) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if ((lv__bank != null) && (PlayerHandle(lp_blacklistOwner) != lp_handle) && (BankKeyExists(lv__bank, gf_GetBlacklistBankSection(lp_saveType), lp_handle) == true)) {
        return true;
    }
    else {
        return false;
    }
}
string gf_GetBlacklistBankSection (int lp_saveType) {
    // Automatic Variable Declarations
    int autoCEA274B9_val;
    // Implementation
    autoCEA274B9_val = lp_saveType;
    if (autoCEA274B9_val == 1) {
        return gv_bLACKLIST_BANK_SECTION_BLACKLIST;
    }
    else if (autoCEA274B9_val == 0) {
        return gv_bLACKLIST_BANK_SECTION_LASTPLAYERS;
    }
    else {
        return null;
    }
}
text gf_GetUserNameFromBlacklistBank (int lp_blacklistOwner, string lp_handle, int lp_saveType) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if ((lv__bank != null) && (lp_handle != null) && (BankKeyExists(lv__bank, gf_GetBlacklistBankSection(lp_saveType), lp_handle) == true)) {
        return BankValueGetAsText(lv__bank, gf_GetBlacklistBankSection(lp_saveType), lp_handle);
    }
    else {
        return null;
    }
}
text gf_GetUserNameFromBlacklistBankbyKeyIndex (int lp_blacklistOwner, int lp_keyIndex, int lp_saveType) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if (gf_IsValidBankKeyIndex(lv__bank, gf_GetBlacklistBankSection(lp_saveType), lp_keyIndex)) {
        return BankValueGetAsText(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST, BankKeyName(lv__bank, gf_GetBlacklistBankSection(lp_saveType), lp_keyIndex));
    }
    else {
        return null;
    }
}
string gf_GetUserHandleFromBlacklistBankbyKeyIndex (int lp_blacklistOwner, int lp_keyIndex, int lp_saveType) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if (gf_IsValidBankKeyIndex(lv__bank, gf_GetBlacklistBankSection(lp_saveType), lp_keyIndex)) {
        return BankKeyName(lv__bank, gf_GetBlacklistBankSection(lp_saveType), lp_keyIndex);
    }
    else {
        return null;
    }
}
int gf_GetLastBlacklistBankKeyIndex (int lp_blacklistOwner) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if ((lv__bank != null)) {
        return (BankKeyCount(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST)-1);
    }
    else {
        return -1;
    }
}
void gf_UpdateLastPlayersinBlacklist (int lp_user) {
    // Variable Declarations
    bank lv__bank;
    string lv__s;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto81CFC5C6_g;
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_user);
    lv__s = "";
    // Implementation
    if ((lv__bank != null)) {
        BankSectionRemove(lv__bank, gf_GetBlacklistBankSection(0));
        auto81CFC5C6_g = gf_StartingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto81CFC5C6_g, lv__i);
            if (lv__i < 0) { break; }
            BankValueSetFromText(lv__bank, gf_GetBlacklistBankSection(0), gf_RecordedHandleofUser(lv__i), gf_RecordedUserName(lv__i));
        }
        BankSave(lv__bank);
    }
}
void gf_AddUsertoBlacklist (int lp_blacklistOwner, text lp_userName, string lp_userHandle) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if ((lv__bank != null) && (lp_userHandle != null) && (BankKeyExists(lv__bank, gf_GetBlacklistBankSection(1), lp_userHandle) == false)) {
        BankValueSetFromText(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST, lp_userHandle, lp_userName);
        BankSave(lv__bank);
        gf_UpdateBlacklistRegisteredUserListBox(lp_blacklistOwner);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/C444CD64"));
    }
}
void gf_RemoveUserfromBlacklist (int lp_blacklistOwner, string lp_handle) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if ((lv__bank != null) && (lp_handle != null) && (BankKeyExists(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST, lp_handle) == true)) {
        BankKeyRemove(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST, lp_handle);
        BankSave(lv__bank);
        gf_UpdateBlacklistRegisteredUserListBox(lp_blacklistOwner);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/F29830C3"));
    }
}
void gf_RemoveUserfromBlacklistbyIndex (int lp_blacklistOwner, int lp_index) {
    // Variable Declarations
    bank lv__bank;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if (gf_IsValidBankKeyIndex(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST, lp_index)) {
        BankKeyRemove(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST, BankKeyName(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST, lp_index));
        BankSave(lv__bank);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/C6B94EDF"));
    }
}
void gf_UpdateUserNameInBlackistBank (int lp_blacklistOwner) {
    // Variable Declarations
    bank lv__bank;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto45080D66_g;
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_blacklistOwner);
    // Implementation
    if ((lv__bank != null)) {
        auto45080D66_g = gf_AllPlayingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto45080D66_g, lv__i);
            if (lv__i < 0) { break; }
            if ((gf_IsUserinBlacklistBank(lp_blacklistOwner, lv__i, 1) == true)) {
                BankValueSetFromText(lv__bank, gv_bLACKLIST_BANK_SECTION_BLACKLIST, gf_RecordedHandleofUser(lv__i), PlayerName(lv__i));
                BankSave(lv__bank);
            }
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/BA539A0C"));
    }
}
bool gf_IsReceivingPlayer (int lp_sender, int lp_receiver) {
    // Variable Declarations
    int lv__senderIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__senderIndex = gf_GetUserIndex(lp_sender);
    // Implementation
    if ((lv__senderIndex != -1) && gf_IsUser(lp_receiver)) {
        return PlayerGroupHasPlayer(gv_chatInfoArray[lv__senderIndex].lv_notReceivingPlayers, lp_receiver);
    }
    else {
        return false;
    }
}
string gf_RemoveAngleBracketsInString (string lp_string) {
    // Variable Declarations
    string lv__result;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__result = lp_string;
    // Implementation
    if ((lv__result != null)) {
        lv__result = StringReplaceWord(lv__result, "<", "[", c_stringReplaceAll, c_stringCase);
        lv__result = StringReplaceWord(lv__result, ">", "]", c_stringReplaceAll, c_stringCase);
        return lv__result;
    }
    else {
        return null;
    }
}
playergroup gf_GetChatReceivingPlayers (int lp_sender) {
    // Variable Declarations
    playergroup lv__pg;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__pg = PlayerGroupAll();
    // Implementation
    if (gf_IsUser(lp_sender)) {
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(gf_GetChatNotReceivingUsers(lp_sender), lv__pg);
        return lv__pg;
    }
    else {
        return PlayerGroupEmpty();
    }
}
playergroup gf_GetChatNotReceivingUsers (int lp_sender) {
    // Variable Declarations
    int lv__user;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = gf_GetUserIndex(lp_sender);
    // Implementation
    if ((lv__user != -1)) {
        return PlayerGroupCopy(gv_chatInfoArray[lv__user].lv_notReceivingPlayers);
    }
    else {
        return PlayerGroupEmpty();
    }
}
void gf_ChatMesssageFromGamePlayer (int lp_gamePlayer, string lp_message) {
    // Variable Declarations
    int lv__userDisguiseOptionApplied;
    playergroup lv__pg;
    string lv__message;
    int lv__cell;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userDisguiseOptionApplied = gf_GetDisguiseTargetUserifUserisChangeling(lp_gamePlayer);
    lv__message = gf_RemoveAngleBracketsInString(lp_message);
    lv__cell = ge_Cell_None;
    // Implementation
    if ((lv__message != null)) {
        if ((gf_GameState() == ge_GameState_GameEnd)) {
            if (gf_IsUserAlive(lp_gamePlayer)) {
                gf_DisplayTransmissionStyleMessage(lp_gamePlayer, StringToText(lv__message), gf_GetChatReceivingPlayers(lp_gamePlayer), gf_GetAccessLevelofCell(gf_GetCellwhereUnitExists(gf_CharacterUnit(lp_gamePlayer))));
            }
            else {
                gf_DisplayObserverStyleMessage(lp_gamePlayer, StringToText(lv__message), gf_GetChatReceivingPlayers(lp_gamePlayer));
            }
        }
        else if (gf_IsUserAlive(lp_gamePlayer) && ((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)) && (gf_CharacterHasStatusFlag(lp_gamePlayer, ge_CharacterStatusFlag_Abducted) == false)) {
            if ((gf_GetPowerState() == ge_PowerStateType_PowerOn)) {
                lv__cell = gf_GetCellwhereUnitExists(gf_CharacterUnit(lp_gamePlayer));
                if ((gf_GetAccessLevelofCell(lv__cell) != ge_AccessLevel_Restricted)) {
                    lv__pg = PlayerGroupAll();
                }
                else {
                    lv__pg = gf_GetUsersInCellwithObs(lv__cell);
                }
                gf_RemoveNotReceivingUsersFromPlayers(lp_gamePlayer, lv__pg);
                gf_DisplayTransmissionStyleMessage(lv__userDisguiseOptionApplied, StringToText(lv__message), lv__pg, gf_GetAccessLevelofCell(lv__cell));
            }
            else {
                lv__pg = gf_GetChatReceivingPlayers(lp_gamePlayer);
                gf_DisplayTransmissionStyleMessage(lv__userDisguiseOptionApplied, StringToText(lv__message), lv__pg, ge_AccessLevel_Normal);
            }
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/4A212318"));
    }
}
void gf_ChatMesssageFromObservers (int lp_observer, string lp_message) {
    // Variable Declarations
    int lv__userDisguiseOptionApplied;
    playergroup lv__pg;
    string lv__message;
    int lv__cell;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userDisguiseOptionApplied = gf_GetDisguiseTargetUserifUserisChangeling(lp_observer);
    lv__message = gf_RemoveAngleBracketsInString(lp_message);
    lv__cell = ge_Cell_None;
    // Implementation
    if ((lv__message != null)) {
        if ((gf_GameState() == ge_GameState_GameEnd)) {
            lv__pg = PlayerGroupAll();
        }
        else {
            lv__pg = gf_GetAllObservers();
        }
        gf_RemoveNotReceivingUsersFromPlayers(lp_observer, lv__pg);
        gf_DisplayObserverStyleMessage(lp_observer, StringToText(gf_RemoveAngleBracketsInString(lv__message)), lv__pg);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/BE4567DA"));
    }
}
void gf_RemoveNotReceivingUsersFromPlayers (int lp_sender, playergroup lp_targetUsers) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_sender) && (lp_targetUsers != null)) {
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(gf_GetChatNotReceivingUsers(lp_sender), lp_targetUsers);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/050C431C"));
    }
}
void gf_AddUsertoNotReceivingUserGroup (int lp_sender, int lp_receiver) {
    // Variable Declarations
    int lv__senderUserIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__senderUserIndex = gf_GetUserIndex(lp_sender);
    // Implementation
    if ((lv__senderUserIndex != -1) && gf_IsUser(lp_receiver) && (lp_sender != lp_receiver)) {
        PlayerGroupAdd(gv_chatInfoArray[lv__senderUserIndex].lv_notReceivingPlayers, lp_receiver);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/DFA5AA3B"));
    }
}
void gf_RemoveUserfromNotRecievingUserGroup (int lp_sender, int lp_reciever) {
    // Variable Declarations
    int lvsenderUserIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lvsenderUserIndex = gf_GetUserIndex(lp_sender);
    // Implementation
    if ((lvsenderUserIndex != -1) && gf_IsUser(lp_reciever) && (PlayerGroupHasPlayer(gv_chatInfoArray[lvsenderUserIndex].lv_notReceivingPlayers, lp_reciever) == true)) {
        PlayerGroupRemove(gv_chatInfoArray[lvsenderUserIndex].lv_notReceivingPlayers, lp_reciever);
        gv_chat_notReceiving_exchange_changling_and_eattarget[lp_reciever-1] = true;
    }
    gv_chat_notReceiving_exchange_changling_and_eattarget[lp_reciever-1] = false;
}
void gf_ClearMessageinChatArea (playergroup lp_pg) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pg != null)) {
        UIClearMessages(lp_pg, c_messageAreaDebug);
    }
}
int gf_GetGlobalEnvironmentState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_globalEnvironmentState;
}
int gf_GetLocalEnvironmentState (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_environmentInfo[lv__userIndex].lv_localState;
    }
    else {
        return ge_EnvironmentState_None;
    }
}
void gf_SetEnvironmentSFXforPlayer (int lp_player, int lp_state) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    int auto77091D5C_val;
    // Variable Initialization
    // Implementation
    lv__index = gf_GetUserIndex(lp_player);
    if ((lv__index < 0)) {
        return ;
    }
    if ((gv_environmentInfo[lv__index].lv_repeatingSound != null)) {
        SoundStop(gv_environmentInfo[lv__index].lv_repeatingSound, false);
        gv_environmentInfo[lv__index].lv_repeatingSound = null;
    }
    auto77091D5C_val = lp_state;
    if (auto77091D5C_val == ge_EnvironmentState_None) {
    }
    else if (auto77091D5C_val == ge_EnvironmentState_Normal) {
        PlayerSetLighting(lp_player, gv_eNVIRONMENT_LIGHT_NORMAL, 0.3);
    }
    else if (auto77091D5C_val == ge_EnvironmentState_Emergency) {
        PlayerSetLighting(lp_player, gv_eNVIRONMENT_LIGHT_EMERGENCY, 1.0);
        SoundPlayForPlayer(gv_eNVIRONMENT_SOUND_REPEAT_ALARM, lp_player, PlayerGroupSingle(lp_player), 100.0, 0.0);
        gv_environmentInfo[lv__index].lv_repeatingSound = SoundLastPlayed();
    }
    else if (auto77091D5C_val == ge_EnvironmentState_Explosion) {
        PlayerSetLighting(lp_player, gv_eNVIRONMENT_LIGHT_EMERGENCY, 1.0);
    }
    else if (auto77091D5C_val == ge_EnvironmentState_BlackOut) {
        PlayerSetLighting(lp_player, gv_eNVIRONMENT_LIGHT_BLACKOUT, 0.3);
        SoundPlayForPlayer(gv_eNVIRONMENT_SOUND_ONCE_CLOSING, lp_player, PlayerGroupSingle(lp_player), 200.0, 0.0);
    }
    else if (auto77091D5C_val == ge_EnvironmentState_InIncinerator) {
        PlayerSetLighting(lp_player, gv_eNVIRONMENT_LIGHT_INCINERATOR, 0.3);
        SoundPlayForPlayer(gv_eNVIRONMENT_SOUND_REPEAT_INCINERATOR, lp_player, PlayerGroupSingle(lp_player), 200.0, 0.0);
        gv_environmentInfo[lv__index].lv_repeatingSound = SoundLastPlayed();
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/912224EC"));
    }
}
void gf_SetGlobalEnvironmentState (int lp_state) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto796BC7E8_g;
    // Variable Initialization
    // Implementation
    auto796BC7E8_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto796BC7E8_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gv_environmentInfo[gf_GetUserIndex(lv__i)].lv_localState == ge_EnvironmentState_None)) {
            gf_SetEnvironmentSFXforPlayer(lv__i, lp_state);
        }
    }
    if ((lp_state == ge_EnvironmentState_BlackOut)) {
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerDown");
    }
    else {
        if ((gf_GetGlobalEnvironmentState() == ge_EnvironmentState_BlackOut)) {
            libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerUp");
        }
    }
    gv_globalEnvironmentState = lp_state;
}
void gf_SetLocalEnvironmentStateforUser (int lp_user, int lp_state) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        if ((gv_environmentInfo[lv__userIndex].lv_localState != lp_state)) {
            gv_environmentInfo[lv__userIndex].lv_localState = lp_state;
            if ((gv_environmentInfo[lv__userIndex].lv_localState != ge_EnvironmentState_None)) {
                gf_SetEnvironmentSFXforPlayer(lp_user, lp_state);
            }
            else {
                gf_SetEnvironmentSFXforPlayer(lp_user, gf_GetGlobalEnvironmentState());
            }
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/671BF126"));
    }
}
void gf_SetLocalEnvironmentStateforUserwithObs (int lp_user, int lp_state) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto39C3242D_g;
    // Variable Initialization
    // Implementation
    if (gf_IsUser(lp_user)) {
        auto39C3242D_g = gf_GetUserwithObservers(lp_user);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto39C3242D_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetLocalEnvironmentStateforUser(lp_user, lp_state);
        }
    }
}
void gf_RemoveLocalEnvironmentStateforUser (int lp_player) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_player);
    // Implementation
    if ((lv__index != -1) && (gv_environmentInfo[lv__index].lv_localState != ge_EnvironmentState_None) && (true)) {
        gv_environmentInfo[lv__index].lv_localState = ge_EnvironmentState_None;
        gf_SetEnvironmentSFXforPlayer(lp_player, gf_GetGlobalEnvironmentState());
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/07F68A80"));
    }
}
void gf_RemoveLocalEnvironmentStateforUserwithObs (int lp_player, int lp_state) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto92ED54E8_g;
    // Variable Initialization
    // Implementation
    if ((gf_IsUser(lp_player) == false)) {
        return ;
    }
    auto92ED54E8_g = gf_GetUserwithObservers(lp_player);
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto92ED54E8_g, lv__i);
        if (lv__i < 0) { break; }
        gf_RemoveLocalEnvironmentStateforUser(lv__i);
    }
}
void gf_CopyEnvironmentStatefromUsertoUser (int lp_sourceUser, int lp_targetUser) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_sourceUser) && gf_IsUser(lp_targetUser)) {
        gf_SetLocalEnvironmentStateforUser(lp_targetUser, gf_GetLocalEnvironmentState(lp_sourceUser));
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/8ECFC20C"));
    }
}
void gf_SetMarineCharacterforUser (int lp_user, unit lp_unit) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__index != -1) && (lp_unit != null) && (UnitGetType(lp_unit) == gv_mAIRINE_UNITTYPE)) {
        gv_characterInfoArray[lv__index].lv_role = ge_CharacterRole_Marine;
        gf_SetUnitasCharacter(lp_user, lp_unit);
    }
    else {
        gf_Assert(ge_AssertType_ParameterException, "Set User as Marine");
    }
}
int gf_GetChangelingState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_changelingInfo.lv_state;
}
int gf_GetChangelingPlayer () {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int auto34C40A90_ae = gv_uSER_LAST;
    const int auto34C40A90_ai = 1;
    // Variable Initialization
    // Implementation
    lv__i = gv_uSER_FIRST;
    for ( ; ( (auto34C40A90_ai >= 0 && lv__i <= auto34C40A90_ae) || (auto34C40A90_ai < 0 && lv__i >= auto34C40A90_ae) ) ; lv__i += auto34C40A90_ai ) {
        if (gf_IsChangelingUser(lv__i)) {
            return lv__i;
        }
    }
    return c_playerAny;
}
int gf_GetDisguiseTargetUser () {
    // Automatic Variable Declarations
    // Implementation
    return gv_changelingInfo.lv_disguiseTargetPlayer;
}
int gf_GetDisguiseTargetUserifUserisChangeling (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_user)) {
        if (gf_IsChangelingUser(lp_user)) {
            return gf_GetDisguiseTargetUser();
        }
        else {
            return lp_user;
        }
    }
    else {
        return c_playerAny;
    }
}
int gf_GetChangelingDisguiseState () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_GetChangelingPlayer() == c_playerAny)) {
        return ge_DisguiseState_None;
    }
    return gv_changelingInfo.lv_disguiseState;
}
bool gf_ChangelingCanDisguise () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CharacterUnit(gf_GetChangelingPlayer()) != null)) {
        return gv_changelingInfo.lv_canDisguise;
    }
    else {
        return false;
    }
}
bool gf_ChangelingCanEat () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CharacterUnit(gf_GetChangelingPlayer()) != null)) {
        return gv_changelingInfo.lv_canEat;
    }
    else {
        return false;
    }
}
bool gf_ChangelingCanUseAbility () {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUserAlive(gf_GetChangelingPlayer())) {
        return gv_changelingInfo.lv_canUseChangelingAbility;
    }
    else {
        return false;
    }
}
timer gf_GetChangelingTimer () {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((gf_GetChangelingPlayer() == c_playerAny)) {
        return null;
    }
    return gv_changelingInfo.lv_timer;
}
bool gf_IsChangelingCloaked () {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUserAlive(gf_GetChangelingPlayer()) && ((UnitHasBehavior2(gf_CharacterUnit(gf_GetChangelingPlayer()), "ChangelingCloack") == true) || (UnitHasBehavior2(gf_CharacterUnit(gf_GetChangelingPlayer()), "PowerStateOff") == true))) {
        return true;
    }
    else {
        return false;
    }
}
void gf_SetUserasChangeling (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_changelingInfo.lv_isChangelingPlayerInitialized == true)) {
        gf_Assert(ge_AssertType_AlreadyInitialized, "Set User as Changeling");
    }
    if (gf_IsUser(lp_player) && (lp_unit != null) && ((UnitGetType(lp_unit) == gv_cHANGELING_UNITTYPE_NORMAL_FORM) || (UnitGetType(lp_unit) == gv_cHANGELING_UNITTYPE_DISGUISING_FORM))) {
        gv_characterInfoArray[gf_GetUserIndex(lp_player)].lv_role = ge_CharacterRole_Changeling;
        gv_changelingInfo.lv_disguiseTargetPlayer = lp_player;
        if ((UnitGetType(lp_unit) == gv_cHANGELING_UNITTYPE_NORMAL_FORM)) {
            gv_changelingInfo.lv_disguiseState = ge_DisguiseState_Exposed;
        }
        else {
            gv_changelingInfo.lv_disguiseState = ge_DisguiseState_Disguising;
        }
        gf_SetUnitasCharacter(lp_player, lp_unit);
    }
    else {
        gf_Assert(ge_AssertType_ParameterException, "Set User as Changeling");
    }
}
void gf_SetTargetPlayerofDisguise (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player)) {
        gv_changelingInfo.lv_disguiseTargetPlayer = lp_player;
    }
    else {
        gf_Assert(ge_AssertType_ParameterException, "Set Target Player of Disguise");
    }
}
void gf_SetChangelingState (int lp_state) {
    // Automatic Variable Declarations
    int auto901A106B_val;
    // Implementation
    gv_changelingInfo.lv_state = lp_state;
    auto901A106B_val = lp_state;
    if (auto901A106B_val == ge_ChangelingState_HasEaten) {
        gv_changelingInfo.lv_canEat = false;
        gv_changelingInfo.lv_canDisguise = true;
        TimerStart(gf_GetChangelingTimer(), gv_cHANGELING_TIME_FOR_EAT, false, c_timeGame);
        TimerPause(gf_GetChangelingTimer(), false);
    }
    else if (auto901A106B_val == ge_ChangelingState_HuntingWithDisguise) {
        gv_changelingInfo.lv_canEat = true;
        gv_changelingInfo.lv_canDisguise = true;
        TimerStart(gf_GetChangelingTimer(), gv_cHANGELING_TIME_DISGUISE_LIMIT, false, c_timeGame);
        TimerPause(gf_GetChangelingTimer(), false);
    }
    else if (auto901A106B_val == ge_ChangelingState_HuntingWithoutDisguise) {
        gv_changelingInfo.lv_canEat = true;
        gv_changelingInfo.lv_canDisguise = false;
        if ((gf_GetChangelingDisguiseState() == ge_DisguiseState_Disguising)) {
            gf_SetChangelingDisguiseState(ge_DisguiseState_Exposed);
        }
    }
    else if (auto901A106B_val == ge_ChangelingState_Paused) {
        gv_changelingInfo.lv_canEat = false;
        gv_changelingInfo.lv_canDisguise = false;
        TimerPause(gf_GetChangelingTimer(), true);
    }
    else {
    }
    gf_UpdateWeaponStatusPanel(gf_GetChangelingPlayer(), gf_GetUserwithObservers(gf_GetChangelingPlayer()));
}
trigger auto_gf_SetChangelingDisguiseState_Trigger = null;
int auto_gf_SetChangelingDisguiseState_lp_state;
void gf_SetChangelingDisguiseState (int lp_state) {
    auto_gf_SetChangelingDisguiseState_lp_state = lp_state;
    if (auto_gf_SetChangelingDisguiseState_Trigger == null) {
        auto_gf_SetChangelingDisguiseState_Trigger = TriggerCreate("auto_gf_SetChangelingDisguiseState_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetChangelingDisguiseState_Trigger, false, false);
}
bool auto_gf_SetChangelingDisguiseState_TriggerFunc (bool testConds, bool runActions) {
    int lp_state = auto_gf_SetChangelingDisguiseState_lp_state;
    // Variable Declarations
    int lv__changelingPlayer;
    unit lv__changeling;
    // Automatic Variable Declarations
    int auto48E0D341_val;
    // Variable Initialization
    lv__changelingPlayer = gf_GetChangelingPlayer();
    lv__changeling = gf_CharacterUnit(lv__changelingPlayer);
    // Implementation
    if ((lv__changeling != null) && (gf_GetChangelingDisguiseState() != lp_state)) {
        auto48E0D341_val = lp_state;
        if (auto48E0D341_val == ge_DisguiseState_Disguising) {
            UnitIssueOrder(gf_CharacterUnit(lv__changelingPlayer), Order(AbilityCommand("DisguiseAsMarineWithoutShield", 0)), c_orderQueueReplace);
            UnitCreateEffectUnit(lv__changeling, "DisguiseMimic", UnitGroupUnit(UnitGroup("Forge", gf_GetDisguiseTargetUser(), RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), 1));
            SoundPlayOnUnitForPlayer(SoundLink("Changeling_Disguise", -1), c_maxPlayers, gf_GetUserwithObservers(lv__changelingPlayer), lv__changeling, 0.0, 100.0, 0.0);
            libNtve_gf_SetAlliance(gv_pLAYER_ENEMY, gf_GetChangelingPlayer(), libNtve_ge_AllianceSetting_Enemy);
        }
        else if (auto48E0D341_val == ge_DisguiseState_Exposed) {
            UnitCreateEffectUnit(lv__changeling, "DisguiseMimic", UnitGroupUnit(UnitGroup("Forge", lv__changelingPlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), 1));
            UnitIssueOrder(lv__changeling, Order(AbilityCommand("DisguiseAsMarineWithoutShield2", 0)), c_orderQueueReplace);
            ActorCreate(ActorScopeFromUnit(gf_CharacterUnit(lv__changelingPlayer)), "SquibTransfusion", null, null, null);
            SoundPlayOnUnitForPlayer(SoundLink("Changeling_Ready_Spell", -1), c_maxPlayers, PlayerGroupAll(), lv__changeling, 0.0, 100.0, 0.0);
            libNtve_gf_SetAlliance(gv_pLAYER_ENEMY, gf_GetChangelingPlayer(), libNtve_ge_AllianceSetting_Ally);
        }
        else {
        }
        gv_changelingInfo.lv_disguiseState = lp_state;
        gf_UpdateWeaponStatusPanel(gf_GetChangelingPlayer(), gf_GetUserwithObservers(gf_GetChangelingPlayer()));
    }
    return true;
}
void gf_AllowDisallowUseChangelingAbility (bool lp_allowdisallow) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_allowdisallow == true)) {
        gv_changelingInfo.lv_canUseChangelingAbility = true;
    }
    else {
        gv_changelingInfo.lv_canUseChangelingAbility = false;
    }
}
void gf_SetCharacterRole (int lp_player, int lp_role) {
    // Automatic Variable Declarations
    // Implementation
    gv_characterInfoArray[gf_GetUserIndex(lp_player)].lv_role = lp_role;
}
void gf_BehaviorTickAction (int lp_user) {
    // Variable Declarations
    int lv__playerIndex;
    unit lv__u;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__playerIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if (gf_IsUserAlive(lp_user)) {
        if ((gf_CharacterState(lp_user) == ge_PlayerCharacterState_Move)) {
            UnitIssueOrder(gf_CharacterUnit(lp_user), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gf_CharacterUnit(lp_user)), 1.0, (CameraGetYaw(lp_user) + gv_moveInfoArray[gf_GetUserIndex(lp_user)].lv_directionAngle))), c_orderQueueReplace);
        }
        else if ((gf_CharacterState(lp_user) == ge_PlayerCharacterState_Idle)) {
            UnitIssueOrder(gf_CharacterUnit(lp_user), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetFacing(gf_CharacterUnit(lp_user), CameraGetYaw(lp_user), 0.25);
        }
        else if (((gf_CharacterState(lp_user) == ge_PlayerCharacterState_Firing) || (gf_CharacterState(lp_user) == ge_PlayerCharacterState_EatingChangeling))) {
            UnitIssueOrder(gf_CharacterUnit(lp_user), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetFacing(gf_CharacterUnit(lp_user), CameraGetYaw(lp_user), 0.0625);
        }
        else if ((gf_CharacterState(lp_user) == ge_PlayerCharacterState_ControlingDevice)) {
            lv__u = gf_GetDeviceInUse(lp_user);
            if ((lv__u != null)) {
                if ((DistanceSquaredBetweenPoints(UnitGetPosition(gf_CharacterUnit(lp_user)), UnitGetPosition(gf_GetDeviceInUse(lp_user))) == 0.0)) {
                    UnitSetFacing(gf_CharacterUnit(lp_user), (UnitGetFacing(lv__u)+180), 0.25);
                }
                else {
                    UnitIssueOrder(gf_CharacterUnit(lp_user), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv__u)), c_orderQueueReplace);
                }
            }
            else {
                gf_CustomDebugMessage(StringExternal("Param/Value/28AF0736"));
            }
        }
        else if (true) {
            UnitIssueOrder(gf_CharacterUnit(lp_user), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetFacing(gf_CharacterUnit(lp_user), CameraGetYaw(lp_user), 0.0625);
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/45293D58"));
    }
}
void gf_SetCharacterStatetoControllingDevice (int lp_user, unit lp_device) {
    // Variable Declarations
    int lv__i;
    int lv__userIndex;
    int lv__deviceType;
    playergroup lv__pg;
    // Automatic Variable Declarations
    playergroup auto79BA693B_g;
    playergroup auto8CB54A04_g;
    playergroup auto7346D829_g;
    playergroup auto701D1FFA_g;
    int autoCEC45DD3_val;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__deviceType = gf_DeviceType(lp_device);
    lv__pg = gf_GetUserwithObservers(lp_user);
    // Implementation
    if (((lv__userIndex == -1) || (gf_IsUserAlive(lp_user) == false) || (gf_DeviceState(lp_device) != ge_DeviceState_Idle))) {
        gf_CustomDebugMessage(StringExternal("Param/Value/4B8C64FA"));
        return ;
    }
    gv_characterInfoArray[lv__userIndex].lv_state = ge_PlayerCharacterState_ControlingDevice;
    gv_characterInfoArray[lv__userIndex].lv_controllingDevice = lp_device;
    gf_SetDeviceStatetoInUse(lp_device, lp_user);
    gf_ClearDirectiveMessageforPlayerwithObs(lp_user);
    auto79BA693B_g = lv__pg;
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto79BA693B_g, lv__i);
        if (lv__i < 0) { break; }
        gf_ShowHideCustomMinimap(lv__i, false);
        gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_DeviceHUD);
        gf_SetTargetDeviceofDevicePanel(lv__i, lp_device);
    }
    if ((gf_HasDeviceFlag(lp_device, ge_DeviceFlag_UseMouse) == true)) {
        auto7346D829_g = lv__pg;
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto7346D829_g, lv__i);
            if (lv__i < 0) { break; }
            gf_CustomizedShowHideMouseCursor(lv__i, true);
        }
    }
    else {
        auto8CB54A04_g = lv__pg;
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto8CB54A04_g, lv__i);
            if (lv__i < 0) { break; }
            gf_CustomizedShowHideMouseCursor(lv__i, false);
        }
    }
    auto701D1FFA_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto701D1FFA_g, lv__i);
        if (lv__i < 0) { break; }
        PlayerSetAlliance(lv__i, c_allianceIdPushable, lp_user, true);
    }
    autoCEC45DD3_val = gf_DeviceType(lp_device);
    if (autoCEC45DD3_val == ge_DeviceType_Monitor) {
        gf_ActionsforControllingMonitor(lp_user, lp_device);
    }
    else if (autoCEC45DD3_val == ge_DeviceType_SecurityController) {
        gf_ActionsforControllingSecurityController(lp_user);
    }
    else if (autoCEC45DD3_val == ge_DeviceType_PowerController) {
        gf_ActionsforControllingPowerController(lp_user);
    }
    else if (autoCEC45DD3_val == ge_DeviceType_RadiationDiagnosticTester) {
        gf_ActionsforControllingRDT(lp_user);
    }
    else if (autoCEC45DD3_val == ge_DeviceType_Archive) {
        gf_ActionforReadingArchive(lp_user);
    }
    else if (autoCEC45DD3_val == ge_DeviceType_AberrationCage) {
        gf_ActionsforReleasingAberration(lp_user);
    }
    else if (autoCEC45DD3_val == ge_DeviceType_Incinerator) {
        gf_ActionsforControllingIncinerator(lp_user);
    }
    else if (autoCEC45DD3_val == ge_DeviceType_MedicalBot) {
        gf_ActionsforControllingMedicalBot(lp_device, lp_user);
    }
    else if (autoCEC45DD3_val == ge_DeviceType_SateliteController) {
        gf_ActionsforControllingSateliteController(lp_user, lp_device);
    }
    else {
    }
}
void gf_RemoveCharacterStateofControllingDevice (int lp_player) {
    // Variable Declarations
    int lv__i;
    unit lv__device;
    int lv__index;
    playergroup lv__pg;
    // Automatic Variable Declarations
    int autoF08BE0CA_val;
    playergroup auto02B53EE8_g;
    playergroup auto0B2B6ACF_g;
    playergroup auto4C415E25_g;
    // Variable Initialization
    lv__device = gf_GetDeviceInUse(lp_player);
    lv__index = gf_DeviceIndex(lv__device);
    lv__pg = gf_GetUserwithObservers(lp_player);
    // Implementation
    if (((gf_CharacterState(lp_player) != ge_PlayerCharacterState_ControlingDevice) || (lv__device == null))) {
        gf_CustomDebugMessage(StringExternal("Param/Value/B05C3B5F"));
        return ;
    }
    autoF08BE0CA_val = gf_DeviceType(lv__device);
    if (autoF08BE0CA_val == ge_DeviceType_Monitor) {
        gf_ActionsforStopControllingMonitor(lp_player);
    }
    else if (autoF08BE0CA_val == ge_DeviceType_PowerController) {
        gf_ActionsforStopControllingPowerController(lp_player);
    }
    else if (autoF08BE0CA_val == ge_DeviceType_RadiationDiagnosticTester) {
        gf_ActionsforStopContollingRDT(lp_player);
    }
    else if (autoF08BE0CA_val == ge_DeviceType_SecurityController) {
        gf_ActionsforStopControllingSecurityController(lp_player);
    }
    else if (autoF08BE0CA_val == ge_DeviceType_Incinerator) {
        gf_ActionsforStopControllingIncinerator(lp_player);
    }
    else if (autoF08BE0CA_val == ge_DeviceType_SateliteController) {
        gf_ActionsforStopControllingSateliteController(lp_player);
    }
    else if (autoF08BE0CA_val == ge_DeviceType_MedicalBot) {
        gf_ActionsforStopControllingMedicalBot(lp_player);
    }
    else if (autoF08BE0CA_val == ge_DeviceType_Archive) {
        gf_ActionforStopReadingArchive(lp_player);
    }
    else if (autoF08BE0CA_val == ge_DeviceType_AberrationCage) {
        gf_ActionsforStopReleasingAberration(lp_player);
    }
    else {
    }
    gf_SetDeviceStatetoNormalState(lv__device);
    if ((gf_HasDeviceFlag(lv__device, ge_DeviceFlag_UseCamera) == false)) {
        auto0B2B6ACF_g = lv__pg;
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto0B2B6ACF_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCameraModetoTPS(lv__i, gf_CharacterUnit(lp_player), 0.0, 0.0, true);
        }
    }
    else {
        auto02B53EE8_g = lv__pg;
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto02B53EE8_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCameraModetoTPS(lv__i, gf_CharacterUnit(lp_player), 0.0, 0.0, false);
        }
    }
    auto4C415E25_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto4C415E25_g, lv__i);
        if (lv__i < 0) { break; }
        PlayerSetAlliance(lv__i, c_allianceIdPushable, lp_player, false);
    }
    gf_SetCharacterStatetoNormalState(lp_player);
}
void gf_ActionsforReleasingAberration (int lp_player) {
    // Variable Declarations
    unit lv__device;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__device = gf_GetDeviceInUse(lp_player);
    // Implementation
    if ((gf_DeviceType(lv__device) != ge_DeviceType_AberrationCage)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/8CDBDAF2"));
        return ;
    }
    gf_StartReleasingAberration(lv__device, lp_player, gv_aBCAGE_TIME_RELEASING);
}
void gf_ActionsforStopReleasingAberration (int lp_player) {
    // Variable Declarations
    unit lv__device;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__device = gf_GetDeviceInUse(lp_player);
    // Implementation
    if ((gf_DeviceType(lv__device) != ge_DeviceType_AberrationCage)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/9BCFF42F"));
        return ;
    }
    if ((gf_GetAberrationCageState(lv__device) == ge_AberrationCageState_InReleasing)) {
        gf_CancelReleasingAberration(lv__device);
    }
    gf_ClearDirectiveMessageforPlayerwithObs(lp_player);
}
void gf_ActionforReadingArchive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_Archive)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/01D63E47"));
        return ;
    }
    gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/76DB52D4"), lp_player);
}
void gf_ActionforStopReadingArchive (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_Archive)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/4EA27BD2"));
        return ;
    }
}
void gf_ActionsforControllingIncinerator (int lp_player) {
    // Variable Declarations
    text lv__t;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_Incinerator)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/5E339444"));
        return ;
    }
    TextExpressionSetToken("Param/Expression/18DD97CC", "A", lv__t);
    gf_DisplayDirectiveMessageforPlayerwithObs(TextExpressionAssemble("Param/Expression/18DD97CC"), lp_player);
}
void gf_ActionsforStopControllingIncinerator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_Incinerator)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/D5076989"));
        return ;
    }
    gf_CustomizedShowHideMouseCursor(lp_player, false);
}
void gf_ActionsforControllingMedicalBot (unit lp_medicalBot, int lp_user) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_user)) != ge_DeviceType_MedicalBot)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/EF8CEF61"));
        return ;
    }
    if ((UnitGetPropertyFixed(gf_CharacterUnit(lp_user), c_unitPropLife, c_unitPropCurrent) >= UnitTypeGetProperty(UnitGetType(gf_CharacterUnit(lp_user)), c_unitPropLifeMax))) {
        gf_DisplayInformationMessage(StringExternal("Param/Value/AD0E4901"), gf_GetUserwithObservers(lp_user));
        gf_RemoveCharacterStateofControllingDevice(lp_user);
        return ;
    }
    gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/2B9815B5"), lp_user);
    gf_OrderMedicalBottoStartHealing(lp_medicalBot, lp_user, gv_mEDICALBOT_TIME_PREPARING);
}
void gf_ActionsforStopControllingMedicalBot (int lp_player) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_MedicalBot)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/E983EF64"));
        return ;
    }
    if (((gv_medicalBotInfo.lv_state == ge_MedicalBotState_Preparing) || (gv_medicalBotInfo.lv_state == ge_MedicalBotState_Healing))) {
        gv_medicalBotInfo.lv_state = ge_MedicalBotState_Canceled;
    }
    else {
        gv_medicalBotInfo.lv_state = ge_MedicalBotState_Idle;
    }
    gf_ClearDirectiveMessageforPlayerwithObs(lp_player);
    UnitIssueOrder(gv_medicalBotInfo.lv_healer, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
}
void gf_ActionsforControllingMonitor (int lp_user, unit lp_monitor) {
    // Variable Declarations
    int lv__monitorIndex;
    int lv__i;
    unit lv__u;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitorIndex = gf_GetMonitorIndex(lp_monitor);
    // Implementation
    if ((lv__monitorIndex == -1)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/B8020EA1"));
        return ;
    }
    gf_EnableDisableRevealerforEntireMap(false, lp_user);
    gf_SetUsertoWatchEntireCellArea(lp_user, gf_GetMonitoringCell(lp_monitor));
    gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/5B38C671"), lp_user);
    TextExpressionSetToken("Param/Expression/2E1E11C6", "num", IntToText((lv__monitorIndex+1)));
    gf_WriteRecordtoArchive(lp_user, lp_monitor, ge_Cell_SecurityCell, TextExpressionAssemble("Param/Expression/2E1E11C6"));
}
void gf_ActionsforStopControllingMonitor (int lp_user) {
    // Variable Declarations
    unit lv__monitor;
    int lv__monitorIndex;
    int lv__i;
    unit lv__u;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitor = gf_GetDeviceInUse(lp_user);
    lv__monitorIndex = gf_GetMonitorIndex(lv__monitor);
    // Implementation
    if ((gf_DeviceType(lv__monitor) != ge_DeviceType_Monitor)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/5F38643C"));
        return ;
    }
    gf_ClearRevealerforPlayer(lp_user);
    gf_EnableDisableRevealerforEntireMap(true, lp_user);
}
void gf_ActionsforControllingPowerController (int lp_player) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_PowerController)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/30D8DDB4"));
        return ;
    }
}
void gf_ActionsforStopControllingPowerController (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_PowerController)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/7BF2D426"));
        return ;
    }
    gf_ClearDirectiveMessageforPlayerwithObs(lp_player);
}
void gf_ActionsforControllingRDT (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_RadiationDiagnosticTester)) {
        return ;
    }
}
void gf_ActionsforStopContollingRDT (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_RadiationDiagnosticTester)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/87CE64DA"));
        return ;
    }
    if ((gv_rdtInfo.lv_state == ge_RDTState_Scanning)) {
        gf_RDTCancelScanning();
    }
}
void gf_ActionsforControllingSateliteController (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_SateliteController)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/05E747C7"));
        return ;
    }
    gf_UpdateDirectionMessageSCC(lp_player);
}
void gf_ActionsforStopControllingSateliteController (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_SateliteController)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/1DE9E4BE"));
        return ;
    }
}
void gf_ActionsforControllingSecurityController (int lp_player) {
    // Variable Declarations
    unit lv__device;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__device = gf_GetDeviceInUse(lp_player);
    // Implementation
    if ((gf_DeviceType(lv__device) != ge_DeviceType_SecurityController)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/F3F3DBDA"));
        return ;
    }
    gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/6C96E191"), lp_player);
}
void gf_ActionsforStopControllingSecurityController (int lp_player) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((gf_DeviceType(gf_GetDeviceInUse(lp_player)) != ge_DeviceType_SecurityController)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/C4B80D7B"));
        return ;
    }
}
unit gf_GetTargetGatetoUnlockforUser (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && (gf_CharacterState(lp_user) == ge_PlayerCharacterState_UnlockingGate)) {
        return gv_gateControlInfoArray[lv__userIndex].lv_targetGate;
    }
    else {
        return null;
    }
}
trigger auto_gf_SetCharacterStatetoUnlockingGate_Trigger = null;
int auto_gf_SetCharacterStatetoUnlockingGate_lp_user;
unit auto_gf_SetCharacterStatetoUnlockingGate_lp_gate;
void gf_SetCharacterStatetoUnlockingGate (int lp_user, unit lp_gate) {
    auto_gf_SetCharacterStatetoUnlockingGate_lp_user = lp_user;
    auto_gf_SetCharacterStatetoUnlockingGate_lp_gate = lp_gate;
    if (auto_gf_SetCharacterStatetoUnlockingGate_Trigger == null) {
        auto_gf_SetCharacterStatetoUnlockingGate_Trigger = TriggerCreate("auto_gf_SetCharacterStatetoUnlockingGate_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetCharacterStatetoUnlockingGate_Trigger, false, false);
}
bool auto_gf_SetCharacterStatetoUnlockingGate_TriggerFunc (bool testConds, bool runActions) {
    int lp_user = auto_gf_SetCharacterStatetoUnlockingGate_lp_user;
    unit lp_gate = auto_gf_SetCharacterStatetoUnlockingGate_lp_gate;
    // Variable Declarations
    int lv__userIndex;
    int lv__i;
    int lv__soundCnt;
    // Automatic Variable Declarations
    playergroup auto3D93B867_g;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && gf_IsUserAlive(lp_user) && gf_IsGate(lp_gate, ge_GateMode_Closed) && (gf_GetGateState(lp_gate) == ge_GateState_Idle)) {
        gv_characterInfoArray[lv__userIndex].lv_state = ge_PlayerCharacterState_UnlockingGate;
        gv_gateControlInfoArray[lv__userIndex].lv_targetGate = lp_gate;
        UnitSetCustomValue(lp_gate, gv_gATE_STATE_CUSTOMVALUE_INDEX, (ge_GateState_BeingUnlocked));
        CameraLockInput(lp_user, true);
        auto3D93B867_g = gf_GetUserwithObservers(lp_user);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto3D93B867_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_GateUnlockProcess);
        }
        TimerStart(gf_CharacterGenericTimer(lp_user), gv_cONTROL_GATE_TIME_FOR_UNLOCKING, false, c_timeGame);
        gf_ActivateProgressBarforTimer(gf_GetGateUnlockProcessProgressBar(), lp_user, gf_CharacterGenericTimer(lp_user));
        while ((TimerGetRemaining(gf_CharacterGenericTimer(lp_user)) > 0.0) && (gv_requestedToCancelUnlcokingGate[lv__userIndex] == false)) {
            if ((lv__soundCnt == 0)) {
                SoundPlayForPlayer(SoundLink("UI_BnetCountdownBeep", -1), c_maxPlayers, gf_GetUserwithObservers(lp_user), 100.0, 0.0);
                lv__soundCnt = 16;
            }
            else {
                lv__soundCnt = (lv__soundCnt-1);
            }
            Wait(0.0625, c_timeGame);
        }
        libNtve_gf_StopTimer(gf_CharacterGenericTimer(lp_user));
        if ((gv_requestedToCancelUnlcokingGate[lv__userIndex] == false)) {
            gf_OpenCloseGate(lp_gate, true);
            gf_SetCharacterStatetoNormalState(lp_user);
        }
        else {
            gv_requestedToCancelUnlcokingGate[lv__userIndex] = false;
            UnitSetCustomValue(lp_gate, gv_gATE_STATE_CUSTOMVALUE_INDEX, (ge_GateState_Idle));
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/39FB93C9"));
    }
    return true;
}
void gf_CancelUnlockingGateforUser (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    unit lv__gate;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__gate = gf_GetTargetGatetoUnlockforUser(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && (lv__gate != null)) {
        gv_requestedToCancelUnlcokingGate[lv__userIndex] = true;
        gf_SetCharacterStatetoNormalState(lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/6059AD89"));
    }
}
int gf_GetRemainingAmmo (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && (gf_UserPlayMode(lp_user) == ge_PlayMode_GamePlayer)) {
        return gv_shotInfoArray[lv__userIndex].lv_ammoRemaining;
    }
    else {
        return 0;
    }
}
bool gf_IsAllowedtoFire (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if (gf_IsUserAlive(lp_user) && (lv__userIndex != -1) && (gv_shotInfoArray[lv__userIndex].lv_canFire == true)) {
        return true;
    }
    else {
        return false;
    }
}
void gf_AllowDisallowUsertoFire (int lp_user, bool lp_bool) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        gv_shotInfoArray[lv__userIndex].lv_canFire = lp_bool;
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/196F3839"));
    }
}
void gf_SetAmmoAmount (int lp_user, int lp_amount) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        if (((lp_amount >= 0) && (lp_amount <= gv_sHOT_AMMO_MAX))) {
            gv_shotInfoArray[lv__userIndex].lv_ammoRemaining = lp_amount;
        }
        else {
            if ((lp_amount > gv_sHOT_AMMO_MAX)) {
                gv_shotInfoArray[lv__userIndex].lv_ammoRemaining = gv_sHOT_AMMO_MAX;
            }
            else {
                gv_shotInfoArray[lv__userIndex].lv_ammoRemaining = 0;
            }
        }
        gf_UpdateWeaponStatusforUserwithObservers(lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/D4028087"));
    }
}
bool gf_IsMoveKeyPressed (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_moveInfoArray[gf_GetUserIndex(lp_player)].lv_offset[0] != 0) || (gv_moveInfoArray[gf_GetUserIndex(lp_player)].lv_offset[1] != 0))) {
        return true;
    }
    else {
        return false;
    }
}
void gf_UpdateDirectionofUserMovement (int lp_player) {
    // Variable Declarations
    int lv__playerindex;
    // Automatic Variable Declarations
    int auto594EE06D_val;
    int auto934E045D_val;
    int autoF2518AE2_val;
    int auto21DA0E50_val;
    // Variable Initialization
    lv__playerindex = gf_GetUserIndex(lp_player);
    // Implementation
    if ((gf_IsUser(lp_player) == false)) {
        gf_Assert(ge_AssertType_ParameterException, "Update Direction of User Movement");
    }
    auto594EE06D_val = gv_moveInfoArray[lv__playerindex].lv_offset[1];
    if (auto594EE06D_val == 1) {
        autoF2518AE2_val = gv_moveInfoArray[lv__playerindex].lv_offset[0];
        if (autoF2518AE2_val == 0) {
            gv_moveInfoArray[lv__playerindex].lv_directionAngle = 0.0;
        }
        else if (autoF2518AE2_val == 1) {
            gv_moveInfoArray[lv__playerindex].lv_directionAngle = 315.0;
        }
        else {
            gv_moveInfoArray[lv__playerindex].lv_directionAngle = 45.0;
        }
    }
    else if (auto594EE06D_val == -1) {
        auto21DA0E50_val = gv_moveInfoArray[lv__playerindex].lv_offset[0];
        if (auto21DA0E50_val == 0) {
            gv_moveInfoArray[lv__playerindex].lv_directionAngle = 180.0;
        }
        else if (auto21DA0E50_val == 1) {
            gv_moveInfoArray[lv__playerindex].lv_directionAngle = 225.0;
        }
        else {
            gv_moveInfoArray[lv__playerindex].lv_directionAngle = 135.0;
        }
    }
    else {
        auto934E045D_val = gv_moveInfoArray[lv__playerindex].lv_offset[0];
        if (auto934E045D_val == -1) {
            gv_moveInfoArray[lv__playerindex].lv_directionAngle = 90.0;
        }
        else if (auto934E045D_val == 1) {
            gv_moveInfoArray[lv__playerindex].lv_directionAngle = 270.0;
        }
        else {
        }
    }
}
trigger auto_gf_MarineDeadMainGameQ_Trigger = null;
int auto_gf_MarineDeadMainGameQ_lp_killingPlayer;
int auto_gf_MarineDeadMainGameQ_lp_deadMarine;
void gf_MarineDeadMainGameQ (int lp_killingPlayer, int lp_deadMarine) {
    auto_gf_MarineDeadMainGameQ_lp_killingPlayer = lp_killingPlayer;
    auto_gf_MarineDeadMainGameQ_lp_deadMarine = lp_deadMarine;
    if (auto_gf_MarineDeadMainGameQ_Trigger == null) {
        auto_gf_MarineDeadMainGameQ_Trigger = TriggerCreate("auto_gf_MarineDeadMainGameQ_TriggerFunc");
    }
    TriggerExecute(auto_gf_MarineDeadMainGameQ_Trigger, false, false);
}
bool auto_gf_MarineDeadMainGameQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_killingPlayer = auto_gf_MarineDeadMainGameQ_lp_killingPlayer;
    int lp_deadMarine = auto_gf_MarineDeadMainGameQ_lp_deadMarine;
    // Variable Declarations
    int lv__deadPlayerIndex;
    unit lv__deadCharacter;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto20C25738_g;
    playergroup auto3FF5D01A_g;
    // Variable Initialization
    lv__deadPlayerIndex = gf_GetUserIndex(lp_deadMarine);
    lv__deadCharacter = gf_CharacterUnit(lp_deadMarine);
    // Implementation
    if ((lv__deadPlayerIndex != -1)) {
        if (gf_IsUser(lp_killingPlayer)) {
            if ((UnitGetType(gf_CharacterUnit(lp_killingPlayer)) != gv_cHANGELING_UNITTYPE_NORMAL_FORM)) {
                gf_WriteRecordtoArchive(lp_deadMarine, null, ge_Cell_None, StringExternal("Param/Value/A98D0330"));
                TextExpressionSetToken("Param/Expression/47569C51", "B", gf_RecordedUserNamewithColor(gf_GetDisguiseTargetUserifUserisChangeling(lp_killingPlayer)));
                TextExpressionSetToken("Param/Expression/47569C51", "A", gf_RecordedUserNamewithColor(lp_deadMarine));
                gf_DisplayAlertMessage(TextExpressionAssemble("Param/Expression/47569C51"), PlayerGroupAll());
            }
        }
        else if (true) {
            TextExpressionSetToken("Param/Expression/2AE97D18", "A", gf_RecordedUserNamewithColor(lp_deadMarine));
            gf_DisplayAlertMessage(TextExpressionAssemble("Param/Expression/2AE97D18"), PlayerGroupAll());
        }
        CameraLockInput(lp_deadMarine, true);
        auto20C25738_g = gf_GetUserwithObservers(lp_deadMarine);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto20C25738_g, lv__i);
            if (lv__i < 0) { break; }
            CameraFollowUnitGroup(lv__i, CameraFollowUnitGroupGet(lv__i), false, false);
            gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_None);
        }
        Wait(5.0, c_timeGame);
        if ((gf_GameState() != ge_GameState_MainGame)) {
            return true;
        }
        CutsceneFade(false, 1.0, Color(0,0,0), 100.0, gf_GetUserwithObservers(lp_deadMarine), true);
        if ((gf_GameState() != ge_GameState_MainGame)) {
            return true;
        }
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/717AC8F7"), lp_deadMarine);
        Wait(7.0, c_timeGame);
        if ((gf_GameState() != ge_GameState_MainGame)) {
            return true;
        }
        gf_ClearDirectiveMessageforPlayerwithObs(lp_deadMarine);
        CutsceneFade(true, 1.0, Color(0,0,0), 100.0, gf_GetUserwithObservers(lp_deadMarine), false);
        auto3FF5D01A_g = gf_GetObservers(lp_deadMarine);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto3FF5D01A_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetObserverTargetUser(lv__i, PlayerGroupPlayer(gf_AliveMarineUsers(), RandomInt(1, PlayerGroupCount(gf_AliveMarineUsers()))));
        }
        gf_SetUserModetoObserver(lp_deadMarine, PlayerGroupPlayer(gf_AliveMarineUsers(), RandomInt(1, PlayerGroupCount(gf_AliveMarineUsers()))));
    }
    return true;
}
void gf_SetCharacterStatetoWaitingInEscapeTrain (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && gf_IsUserAlive(lp_user)) {
        gv_characterInfoArray[lv__userIndex].lv_state = ge_PlayerCharacterState_WatingforUsersinTrain;
        gf_SetCurrentFullScreenDialogforPlayer(lp_user, ge_CustomFullScreenDialogType_None);
        gf_MoveUnitintoEscapeTrain(gf_CharacterUnit(lp_user));
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/3519AB32"));
    }
}
void gf_SetCharacterStatetoVoting (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoE2D486A7_g;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if (gf_IsUserAlive(lp_user) && (lv__userIndex != -1)) {
        gv_characterInfoArray[lv__userIndex].lv_state = ge_PlayerCharacterState_Voting;
        autoE2D486A7_g = gf_GetUserwithObservers(lp_user);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoE2D486A7_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_Vote);
        }
        gf_CustomizedShowHideMouseCursor(lp_user, true);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/CA6F8F45"));
    }
}
trigger auto_gf_IssueOrderforChangelingtoEat_Trigger = null;
int auto_gf_IssueOrderforChangelingtoEat_lp_targetUser;
void gf_IssueOrderforChangelingtoEat (int lp_targetUser) {
    auto_gf_IssueOrderforChangelingtoEat_lp_targetUser = lp_targetUser;
    if (auto_gf_IssueOrderforChangelingtoEat_Trigger == null) {
        auto_gf_IssueOrderforChangelingtoEat_Trigger = TriggerCreate("auto_gf_IssueOrderforChangelingtoEat_TriggerFunc");
    }
    TriggerExecute(auto_gf_IssueOrderforChangelingtoEat_Trigger, false, false);
}
bool auto_gf_IssueOrderforChangelingtoEat_TriggerFunc (bool testConds, bool runActions) {
    int lp_targetUser = auto_gf_IssueOrderforChangelingtoEat_lp_targetUser;
    // Automatic Variable Declarations
    // Implementation
    if ((gf_IsChangelingUser(lp_targetUser) == false) && gf_IsUserAlive(lp_targetUser) && gf_IsUserAlive(gf_GetChangelingPlayer())) {
        UnitCreateEffectUnit(gf_CharacterUnit(gf_GetChangelingPlayer()), gv_eAT_EFFECT, gf_CharacterUnit(lp_targetUser));
        gv_characterInfoArray[gf_GetUserIndex(gf_GetChangelingPlayer())].lv_state = ge_PlayerCharacterState_EatingChangeling;
        gv_eatTargetPlayer = lp_targetUser;
        gf_SetChangelingState(ge_ChangelingState_Paused);
        while (gf_IsUserAlive(gf_GetChangelingPlayer()) && gf_IsUserAlive(gv_eatTargetPlayer) && (gf_CharacterState(gf_GetChangelingPlayer()) == ge_PlayerCharacterState_EatingChangeling)) {
            Wait(0.0625, c_timeGame);
        }
        Wait(0.25, c_timeGame);
        if ((gf_CharacterState(gf_GetChangelingPlayer()) == ge_PlayerCharacterState_EatingChangeling) && (gf_GetChangelingState() == ge_ChangelingState_Paused)) {
            gf_SetCharacterStatetoNormalState(gf_GetChangelingPlayer());
            gf_SetChangelingState(ge_ChangelingState_HuntingWithDisguise);
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/2FBBB5D4"));
    }
    return true;
}
playergroup gf_AliveMarineUsers () {
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto0D80CFDC_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    auto0D80CFDC_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto0D80CFDC_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_CharacterRole(lv__i) == ge_CharacterRole_Marine) && (gf_CharacterState(lv__i) != ge_PlayerCharacterState_Dead)) {
            PlayerGroupAdd(lv__pg, lv__i);
        }
    }
    return lv__pg;
}
playergroup gf_AliveUsers () {
    // Variable Declarations
    int lv__i;
    playergroup lv__pg;
    // Automatic Variable Declarations
    playergroup auto639D96F1_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    auto639D96F1_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto639D96F1_g, lv__i);
        if (lv__i < 0) { break; }
        if (gf_IsUserAlive(lv__i)) {
            PlayerGroupAdd(lv__pg, lv__i);
        }
    }
    return lv__pg;
}
unit gf_CharacterUnit (int lp_user) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__index != -1) && (gf_UserPlayMode(lp_user) == ge_PlayMode_GamePlayer)) {
        return gv_characterInfoArray[lv__index].lv_unit;
    }
    return null;
}
unitgroup gf_AllAliveCharacters () {
    // Variable Declarations
    int lv__i;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    playergroup auto8EEC1DAD_g;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    auto8EEC1DAD_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto8EEC1DAD_g, lv__i);
        if (lv__i < 0) { break; }
        UnitGroupAdd(lv__ug, gf_CharacterUnit(lv__i));
    }
    return lv__ug;
}
unitgroup gf_AllMarines () {
    // Variable Declarations
    int lv__i;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    playergroup auto1639BB3B_g;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    auto1639BB3B_g = gf_AliveMarineUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto1639BB3B_g, lv__i);
        if (lv__i < 0) { break; }
        UnitGroupAdd(lv__ug, gf_CharacterUnit(lv__i));
    }
    return lv__ug;
}
int gf_CharacterState (int lp_user) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__index != -1) && (gf_UserPlayMode(lp_user) == ge_PlayMode_GamePlayer)) {
        return gv_characterInfoArray[lv__index].lv_state;
    }
    else {
        return ge_PlayerCharacterState_None;
    }
}
int gf_CharacterRole (int lp_user) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__index != -1) && (gf_UserPlayMode(lp_user) == ge_PlayMode_GamePlayer)) {
        return gv_characterInfoArray[lv__index].lv_role;
    }
    return ge_CharacterRole_None;
}
playergroup gf_GetUserGroupbyTypeofControllingDevice (int lp_devicetype) {
    // Variable Declarations
    int lv__i;
    playergroup lv__pg;
    // Automatic Variable Declarations
    playergroup auto6220774D_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    auto6220774D_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto6220774D_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_CharacterState(lv__i) == ge_PlayerCharacterState_ControlingDevice) && (gf_DeviceType(gf_GetDeviceInUse(lv__i)) == lp_devicetype)) {
            PlayerGroupAdd(lv__pg, lv__i);
        }
    }
    return lv__pg;
}
unit gf_GetDeviceInUse (int lp_user) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__index != -1) && (gf_CharacterState(lp_user) == ge_PlayerCharacterState_ControlingDevice)) {
        return gv_characterInfoArray[lv__index].lv_controllingDevice;
    }
    else {
        return null;
    }
}
timer gf_CharacterGenericTimer (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1) && (gf_UserPlayMode(lp_user) == ge_PlayMode_GamePlayer)) {
        return gv_characterInfoArray[lv__userIndex].lv_genericTimer;
    }
    else {
        return null;
    }
}
timer gf_CharacterDamageTakenTimer (int lp_user, int lp_attacker) {
    // Variable Declarations
    int lv__userIndex;
    int lv__attackerIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__attackerIndex = gf_GetUserIndex(lp_attacker);
    // Implementation
    if ((lv__userIndex != -1) && (lv__attackerIndex != -1)) {
        return gv_characterInfoArray[lv__userIndex].lv_damageTakenTimer[lv__attackerIndex];
    }
    else {
        return null;
    }
}
bool gf_CharacterHasStatusFlag (int lp_user, int lp_flag) {
    // Variable Declarations
    int lv__userIndex;
    int lv__currentFlag;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__currentFlag = 0;
    // Implementation
    if ((lv__userIndex != -1) && gf_IsUserAlive(lp_user)) {
        lv__currentFlag = gv_characterInfoArray[lv__userIndex].lv_statusFlag;
        return (lp_flag & lv__currentFlag) == lp_flag;
    }
    else {
        return false;
    }
}
void gf_SetUnitasCharacter (int lp_user, unit lp_unit) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__index == -1)) {
        gf_Assert(ge_AssertType_ParameterException, "Set Unit as Character");
        return ;
    }
    gv_characterInfoArray[lv__index].lv_unit = lp_unit;
    if (gf_IsMoveKeyPressed(lp_user)) {
        gv_characterInfoArray[lv__index].lv_state = ge_PlayerCharacterState_Move;
    }
    else {
        gv_characterInfoArray[lv__index].lv_state = ge_PlayerCharacterState_Idle;
    }
}
void gf_SetCharacterStatetoNormalState (int lp_user) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto57B8C1AF_g;
    // Variable Initialization
    // Implementation
    if (gf_IsUserAlive(lp_user)) {
        if (((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain))) {
            CameraLockInput(lp_user, false);
        }
        gf_ClearDirectiveMessageforPlayerGroup(gf_GetUserwithObservers(lp_user));
        auto57B8C1AF_g = gf_GetUserwithObservers(lp_user);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto57B8C1AF_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_CharacterHUD);
        }
        gf_CustomizedShowHideMouseCursor(lp_user, false);
        if (gf_IsMoveKeyPressed(lp_user)) {
            gv_characterInfoArray[gf_GetUserIndex(lp_user)].lv_state = ge_PlayerCharacterState_Move;
        }
        else {
            gv_characterInfoArray[gf_GetUserIndex(lp_user)].lv_state = ge_PlayerCharacterState_Idle;
        }
    }
    else {
        return ;
    }
}
void gf_SetCharacterStatusFlag (int lp_user, int lp_flag, bool lp_onoff) {
    // Variable Declarations
    int lv__userIndex;
    int lv__currentFlag;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__currentFlag = 0;
    // Implementation
    if (gf_IsUserAlive(lp_user) && (lv__userIndex != -1)) {
        if ((lp_onoff == true)) {
            lv__currentFlag = gv_characterInfoArray[lv__userIndex].lv_statusFlag;
            gv_characterInfoArray[lv__userIndex].lv_statusFlag = lv__currentFlag | lp_flag;
        }
        else {
            lv__currentFlag = gv_characterInfoArray[lv__userIndex].lv_statusFlag;
            lv__currentFlag = ~lv__currentFlag;
            gv_characterInfoArray[lv__userIndex].lv_statusFlag = lv__currentFlag & lp_flag;
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/F3196459"));
    }
}
bool gf_IsUserAlive (int lp_user) {
    // Variable Declarations
    unit lv__character;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__character = gf_CharacterUnit(lp_user);
    // Implementation
    if ((gf_UserPlayMode(lp_user) == ge_PlayMode_GamePlayer) && (lv__character != null) && (UnitIsAlive(lv__character) == true)) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_IsChangelingUser (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CharacterRole(lp_player) == ge_CharacterRole_Changeling)) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_IsCharacter (unit lp_unit) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoD1A8586A_g;
    // Variable Initialization
    // Implementation
    autoD1A8586A_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoD1A8586A_g, lv__i);
        if (lv__i < 0) { break; }
        if ((lp_unit == gf_CharacterUnit(lv__i))) {
            return true;
        }
    }
    return false;
}
bool gf_CanControlDevice (int lp_player, int lp_device) {
    // Automatic Variable Declarations
    // Implementation
    return true;
}
int gf_GetEmergencyState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_labInfo.lv_emergencyState;
}
void gf_SetEmergencyState (int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_GetEmergencyState() == lp_state)) {
        return ;
    }
    gv_labInfo.lv_emergencyState = lp_state;
    gf_UpdateGlobalEnvironmentbyPropertiesofLab();
}
void gf_PowerStateofLabChanged (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, gf_GetEventNameofPowerState(ge_PowerStateType_PowerOn));
    TriggerAddEventGeneric(t, gf_GetEventNameofPowerState(ge_PowerStateType_PowerOff));
}
string gf_GetEventNameofPowerState (int lp_powerState) {
    // Automatic Variable Declarations
    // Implementation
    return ("_Power_" + IntToString((lp_powerState)));
}
int gf_TriggeringPowerState () {
    // Automatic Variable Declarations
    string auto9C85D38C_val;
    // Implementation
    auto9C85D38C_val = EventGenericName();
    if (auto9C85D38C_val == gf_GetEventNameofPowerState(ge_PowerStateType_PowerOn)) {
        return ge_PowerStateType_PowerOn;
    }
    else if (auto9C85D38C_val == gf_GetEventNameofPowerState(ge_PowerStateType_PowerOff)) {
        return ge_PowerStateType_PowerOff;
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/232F4A2A"));
        return ge_PowerStateType_None;
    }
}
int gf_GetPowerState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_labInfo.lv_powerState;
}
void gf_SetPowerState (int lp_state) {
    // Variable Declarations
    int lv__i;
    unit lv__device;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((lp_state != gf_GetPowerState())) {
        TriggerSendEvent(gf_GetEventNameofPowerState(lp_state));
        gv_labInfo.lv_powerState = lp_state;
        gf_UpdateGlobalEnvironmentbyPropertiesofLab();
    }
}
void gf_UpdateGlobalEnvironmentbyPropertiesofLab () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_GetPowerState() == ge_PowerStateType_PowerOff)) {
        gf_SetGlobalEnvironmentState(ge_EnvironmentState_BlackOut);
    }
    else if ((gf_GetPowerState() == ge_PowerStateType_PowerOn)) {
        if ((gf_GetEmergencyState() == ge_EmergencyState_Emergency)) {
            gf_SetGlobalEnvironmentState(ge_EnvironmentState_Emergency);
        }
        else {
            gf_SetGlobalEnvironmentState(ge_EnvironmentState_Normal);
        }
    }
    else if (true) {
        gf_SetGlobalEnvironmentState(ge_EnvironmentState_Normal);
    }
}
unitgroup gf_GetCharactersInLab () {
    // Variable Declarations
    unit lv__u;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    unitgroup autoF004E25B_g;
    int autoF004E25B_u;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    autoF004E25B_g = gf_AllAliveCharacters();
    autoF004E25B_u = UnitGroupCount(autoF004E25B_g, c_unitCountAll);
    for (;; autoF004E25B_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoF004E25B_g, autoF004E25B_u);
        if (lv__u == null) { break; }
        if ((libNtve_gf_UnitInRegion(lv__u, gv_lAB_AREA) == true)) {
            UnitGroupAdd(lv__ug, lv__u);
        }
    }
    return lv__ug;
}
bool gf_IsUnitInRestrictedCell (unit lp__unit) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((lp__unit != null) && (UnitIsAlive(lp__unit) == true)) {
        while ((lv__i <= gv_cELL_INDEX_MAX)) {
            if ((libNtve_gf_UnitInRegion(lp__unit, gv_cellInfoArray[lv__i].lv_region) == true) && (gv_cellInfoArray[lv__i].lv_securitylevel == ge_AccessLevel_Restricted)) {
                return true;
            }
            lv__i += 1;
        }
    }
    return false;
}
void gf_InitializeCellInfo (int lp_cell, text lp_name, region lp_area, point lp_point, int lp_securityLevel, unitgroup lp_doors) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetCellIndex(lp_cell);
    // Implementation
    if ((gv_initializedCellCounter == gv_cELL_AMOUNT_MAX)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/196D7FC5"));
        return ;
    }
    gv_cellInfoArray[lv__index].lv_cell = lp_cell;
    gv_cellInfoArray[lv__index].lv_name = lp_name;
    gv_cellInfoArray[lv__index].lv_region = lp_area;
    gv_cellInfoArray[lv__index].lv_point = lp_point;
    gv_cellInfoArray[lv__index].lv_securitylevel = lp_securityLevel;
    gv_cellInfoArray[lv__index].lv_gates = lp_doors;
    gv_initializedCellCounter = (gv_initializedCellCounter+1
);
}
int gf_GetCellbyIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= (gv_initializedCellCounter-1)))) {
        return gv_cellInfoArray[lp_index].lv_cell;
    }
    else {
        return ge_Cell_None;
    }
}
int gf_GetCellbyRegion (region lp_region) {
    // Variable Declarations
    int lv__t;
    // Automatic Variable Declarations
    region autoB3A11B02_val;
    // Variable Initialization
    lv__t = ge_Cell_None;
    // Implementation
    autoB3A11B02_val = lp_region;
    if (autoB3A11B02_val == RegionFromId(4)) {
        lv__t = ge_Cell_SecurityCell;
    }
    else if (autoB3A11B02_val == RegionFromId(6)) {
        lv__t = ge_Cell_LabA;
    }
    else if (autoB3A11B02_val == RegionFromId(7)) {
        lv__t = ge_Cell_LabB;
    }
    else if (autoB3A11B02_val == RegionFromId(15)) {
        lv__t = ge_Cell_LabC;
    }
    else if (autoB3A11B02_val == RegionFromId(5)) {
        lv__t = ge_Cell_EmergencyControlCell;
    }
    else if (autoB3A11B02_val == RegionFromId(8)) {
        lv__t = ge_Cell_GeneratorCell;
    }
    else if (autoB3A11B02_val == RegionFromId(11)) {
        lv__t = ge_Cell_RadioactiveCell;
    }
    else if (autoB3A11B02_val == RegionFromId(13)) {
        lv__t = ge_Cell_Archive;
    }
    else if (autoB3A11B02_val == RegionFromId(29)) {
        lv__t = ge_Cell_Infirmary;
    }
    else if (autoB3A11B02_val == RegionFromId(28)) {
        lv__t = ge_Cell_SateliteControlCell;
    }
    else if (autoB3A11B02_val == RegionFromId(26)) {
        lv__t = ge_Cell_IncineratorCell;
    }
    else {
    }
    return lv__t;
}
int gf_GetCellwhereUnitExists (unit lp_unit) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int autoE0202F61_ae;
    const int autoE0202F61_ai = 1;
    // Variable Initialization
    // Implementation
    if ((lp_unit == null)) {
        return ge_Cell_None;
    }
    autoE0202F61_ae = (gv_initializedCellCounter-1);
    lv__i = 0;
    for ( ; ( (autoE0202F61_ai >= 0 && lv__i <= autoE0202F61_ae) || (autoE0202F61_ai < 0 && lv__i >= autoE0202F61_ae) ) ; lv__i += autoE0202F61_ai ) {
        if ((libNtve_gf_UnitInRegion(lp_unit, gv_cellInfoArray[lv__i].lv_region) == true)) {
            return gv_cellInfoArray[lv__i].lv_cell;
        }
    }
    return ge_Cell_None;
}
region gf_GetCellRegionPreloadVersion (int lp_cell) {
    // Automatic Variable Declarations
    int auto2D7B851B_val;
    // Implementation
    auto2D7B851B_val = lp_cell;
    if (auto2D7B851B_val == ge_Cell_Archive) {
        return RegionFromId(13);
    }
    else if (auto2D7B851B_val == ge_Cell_GeneratorCell) {
        return RegionFromId(8);
    }
    else if (auto2D7B851B_val == ge_Cell_IncineratorCell) {
        return RegionFromId(26);
    }
    else if (auto2D7B851B_val == ge_Cell_Infirmary) {
        return RegionFromId(29);
    }
    else if (auto2D7B851B_val == ge_Cell_LabA) {
        return RegionFromId(6);
    }
    else if (auto2D7B851B_val == ge_Cell_LabB) {
        return RegionFromId(7);
    }
    else if (auto2D7B851B_val == ge_Cell_LabC) {
        return RegionFromId(15);
    }
    else if (auto2D7B851B_val == ge_Cell_SecurityCell) {
        return RegionFromId(4);
    }
    else if (auto2D7B851B_val == ge_Cell_RadioactiveCell) {
        return RegionFromId(11);
    }
    else if (auto2D7B851B_val == ge_Cell_SateliteControlCell) {
        return RegionFromId(28);
    }
    else if (auto2D7B851B_val == ge_Cell_EmergencyControlCell) {
        return RegionFromId(5);
    }
    else {
        return null;
    }
}
region gf_GetCellRegion (int lp_cell) {
    // Variable Declarations
    int lv__cellIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__cellIndex = gf_GetCellIndex(lp_cell);
    // Implementation
    if ((lv__cellIndex != -1)) {
        return gv_cellInfoArray[lv__cellIndex].lv_region;
    }
    else {
        return null;
    }
}
region gf_GetCellRegionbyIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gv_cELL_INDEX_MAX))) {
        return gv_cellInfoArray[lp_index].lv_region;
    }
    return null;
}
point gf_GetCellPointbyIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gv_cELL_INDEX_MAX))) {
        return gv_cellInfoArray[lp_index].lv_point;
    }
    return null;
}
int gf_GetCellIndex (int lp_cell) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = ((lp_cell)-1);
    // Implementation
    if (((lv__index >= 0) && (lv__index <= gv_cELL_INDEX_MAX))) {
        return lv__index;
    }
    else {
        return -1;
    }
}
int gf_GetLastCellIndex () {
    // Automatic Variable Declarations
    // Implementation
    return (gv_initializedCellCounter-1);
}
text gf_GetCellName (int lp_cell) {
    // Variable Declarations
    text lv__text;
    // Automatic Variable Declarations
    int auto967BEB37_val;
    // Variable Initialization
    // Implementation
    auto967BEB37_val = lp_cell;
    if (auto967BEB37_val == ge_Cell_SecurityCell) {
        lv__text = StringExternal("Param/Value/99B8D048");
    }
    else if (auto967BEB37_val == ge_Cell_LabA) {
        lv__text = StringExternal("Param/Value/9790C46C");
    }
    else if (auto967BEB37_val == ge_Cell_LabB) {
        lv__text = StringExternal("Param/Value/D00D7E2E");
    }
    else if (auto967BEB37_val == ge_Cell_LabC) {
        lv__text = StringExternal("Param/Value/562B3E2B");
    }
    else if (auto967BEB37_val == ge_Cell_EmergencyControlCell) {
        lv__text = StringExternal("Param/Value/13CE30AC");
    }
    else if (auto967BEB37_val == ge_Cell_GeneratorCell) {
        lv__text = StringExternal("Param/Value/E47E37F1");
    }
    else if (auto967BEB37_val == ge_Cell_RadioactiveCell) {
        lv__text = StringExternal("Param/Value/9E478003");
    }
    else if (auto967BEB37_val == ge_Cell_Archive) {
        lv__text = StringExternal("Param/Value/8AADD139");
    }
    else if (auto967BEB37_val == ge_Cell_Infirmary) {
        lv__text = StringExternal("Param/Value/FA851620");
    }
    else if (auto967BEB37_val == ge_Cell_SateliteControlCell) {
        lv__text = StringExternal("Param/Value/C2C317C5");
    }
    else if (auto967BEB37_val == ge_Cell_IncineratorCell) {
        lv__text = StringExternal("Param/Value/41009DA3");
    }
    else {
    }
    return lv__text;
}
bool gf_IsUnitInCell (unit lp_unit, int lp_cell) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int auto2DEDD676_val;
    const int auto55776D8E_ae = gv_cELL_INDEX_MAX;
    const int auto55776D8E_ai = 1;
    const int autoB734CA64_ae = gv_cELL_INDEX_MAX;
    const int autoB734CA64_ai = 1;
    // Variable Initialization
    // Implementation
    if ((lp_unit != null) && (UnitIsAlive(lp_unit) == true)) {
        auto2DEDD676_val = lp_cell;
        if (auto2DEDD676_val == ge_Cell_AnyCell) {
            lv__i = 0;
            for ( ; ( (auto55776D8E_ai >= 0 && lv__i <= auto55776D8E_ae) || (auto55776D8E_ai < 0 && lv__i >= auto55776D8E_ae) ) ; lv__i += auto55776D8E_ai ) {
                if ((libNtve_gf_UnitInRegion(lp_unit, gf_GetCellRegionbyIndex(lv__i)) == true)) {
                    return true;
                }
            }
            return false;
        }
        else if (auto2DEDD676_val == ge_Cell_None) {
            lv__i = 0;
            for ( ; ( (autoB734CA64_ai >= 0 && lv__i <= autoB734CA64_ae) || (autoB734CA64_ai < 0 && lv__i >= autoB734CA64_ae) ) ; lv__i += autoB734CA64_ai ) {
                if ((libNtve_gf_UnitInRegion(lp_unit, gf_GetCellRegionbyIndex(lv__i)) == true)) {
                    return false;
                }
            }
            return true;
        }
        else {
            return libNtve_gf_UnitInRegion(lp_unit, gf_GetCellRegion(lp_cell));
        }
    }
    else {
        return false;
    }
}
unitgroup gf_GetCharactersInCell (int lp_cell) {
    // Variable Declarations
    int lv__i;
    int lv__cellIndex;
    unitgroup lv__ug;
    unit lv__u;
    region lv__r;
    // Automatic Variable Declarations
    unitgroup auto02556009_g;
    int auto02556009_u;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    auto02556009_g = gf_AllAliveCharacters();
    auto02556009_u = UnitGroupCount(auto02556009_g, c_unitCountAll);
    for (;; auto02556009_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto02556009_g, auto02556009_u);
        if (lv__u == null) { break; }
        if ((gf_IsUnitInCell(lv__u, lp_cell) == true)) {
            UnitGroupAdd(lv__ug, lv__u);
        }
    }
    return lv__ug;
}
playergroup gf_GetUsersInCellwithObs (int lp_cell) {
    // Variable Declarations
    unit lv__u;
    playergroup lv__pg;
    // Automatic Variable Declarations
    unitgroup auto0C24CCE8_g;
    int auto0C24CCE8_u;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    auto0C24CCE8_g = gf_GetCharactersInCell(lp_cell);
    auto0C24CCE8_u = UnitGroupCount(auto0C24CCE8_g, c_unitCountAll);
    for (;; auto0C24CCE8_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto0C24CCE8_g, auto0C24CCE8_u);
        if (lv__u == null) { break; }
        libNtve_gf_AddPlayerGroupToPlayerGroup(gf_GetUserwithObservers(UnitGetOwner(lv__u)), lv__pg);
    }
    return lv__pg;
}
void gf_UnitEntersLeavesCell (trigger t, bool lp_enterleave) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_ARCHIVE, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_EMERGENCY_CONTROL, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_INCINERATOR, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_INFIRMARY, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_LAB_A, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_LAB_B, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_LAB_C, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_POWER_GENERATOR, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_RADIATION_DIAGNOSTIC, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_SATELITE_CONTROL, lp_enterleave);
    TriggerAddEventUnitRegion(t, null, gv_cELL_REGION_SECURITY, lp_enterleave);
}
bool gf_IsGate (unit lp_gate, int lp_mode) {
    // Automatic Variable Declarations
    int auto62462042_val;
    // Implementation
    if ((lp_gate != null) && ((UnitGetType(lp_gate) == "UmojanLabDoorsThinRight") || (UnitGetType(lp_gate) == "UmojanLabDoorsThinLeft") || (UnitGetType(lp_gate) == "UmojanLabDoorsThinLeftLowered") || (UnitGetType(lp_gate) == "UmojanLabDoorsThinRightLowered"))) {
        auto62462042_val = lp_mode;
        if (auto62462042_val == ge_GateMode_Any) {
            return true;
        }
        else if (auto62462042_val == ge_GateMode_Open) {
            if (((UnitGetType(lp_gate) == "UmojanLabDoorsThinLeftLowered") || (UnitGetType(lp_gate) == "UmojanLabDoorsThinRightLowered"))) {
                return true;
            }
        }
        else if (auto62462042_val == ge_GateMode_Closed) {
            if (((UnitGetType(lp_gate) == "UmojanLabDoorsThinRight") || (UnitGetType(lp_gate) == "UmojanLabDoorsThinLeft"))) {
                return true;
            }
        }
        else {
        }
    }
    return false;
}
unitgroup gf_GetCellGates (int lp_cell) {
    // Variable Declarations
    int lv__cellIndex;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    const int autoD4BECAAE_ae = gv_cELL_INDEX_MAX;
    const int autoD4BECAAE_ai = 1;
    // Variable Initialization
    lv__cellIndex = -1;
    // Implementation
    if ((lp_cell == ge_Cell_AnyCell)) {
        lv__ug = UnitGroupEmpty();
        lv__cellIndex = 0;
        for ( ; ( (autoD4BECAAE_ai >= 0 && lv__cellIndex <= autoD4BECAAE_ae) || (autoD4BECAAE_ai < 0 && lv__cellIndex >= autoD4BECAAE_ae) ) ; lv__cellIndex += autoD4BECAAE_ai ) {
            UnitGroupAddUnitGroup(lv__ug, gv_cellInfoArray[lv__cellIndex].lv_gates);
        }
        return lv__ug;
    }
    else {
        lv__cellIndex = gf_GetCellIndex(lp_cell);
        if ((lv__cellIndex != -1)) {
            return UnitGroupCopy(gv_cellInfoArray[lv__cellIndex].lv_gates);
        }
        else {
            return UnitGroupEmpty();
        }
    }
}
unitgroup gf_GetAllofCellGates () {
    // Automatic Variable Declarations
    // Implementation
    return gf_GetCellGates(ge_Cell_AnyCell);
}
unitgroup gf_GetAllGates (int lp_mode) {
    // Variable Declarations
    unit lv__u;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    unitgroup autoEF4558FB_g;
    int autoEF4558FB_u;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    autoEF4558FB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEF4558FB_u = UnitGroupCount(autoEF4558FB_g, c_unitCountAll);
    for (;; autoEF4558FB_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoEF4558FB_g, autoEF4558FB_u);
        if (lv__u == null) { break; }
        if (gf_IsGate(lv__u, lp_mode)) {
            UnitGroupAdd(lv__ug, lv__u);
        }
    }
    return lv__ug;
}
int gf_GetGateState (unit lp_gate) {
    // Variable Declarations
    int lv_state;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (gf_IsGate(lp_gate, ge_GateMode_Any)) {
        lv_state = FixedToInt(UnitGetCustomValue(lp_gate, gv_gATE_STATE_CUSTOMVALUE_INDEX));
        return lv_state;
    }
    else {
        return ge_GateState_None;
    }
}
unit gf_GetGateInFrontofUser (int lp_user, int lp_mode) {
    // Variable Declarations
    unitgroup lv__ug;
    unit lv__u;
    // Automatic Variable Declarations
    unitgroup autoC23F4967_g;
    int autoC23F4967_u;
    // Variable Initialization
    // Implementation
    if (gf_IsUserAlive(lp_user)) {
        lv__ug = UnitGroupSearch(null, c_playerAny, PointWithOffsetPolar(UnitGetPosition(gf_CharacterUnit(lp_user)), 0.8, CameraGetYaw(lp_user)), 1.0, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC23F4967_g = lv__ug;
        autoC23F4967_u = UnitGroupCount(autoC23F4967_g, c_unitCountAll);
        for (;; autoC23F4967_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoC23F4967_g, autoC23F4967_u);
            if (lv__u == null) { break; }
            if (gf_IsGate(lv__u, lp_mode)) {
                continue;
            }
            else {
                UnitGroupRemove(lv__ug, lv__u);
            }
        }
        return UnitGroupClosestToPoint(lv__ug, UnitGetPosition(gf_CharacterUnit(lp_user)));
    }
    else {
        return null;
    }
}
void gf_InitializeGate (unit lp_gate) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsGate(lp_gate, ge_GateMode_Any)) {
        UnitSetCustomValue(lp_gate, gv_gATE_STATE_CUSTOMVALUE_INDEX, (ge_GateState_Idle));
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/EB2401A0"));
    }
}
void gf_OpenCloseGate (unit lp_gate, bool lp_openclose) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsGate(lp_gate, ge_GateMode_Any)) {
        if (gf_IsGate(lp_gate, ge_GateMode_Closed)) {
            if ((lp_openclose == true)) {
                UnitIssueOrder(lp_gate, Order(AbilityCommand("UmojanLabDoorsRightLowered", 0)), c_orderQueueReplace);
                UnitSetCustomValue(lp_gate, gv_gATE_STATE_CUSTOMVALUE_INDEX, (ge_GateState_Transitioning));
                UnitBehaviorAddPlayer(lp_gate, "UmojaWait", gv_pLAYER_NEUTRAL, 1);
            }
        }
        else {
            if ((lp_openclose == false)) {
                UnitIssueOrder(lp_gate, Order(AbilityCommand("UmojanLabDoorsRight", 0)), c_orderQueueReplace);
                UnitSetCustomValue(lp_gate, gv_gATE_STATE_CUSTOMVALUE_INDEX, (ge_GateState_Transitioning));
                UnitBehaviorAddPlayer(lp_gate, "UmojaWait", gv_pLAYER_NEUTRAL, 1);
            }
        }
    }
}
void gf_SetPowerStateforGate (unit lp_gate, int lp_powerState) {
    // Automatic Variable Declarations
    int auto22A9FCDA_val;
    // Implementation
    auto22A9FCDA_val = lp_powerState;
    if (auto22A9FCDA_val == ge_PowerStateType_PowerOn) {
        UnitBehaviorRemovePlayer(lp_gate, "PowerStateOff", gv_pLAYER_NEUTRAL, 1);
    }
    else if (auto22A9FCDA_val == ge_PowerStateType_PowerOff) {
        UnitBehaviorAddPlayer(lp_gate, "PowerStateOff", gv_pLAYER_NEUTRAL, 1);
    }
    else {
    }
}
int gf_TriggeringAccessLevelChangedCell () {
    // Automatic Variable Declarations
    // Implementation
    if ((StringWord(EventGenericName(), 1) == "AccessLevelChanged")) {
        return gf_GetCellbyIndex(StringToInt(StringWord(EventGenericName(), 2)));
    }
    else {
        return ge_Cell_None;
    }
}
int gf_GetAccessLevelofCell (int lp_cell) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetCellIndex(lp_cell);
    // Implementation
    if ((lv__index == -1)) {
        return ge_AccessLevel_None;
    }
    else {
        return gv_cellInfoArray[lv__index].lv_securitylevel;
    }
}
void gf_SetAccessLevelofCell (int lp_cell, int lp_securityLevel) {
    // Variable Declarations
    int lv__cellIndex;
    unit lv__u;
    int lv__i;
    // Automatic Variable Declarations
    int auto0D6E0E80_val;
    unitgroup auto422BB050_g;
    int auto422BB050_u;
    unitgroup auto6BEA0443_g;
    int auto6BEA0443_u;
    playergroup autoFC7A2FF4_g;
    // Variable Initialization
    lv__cellIndex = gf_GetCellIndex(lp_cell);
    // Implementation
    if ((lv__cellIndex == -1)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/E1998059"));
    }
    if (((lp_securityLevel == ge_AccessLevel_None) || (lp_securityLevel == gv_cellInfoArray[lv__cellIndex].lv_securitylevel))) {
        return ;
    }
    auto0D6E0E80_val = lp_securityLevel;
    if (auto0D6E0E80_val == ge_AccessLevel_Restricted) {
        auto422BB050_g = gf_GetCellGates(lp_cell);
        auto422BB050_u = UnitGroupCount(auto422BB050_g, c_unitCountAll);
        for (;; auto422BB050_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto422BB050_g, auto422BB050_u);
            if (lv__u == null) { break; }
            UnitBehaviorAddPlayer(lv__u, "UmojaAutoUnpowered2", 0, 1);
        }
    }
    else if (auto0D6E0E80_val == ge_AccessLevel_Normal) {
        if ((gf_GetAccessLevelofCell(lp_cell) == ge_AccessLevel_Restricted)) {
            auto6BEA0443_g = gf_GetCellGates(lp_cell);
            auto6BEA0443_u = UnitGroupCount(auto6BEA0443_g, c_unitCountAll);
            for (;; auto6BEA0443_u -= 1) {
                lv__u = UnitGroupUnitFromEnd(auto6BEA0443_g, auto6BEA0443_u);
                if (lv__u == null) { break; }
                UnitBehaviorRemove(lv__u, "UmojaAutoUnpowered2", 1);
                if ((gf_GetGateState(lv__u) == ge_GateState_BeingUnlocked)) {
                    autoFC7A2FF4_g = gf_AliveUsers();
                    lv__i = -1;
                    while (true) {
                        lv__i = PlayerGroupNextPlayer(autoFC7A2FF4_g, lv__i);
                        if (lv__i < 0) { break; }
                        if ((gf_GetTargetGatetoUnlockforUser(lv__i) == lv__u)) {
                            gf_CancelUnlockingGateforUser(lv__i);
                            gf_OpenCloseGate(lv__u, true);
                        }
                    }
                }
            }
        }
    }
    else {
    }
    gv_cellInfoArray[lv__cellIndex].lv_securitylevel = lp_securityLevel;
    TriggerSendEvent(("AccessLevelChanged " + IntToString(gf_GetCellIndex(lp_cell))));
}
void gf_AccessLevelChanged (trigger t) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int auto2816AC7D_ae = gv_cELL_INDEX_MAX;
    const int auto2816AC7D_ai = 1;
    // Variable Initialization
    // Implementation
    lv__i = 0;
    for ( ; ( (auto2816AC7D_ai >= 0 && lv__i <= auto2816AC7D_ae) || (auto2816AC7D_ai < 0 && lv__i >= auto2816AC7D_ae) ) ; lv__i += auto2816AC7D_ai ) {
        TriggerAddEventGeneric(t, ("AccessLevelChanged " + IntToString(lv__i)));
    }
}
bool gf_IsDevice (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_unit == null)) {
        return false;
    }
    if (((UnitGetType(lp_unit) == "Beacon_TerranSmall") || (UnitGetType(lp_unit) == "Beacon_ZergSmall"))) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_CanInitializeNewDeviceInfo () {
    // Automatic Variable Declarations
    // Implementation
    return (gv_deviceIndexLast < gv_dEVICE_INDEX_MAX);
}
void gf_SetDeviceStatetoInUse (unit lp_device, int lp_user) {
    // Variable Declarations
    int lv__deviceIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__deviceIndex = gf_DeviceIndex(lp_device);
    // Implementation
    if ((lv__deviceIndex != -1) && gf_IsUserAlive(lp_user)) {
        gv_deviceInfoArray[lv__deviceIndex].lv_mainState = ge_DeviceState_InUse;
        gv_deviceInfoArray[lv__deviceIndex].lv_user = lp_user;
    }
}
void gf_SetDeviceStatetoUsed (unit lp_device) {
    // Variable Declarations
    int lv__deviceIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__deviceIndex = gf_DeviceIndex(lp_device);
    // Implementation
    if ((lv__deviceIndex != -1) && (gf_HasDeviceFlag(lp_device, ge_DeviceFlag_OnlyOnce) == true)) {
        if ((gf_DeviceState(lp_device) == ge_DeviceState_InUse)) {
            gf_RemoveCharacterStateofControllingDevice(gf_DeviceUser(lp_device));
        }
        gv_deviceInfoArray[lv__deviceIndex].lv_mainState = ge_DeviceState_Used;
    }
    else {
        gf_CustomDebugMessage(libNtve_gf_ConvertBooleanToText(gf_HasDeviceFlag(lp_device, ge_DeviceFlag_OnlyOnce)));
    }
}
void gf_SetDeviceStatetoNormalState (unit lp_device) {
    // Variable Declarations
    int lv__deviceIndex;
    int lv__deviceState;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__deviceIndex = gf_DeviceIndex(lp_device);
    lv__deviceState = gf_DeviceState(lp_device);
    // Implementation
    if ((lv__deviceIndex != -1)) {
        if ((lv__deviceState != ge_DeviceState_Used)) {
            if ((gf_GetPowerState() == ge_PowerStateType_PowerOff) && (gf_HasDeviceFlag(lp_device, ge_DeviceFlag_NeedsPower) == true)) {
                gv_deviceInfoArray[lv__deviceIndex].lv_mainState = ge_DeviceState_Unpowered;
            }
            else {
                gv_deviceInfoArray[lv__deviceIndex].lv_mainState = ge_DeviceState_Idle;
            }
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/662FAF60"));
    }
}
void gf_InitializeDeviceInfo (unit lp_device, int lp_type, int lp_flag) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_device != null) && (gv_deviceIndexLast != gv_dEVICE_INDEX_MAX)) {
        gv_deviceIndexLast = (gv_deviceIndexLast+1);
        gv_deviceInfoArray[gv_deviceIndexLast].lv_unit = lp_device;
        gv_deviceInfoArray[gv_deviceIndexLast].lv_type = lp_type;
        gv_deviceInfoArray[gv_deviceIndexLast].lv_mainState = ge_DeviceState_Idle;
        gv_deviceInfoArray[gv_deviceIndexLast].lv_arrayIndex = gv_deviceIndexLast;
        gv_deviceInfoArray[gv_deviceIndexLast].lv_flag = lp_flag;
        UnitSetCustomValue(lp_device, gv_dEVICE_UNIT_CUSTOMVALUE_INDEX, gv_deviceIndexLast);
    }
    else {
        if ((lp_device == null)) {
            gf_Assert(ge_AssertType_ParameterException, "Initialize DeviceInfo");
        }
        else {
            gf_Assert(ge_AssertType_OutOfRange, "Initialize DeviceInfo");
        }
    }
}
bool gf_MaskDeviceFlag (int lp_lhs, int lp_rhs) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_lhs & lp_rhs) == lp_rhs;
}
bool gf_HasDeviceFlag (unit lp_device, int lp_lhs) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_DeviceIndex(lp_device);
    // Implementation
    if ((lv__index != -1)) {
        return gf_MaskDeviceFlag(gv_deviceInfoArray[lv__index].lv_flag, lp_lhs);
    }
    else {
        return false;
    }
}
unitgroup gf_AllDevices () {
    // Variable Declarations
    int lv__i;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    int autoA2C99684_ae;
    const int autoA2C99684_ai = 1;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    if ((gv_deviceIndexLast >= 0)) {
        autoA2C99684_ae = gv_deviceIndexLast;
        lv__i = 0;
        for ( ; ( (autoA2C99684_ai >= 0 && lv__i <= autoA2C99684_ae) || (autoA2C99684_ai < 0 && lv__i >= autoA2C99684_ae) ) ; lv__i += autoA2C99684_ai ) {
            UnitGroupAdd(lv__ug, gv_deviceInfoArray[lv__i].lv_unit);
        }
    }
    return lv__ug;
}
unitgroup gf_AllDevicesofDeviceType (int lp_deviceType) {
    // Variable Declarations
    int lv__i;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    int auto85F9AB53_ae;
    const int auto85F9AB53_ai = 1;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    if ((lp_deviceType != ge_DeviceType_None) && (gv_deviceIndexLast >= 0)) {
        auto85F9AB53_ae = gv_deviceIndexLast;
        lv__i = 0;
        for ( ; ( (auto85F9AB53_ai >= 0 && lv__i <= auto85F9AB53_ae) || (auto85F9AB53_ai < 0 && lv__i >= auto85F9AB53_ae) ) ; lv__i += auto85F9AB53_ai ) {
            if ((gv_deviceInfoArray[lv__i].lv_type == lp_deviceType) && (gv_deviceInfoArray[lv__i].lv_unit != null)) {
                UnitGroupAdd(lv__ug, gv_deviceInfoArray[lv__i].lv_unit);
            }
        }
    }
    return lv__ug;
}
unit gf_DevicewithIdleStateNearbycharacter (int lp_player) {
    // Variable Declarations
    unitgroup lv__ug;
    unit lv__device;
    // Automatic Variable Declarations
    unitgroup auto9B8108ED_g;
    int auto9B8108ED_u;
    // Variable Initialization
    // Implementation
    if ((gf_IsUserAlive(lp_player) == false)) {
        return null;
    }
    lv__ug = UnitGroupSearch(null, c_playerAny, UnitGetPosition(gf_CharacterUnit(lp_player)), 0.5, UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B8108ED_g = lv__ug;
    auto9B8108ED_u = UnitGroupCount(auto9B8108ED_g, c_unitCountAll);
    for (;; auto9B8108ED_u -= 1) {
        lv__device = UnitGroupUnitFromEnd(auto9B8108ED_g, auto9B8108ED_u);
        if (lv__device == null) { break; }
        if ((gf_DeviceState(lv__device) == ge_DeviceState_Idle)) {
            return lv__device;
        }
    }
    return null;
}
unit gf_DeviceTesters (int lp_player) {
    // Variable Declarations
    unitgroup lv__ug;
    unit lv__device;
    // Automatic Variable Declarations
    unitgroup auto9B8108ED_g;
    int auto9B8108ED_u;
    // Variable Initialization
    // Implementation
    if ((gf_IsUserAlive(lp_player) == false)) {
        return null;
    }
    lv__ug = UnitGroupSearch(null, c_playerAny, UnitGetPosition(gf_CharacterUnit(lp_player)), 0.5, UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B8108ED_g = lv__ug;
    auto9B8108ED_u = UnitGroupCount(auto9B8108ED_g, c_unitCountAll);
    for (;; auto9B8108ED_u -= 1) {
        lv__device = UnitGroupUnitFromEnd(auto9B8108ED_g, auto9B8108ED_u);
        if (lv__device == null) { break; }
        if (gf_IsDevice(lv__device) == true) {
            return lv__device;
        }
    }
    return null;
}
unit gf_DevicebyIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gv_deviceIndexLast))) {
        return gv_deviceInfoArray[lp_index].lv_unit;
    }
    else {
        return null;
    }
}
int gf_DeviceState (unit lp_device) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_IsDevice(lp_device) == false)) {
        return ge_DeviceState_None;
    }
    return gv_deviceInfoArray[gf_DeviceIndex(lp_device)].lv_mainState;
}
int gf_DeviceUser (unit lp_device) {
    // Variable Declarations
    int lv__deviceIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__deviceIndex = gf_DeviceIndex(lp_device);
    // Implementation
    if ((lv__deviceIndex != -1) && (gf_DeviceState(lp_device) == ge_DeviceState_InUse)) {
        return gv_deviceInfoArray[lv__deviceIndex].lv_user;
    }
    else {
        return c_playerAny;
    }
}
int gf_DeviceIndex (unit lp_device) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (gf_IsDevice(lp_device)) {
        lv__index = FixedToInt(UnitGetCustomValue(lp_device, gv_dEVICE_UNIT_CUSTOMVALUE_INDEX));
        if (((lv__index >= 0) && (lv__index <= gv_deviceIndexLast))) {
            return lv__index;
        }
        else {
            return -1;
        }
    }
    else {
        return -1;
    }
}
text gf_DeviceName (int lp_deviceType) {
    // Automatic Variable Declarations
    int autoC9636CD3_val;
    // Implementation
    autoC9636CD3_val = lp_deviceType;
    if (autoC9636CD3_val == ge_DeviceType_AberrationCage) {
        return gv_dEVICE_NAME_CAGE;
    }
    else if (autoC9636CD3_val == ge_DeviceType_Archive) {
        return gv_dEVICE_NAME_ARCHIVE;
    }
    else if (autoC9636CD3_val == ge_DeviceType_Incinerator) {
        return gv_dEVICE_NAME_INCINERATOR;
    }
    else if (autoC9636CD3_val == ge_DeviceType_MedicalBot) {
        return gv_dEVICE_NAME_MEDICAL;
    }
    else if (autoC9636CD3_val == ge_DeviceType_Monitor) {
        return gv_dEVICE_NAME_MONITOR;
    }
    else if (autoC9636CD3_val == ge_DeviceType_PhaseShifter) {
        return gv_dEVICE_NAME_PHASESHIFTER;
    }
    else if (autoC9636CD3_val == ge_DeviceType_PowerController) {
        return gv_dEVICE_NAME_POWER_CONTROLLER;
    }
    else if (autoC9636CD3_val == ge_DeviceType_RadiationDiagnosticTester) {
        return gv_dEVICE_NAME_RDT;
    }
    else if (autoC9636CD3_val == ge_DeviceType_SateliteController) {
        return gv_dEVICE_NAME_SATELITE;
    }
    else if (autoC9636CD3_val == ge_DeviceType_SecurityController) {
        return gv_dEVICE_NAME_EMERGENCY_CONSOLE;
    }
    else {
        return null;
    }
}
int gf_DeviceType (unit lp_device) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_DeviceIndex(lp_device);
    // Implementation
    if ((lv__index != -1)) {
        return gv_deviceInfoArray[lv__index].lv_type;
    }
    else {
        return ge_DeviceType_None;
    }
}
int gf_DeviceTypeIndex (int lp_deviceType) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = lp_deviceType - 1;
    // Implementation
    if (((lv__index >= 0) && (lv__index <= gv_dEVICE_TYPE_INDEX_MAX))) {
        return lv__index;
    }
    else {
        return -1;
    }
}
int gf_LastDeviceIndex () {
    // Automatic Variable Declarations
    // Implementation
    return gv_deviceIndexLast;
}
text gf_DeviceNamebyDeviceType (int lp_type) {
    // Automatic Variable Declarations
    int autoFE6E5122_val;
    // Implementation
    autoFE6E5122_val = lp_type;
    if (autoFE6E5122_val == ge_DeviceType_Archive) {
        return gv_dEVICE_NAME_ARCHIVE;
    }
    else if (autoFE6E5122_val == ge_DeviceType_MedicalBot) {
        return gv_dEVICE_NAME_MEDICAL;
    }
    else if (autoFE6E5122_val == ge_DeviceType_Incinerator) {
        return gv_dEVICE_NAME_INCINERATOR;
    }
    else if (autoFE6E5122_val == ge_DeviceType_Monitor) {
        return gv_dEVICE_NAME_MONITOR;
    }
    else if (autoFE6E5122_val == ge_DeviceType_AberrationCage) {
        return gv_dEVICE_NAME_CAGE;
    }
    else if (autoFE6E5122_val == ge_DeviceType_PowerController) {
        return gv_dEVICE_NAME_POWER_CONTROLLER;
    }
    else if (autoFE6E5122_val == ge_DeviceType_RadiationDiagnosticTester) {
        return gv_dEVICE_NAME_RDT;
    }
    else if (autoFE6E5122_val == ge_DeviceType_SateliteController) {
        return gv_dEVICE_NAME_SATELITE;
    }
    else if (autoFE6E5122_val == ge_DeviceType_SecurityController) {
        return gv_dEVICE_NAME_EMERGENCY_CONSOLE;
    }
    else {
        return null;
    }
}
int gf_DefaultDeviceFlag (int lp_deviceType) {
    // Automatic Variable Declarations
    int auto689DED1C_val;
    // Implementation
    auto689DED1C_val = lp_deviceType;
    if (auto689DED1C_val == ge_DeviceType_AberrationCage) {
        return ge_DeviceFlag_NeedsPower | ge_DeviceFlag_ForChangeling | ge_DeviceFlag_OnlyOnce;
    }
    else if (auto689DED1C_val == ge_DeviceType_Archive) {
        return ge_DeviceFlag_NeedsPower | ge_DeviceFlag_UseMouse;
    }
    else if (auto689DED1C_val == ge_DeviceType_Incinerator) {
        return ge_DeviceFlag_NeedsPower | ge_DeviceFlag_UseMouse;
    }
    else if (auto689DED1C_val == ge_DeviceType_MedicalBot) {
        return ge_DeviceFlag_NeedsPower;
    }
    else if (auto689DED1C_val == ge_DeviceType_Monitor) {
        return ge_DeviceFlag_NeedsPower | ge_DeviceFlag_UseCamera | ge_DeviceFlag_UseMouse;
    }
    else if (auto689DED1C_val == ge_DeviceType_PhaseShifter) {
        return ge_DeviceFlag_NeedsPower | ge_DeviceFlag_UseMouse;
    }
    else if (auto689DED1C_val == ge_DeviceType_PowerController) {
        return ge_DeviceFlag_UseMouse;
    }
    else if (auto689DED1C_val == ge_DeviceType_RadiationDiagnosticTester) {
        return ge_DeviceFlag_NeedsPower | ge_DeviceFlag_UseMouse;
    }
    else if (auto689DED1C_val == ge_DeviceType_SateliteController) {
        return ge_DeviceFlag_NeedsPower | ge_DeviceFlag_UseMouse;
    }
    else if (auto689DED1C_val == ge_DeviceType_SecurityController) {
        return ge_DeviceFlag_NeedsPower | ge_DeviceFlag_UseMouse;
    }
    else {
        return 0;
    }
}
bool gf_IsAberration (unit lp_unit) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int autoE2F8E07C_ae = gv_aBCAGE_ARRAY_INDEX_MAX;
    const int autoE2F8E07C_ai = 1;
    // Variable Initialization
    // Implementation
    if ((lp_unit != null)) {
        lv__i = 0;
        for ( ; ( (autoE2F8E07C_ai >= 0 && lv__i <= autoE2F8E07C_ae) || (autoE2F8E07C_ai < 0 && lv__i >= autoE2F8E07C_ae) ) ; lv__i += autoE2F8E07C_ai ) {
            if ((lp_unit == gv_aberrationCageInfoArray[lv__i].lv_aberration)) {
                return true;
            }
        }
        return false;
    }
    else {
        return false;
    }
}
void gf_InitializeAberrationCage (unit lp_device, unit lp_cage, unitgroup lp_doorBlocker) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_aberrationCageIndexLast != gv_aBCAGE_ARRAY_INDEX_MAX) && gf_CanInitializeNewDeviceInfo()) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_AberrationCage, gf_DefaultDeviceFlag(ge_DeviceType_AberrationCage));
        gv_aberrationCageIndexLast = (gv_aberrationCageIndexLast+1);
        gv_aberrationCageInfoArray[gv_aberrationCageIndexLast].lv_deviceIndex = gv_deviceIndexLast;
        gv_aberrationCageInfoArray[gv_aberrationCageIndexLast].lv_state = ge_AberrationCageState_Managing;
        gv_aberrationCageInfoArray[gv_aberrationCageIndexLast].lv_cageBuilding = lp_cage;
        gv_aberrationCageInfoArray[gv_aberrationCageIndexLast].lv_doorBlocker = UnitGroupCopy(lp_doorBlocker);
    }
    else {
        gf_Assert(ge_AssertType_AlreadyInitialized, "Initialize Aberration Cage");
    }
}
void gf_StartReleasingAberration (unit lp_aberrationCage, int lp_user, fixed lp_time) {
    // Variable Declarations
    int lv__aberrationCageIndex;
    fixed lv__f;
    timer lv__timer;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__aberrationCageIndex = gf_GetAberrationCageIndex(lp_aberrationCage);
    lv__timer = TimerCreate();
    // Implementation
    if ((lv__aberrationCageIndex != -1) && gf_IsUserAlive(lp_user)) {
        gv_aberrationCageInfoArray[lv__aberrationCageIndex].lv_state = ge_AberrationCageState_InReleasing;
        TimerStart(lv__timer, lp_time, false, c_timeGame);
        gf_ActivateProgressBarforTimer(gv_aberrationCagePanel.lv_progressBar, lp_user, lv__timer);
        while ((TimerGetRemaining(lv__timer) > 0.0)) {
            if ((gf_GameState() == ge_GameState_MainGame) && (gf_GetAberrationCageStatebyIndex(lv__aberrationCageIndex) == ge_AberrationCageState_InReleasing)) {
                Wait(0.0625, c_timeGame);
            }
            else {
                if ((gf_GetAberrationCageStatebyIndex(lv__aberrationCageIndex) == ge_AberrationCageState_Canceled)) {
                    gv_aberrationCageInfoArray[lv__aberrationCageIndex].lv_state = ge_AberrationCageState_Managing;
                }
                libNtve_gf_StopTimer(TimerLastStarted());
                return ;
            }
        }
        gf_ReleaseAberration(lp_aberrationCage, lp_user);
    }
}
void gf_CancelReleasingAberration (unit lp_aberrationCage) {
    // Variable Declarations
    int lv__aberrationCageIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__aberrationCageIndex = gf_GetAberrationCageIndex(lp_aberrationCage);
    // Implementation
    if ((lv__aberrationCageIndex != -1) && (gf_GetAberrationCageStatebyIndex(lv__aberrationCageIndex) == ge_AberrationCageState_InReleasing)) {
        gv_aberrationCageInfoArray[lv__aberrationCageIndex].lv_state = ge_AberrationCageState_Canceled;
    }
}
trigger auto_gf_ReleaseAberration_Trigger = null;
unit auto_gf_ReleaseAberration_lp_aberrationCage;
int auto_gf_ReleaseAberration_lp_user;
void gf_ReleaseAberration (unit lp_aberrationCage, int lp_user) {
    auto_gf_ReleaseAberration_lp_aberrationCage = lp_aberrationCage;
    auto_gf_ReleaseAberration_lp_user = lp_user;
    if (auto_gf_ReleaseAberration_Trigger == null) {
        auto_gf_ReleaseAberration_Trigger = TriggerCreate("auto_gf_ReleaseAberration_TriggerFunc");
    }
    TriggerExecute(auto_gf_ReleaseAberration_Trigger, false, false);
}
bool auto_gf_ReleaseAberration_TriggerFunc (bool testConds, bool runActions) {
    unit lp_aberrationCage = auto_gf_ReleaseAberration_lp_aberrationCage;
    int lp_user = auto_gf_ReleaseAberration_lp_user;
    // Variable Declarations
    int lv__i;
    int lv__aberrationCageIndex;
    unit lv__aberrationCageBuilding;
    unit lv__u;
    // Automatic Variable Declarations
    unitgroup auto2B42703B_g;
    int auto2B42703B_u;
    unitgroup autoC34FA84E_g;
    int autoC34FA84E_u;
    // Variable Initialization
    lv__aberrationCageIndex = gf_GetAberrationCageIndex(lp_aberrationCage);
    lv__aberrationCageBuilding = gf_GetAberrationCageBuildingbyIndex(lv__aberrationCageIndex);
    // Implementation
    if ((lv__aberrationCageIndex != -1) && gf_IsUser(lp_user) && (gf_GetAberrationCageStatebyIndex(lv__aberrationCageIndex) != ge_AberrationCageState_Released)) {
        gv_aberrationCageInfoArray[lv__aberrationCageIndex].lv_state = ge_AberrationCageState_Released;
        gf_SetDeviceStatetoUsed(lp_aberrationCage);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv__aberrationCageBuilding), c_animNameDefault, "Stand Work Start", 0, c_animTimeDefault);
        SoundPlayOnUnitForPlayer(SoundLink("Doodad_UmojanLabZergCage_StandWork", -1), c_maxPlayers, PlayerGroupAll(), lv__aberrationCageBuilding, 0.0, 100.0, 0.0);
        UnitBehaviorAddPlayer(lv__aberrationCageBuilding, "UmojanLabNotCollision", 0, 1);
        auto2B42703B_g = gf_GetAllMonitors();
        auto2B42703B_u = UnitGroupCount(auto2B42703B_g, c_unitCountAll);
        for (;; auto2B42703B_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto2B42703B_g, auto2B42703B_u);
            if (lv__u == null) { break; }
            if ((gf_DeviceUser(lv__u) != c_playerAny) && (gf_GetMonitoringCell(lv__u) == gf_GetCellwhereUnitExists(lp_aberrationCage))) {
                gf_SetAssistUserforFoundChangelingScore(gf_DeviceUser(lv__u), gv_mONITOR_SCORE_ASSIST_DURATION, false);
            }
        }
        Wait(2.0, c_timeGame);
        SoundStop(SoundLastPlayed(), true);
        if ((gf_GameState() != ge_GameState_MainGame)) {
            return true;
        }
        autoC34FA84E_g = gv_aberrationCageInfoArray[lv__aberrationCageIndex].lv_doorBlocker;
        autoC34FA84E_u = UnitGroupCount(autoC34FA84E_g, c_unitCountAll);
        for (;; autoC34FA84E_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoC34FA84E_g, autoC34FA84E_u);
            if (lv__u == null) { break; }
            UnitRemove(lv__u);
        }
        gf_DisplayAlertMessage(StringExternal("Param/Value/2BE1B82F"), PlayerGroupAll());
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv__aberrationCageBuilding), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
        UnitCreate(1, "InfestedAbomination", c_unitCreateIgnorePlacement, gv_pLAYER_ENEMY, UnitGetPosition(lv__aberrationCageBuilding), UnitGetFacing(lv__aberrationCageBuilding));
        gv_aberrationCageInfoArray[lv__aberrationCageIndex].lv_aberration = UnitLastCreated();
        SoundPlayOnUnitForPlayer(SoundLink("Aberration_Attack", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
        gf_WriteRecordtoArchive(lp_user, lp_aberrationCage, gf_GetCellwhereUnitExists(UnitLastCreated()), StringExternal("Param/Value/BE49ED55"));
    }
    return true;
}
unit gf_GetAberrationCage (int lp_index) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gf_GetLastAberrationCageIndex()))) {
        return gf_DevicebyIndex(gv_aberrationCageInfoArray[lp_index].lv_deviceIndex);
    }
    else {
        return null;
    }
}
unit gf_GetAberrationCageBuildingbyIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gf_GetLastAberrationCageIndex()))) {
        return gv_aberrationCageInfoArray[lp_index].lv_cageBuilding;
    }
    else {
        return null;
    }
}
int gf_GetAberrationCageIndex (unit lp_cage) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int auto6E9F8B46_ae = gv_aBCAGE_ARRAY_INDEX_MAX;
    const int auto6E9F8B46_ai = 1;
    // Variable Initialization
    // Implementation
    if ((lp_cage == null)) {
        return -1;
    }
    lv__i = 0;
    for ( ; ( (auto6E9F8B46_ai >= 0 && lv__i <= auto6E9F8B46_ae) || (auto6E9F8B46_ai < 0 && lv__i >= auto6E9F8B46_ae) ) ; lv__i += auto6E9F8B46_ai ) {
        if ((gv_deviceInfoArray[gv_aberrationCageInfoArray[lv__i].lv_deviceIndex].lv_unit == lp_cage)) {
            return lv__i;
        }
    }
    return -1;
}
int gf_GetAberrationCageIndexbyAberration (unit lp_aberration) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int auto79D93C21_ae;
    const int auto79D93C21_ai = 1;
    // Variable Initialization
    // Implementation
    if ((lp_aberration == null)) {
        return -1;
    }
    auto79D93C21_ae = gf_GetLastAberrationCageIndex();
    lv__i = 0;
    for ( ; ( (auto79D93C21_ai >= 0 && lv__i <= auto79D93C21_ae) || (auto79D93C21_ai < 0 && lv__i >= auto79D93C21_ae) ) ; lv__i += auto79D93C21_ai ) {
        if ((gv_aberrationCageInfoArray[lv__i].lv_aberration == lp_aberration)) {
            return lv__i;
        }
    }
    return -1;
}
int gf_GetLastAberrationCageIndex () {
    // Automatic Variable Declarations
    // Implementation
    return gv_aberrationCageIndexLast;
}
unitgroup gf_GetAllAberrations () {
    // Variable Declarations
    int lv__i;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    const int auto726C1915_ae = gv_aBCAGE_ARRAY_INDEX_MAX;
    const int auto726C1915_ai = 1;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    lv__i = 0;
    for ( ; ( (auto726C1915_ai >= 0 && lv__i <= auto726C1915_ae) || (auto726C1915_ai < 0 && lv__i >= auto726C1915_ae) ) ; lv__i += auto726C1915_ai ) {
        if ((gv_aberrationCageInfoArray[lv__i].lv_aberration != null)) {
            UnitGroupAdd(lv__ug, gv_aberrationCageInfoArray[lv__i].lv_aberration);
        }
    }
    return lv__ug;
}
unit gf_GetAberrationbyIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gf_GetLastAberrationCageIndex()))) {
        return gv_aberrationCageInfoArray[lp_index].lv_aberration;
    }
    else {
        return null;
    }
}
int gf_GetAberrationCageState (unit lp_cage) {
    // Automatic Variable Declarations
    // Implementation
    return gf_GetAberrationCageStatebyIndex(gf_GetAberrationCageIndex(lp_cage));
}
int gf_GetAberrationCageStatebyIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gf_GetLastAberrationCageIndex()))) {
        return gv_aberrationCageInfoArray[lp_index].lv_state;
    }
    else {
        return ge_AberrationCageState_None;
    }
}
void gf_InitializeArchive (unit lp_device) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isArchiveInitialized == false) && gf_CanInitializeNewDeviceInfo()) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_Archive, gf_DefaultDeviceFlag(ge_DeviceType_Archive));
        gv_archiveInfo.lv_deviceIndex = gv_deviceIndexLast;
        gv_isArchiveInitialized = true;
    }
    else {
        gf_Assert(ge_AssertType_AlreadyInitialized, "Initialize Archive");
    }
}
trigger auto_gf_WriteRecordtoArchive_Trigger = null;
int auto_gf_WriteRecordtoArchive_lp_user;
unit auto_gf_WriteRecordtoArchive_lp_device;
int auto_gf_WriteRecordtoArchive_lp_cell;
text auto_gf_WriteRecordtoArchive_lp_text;
void gf_WriteRecordtoArchive (int lp_user, unit lp_device, int lp_cell, text lp_text) {
    auto_gf_WriteRecordtoArchive_lp_user = lp_user;
    auto_gf_WriteRecordtoArchive_lp_device = lp_device;
    auto_gf_WriteRecordtoArchive_lp_cell = lp_cell;
    auto_gf_WriteRecordtoArchive_lp_text = lp_text;
    if (auto_gf_WriteRecordtoArchive_Trigger == null) {
        auto_gf_WriteRecordtoArchive_Trigger = TriggerCreate("auto_gf_WriteRecordtoArchive_TriggerFunc");
    }
    TriggerExecute(auto_gf_WriteRecordtoArchive_Trigger, false, false);
}
bool auto_gf_WriteRecordtoArchive_TriggerFunc (bool testConds, bool runActions) {
    int lp_user = auto_gf_WriteRecordtoArchive_lp_user;
    unit lp_device = auto_gf_WriteRecordtoArchive_lp_device;
    int lp_cell = auto_gf_WriteRecordtoArchive_lp_cell;
    text lp_text = auto_gf_WriteRecordtoArchive_lp_text;
    // Variable Declarations
    int lv__recordedPlayer;
    text lv__recordText;
    text lv__timeStamp;
    int lv__recordIndex;
    const int lv__checkDelay = 3;
    fixed lv__f;
    // Automatic Variable Declarations
    const int auto8E0C86A5_ae = gv_aRCHIVE_RECORD_DELAY;
    const int auto8E0C86A5_ai = lv__checkDelay;
    // Variable Initialization
    lv__recordedPlayer = gf_GetDisguiseTargetUserifUserisChangeling(lp_user);
    // Implementation
    if ((gf_GameState() == ge_GameState_MainGame) && (gf_GetPowerState() == ge_PowerStateType_PowerOn) && (TriggerActiveCount(TriggerGetCurrent()) < gv_aRCHIVE_WRITING_INSTANCE_MAX)) {
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/F5DD35A1"));
        return true;
    }
    gv_archiveInfo.lv_recordingNumber = (gv_archiveInfo.lv_recordingNumber+1);
    gf_UpdateArchiveRecordingNumberLabel();
    TextExpressionSetToken("Param/Expression/DF8A9078", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_gameTimer))));
    lv__recordText = TextExpressionAssemble("Param/Expression/DF8A9078");
    lv__f = 0.0;
    for ( ; ( (auto8E0C86A5_ai >= 0 && lv__f <= auto8E0C86A5_ae) || (auto8E0C86A5_ai < 0 && lv__f >= auto8E0C86A5_ae) ) ; lv__f += auto8E0C86A5_ai ) {
        if ((gf_GameState() == ge_GameState_MainGame) && (gf_GetPowerState() == ge_PowerStateType_PowerOn)) {
            Wait(lv__checkDelay, c_timeGame);
        }
        else {
            gv_archiveInfo.lv_recordingNumber = (gv_archiveInfo.lv_recordingNumber-1);
            gf_UpdateArchiveRecordingNumberLabel();
            return true;
        }
    }
    lv__recordIndex = gf_NextRecordIndex(gv_archiveInfo.lv_lastRecordIndex);
    if ((lv__recordIndex == -1)) {
        gv_archiveInfo.lv_firstRecordIndex = 0;
        lv__recordIndex = 0;
    }
    else if ((lv__recordIndex == gv_archiveInfo.lv_firstRecordIndex)) {
        gv_archiveInfo.lv_firstRecordIndex = gf_NextRecordIndex(gv_archiveInfo.lv_firstRecordIndex);
    }
    if (gf_IsUser(lv__recordedPlayer)) {
        TextExpressionSetToken("Param/Expression/37BAAE42", "recordText", lv__recordText);
        TextExpressionSetToken("Param/Expression/37BAAE42", "player", gf_RecordedUserNamewithColor(lv__recordedPlayer));
        lv__recordText = TextExpressionAssemble("Param/Expression/37BAAE42");
    }
    TextExpressionSetToken("Param/Expression/C9F002A3", "recordText", lv__recordText);
    TextExpressionSetToken("Param/Expression/C9F002A3", "mainText", lp_text);
    lv__recordText = TextExpressionAssemble("Param/Expression/C9F002A3");
    if ((lp_cell != ge_Cell_None)) {
        TextExpressionSetToken("Param/Expression/022434E1", "recordText", lv__recordText);
        TextExpressionSetToken("Param/Expression/022434E1", "cellName", gf_GetCellName(lp_cell));
        lv__recordText = TextExpressionAssemble("Param/Expression/022434E1");
    }
    gv_archiveInfo.lv_textRecord[lv__recordIndex] = lv__recordText;
    gv_archiveInfo.lv_cellRecord[lv__recordIndex] = lp_cell;
    gv_archiveInfo.lv_playerRecord[lv__recordIndex] = lv__recordedPlayer;
    gv_archiveInfo.lv_deviceRecord[lv__recordIndex] = lp_device;
    gv_archiveInfo.lv_lastRecordIndex = lv__recordIndex;
    gv_archiveInfo.lv_recordingNumber = (gv_archiveInfo.lv_recordingNumber-1);
    gf_UpdateArchiveRecordingNumberLabel();
    gf_UpdateArchivePanel();
    return true;
}
unit gf_ArchiveUnit () {
    // Automatic Variable Declarations
    // Implementation
    return gf_DevicebyIndex(gv_archiveInfo.lv_deviceIndex);
}
timer gf_ArchiveTimer () {
    // Automatic Variable Declarations
    // Implementation
    return gv_archiveInfo.lv_timer;
}
int gf_FirstRecordIndexofArchive () {
    // Automatic Variable Declarations
    // Implementation
    return gv_archiveInfo.lv_firstRecordIndex;
}
int gf_LastRecordIndexofArchive () {
    // Automatic Variable Declarations
    // Implementation
    return gv_archiveInfo.lv_lastRecordIndex;
}
int gf_CellRecordfromArchive (int lp_archiveIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_archiveIndex >= 0) && (lp_archiveIndex <= gv_aRCHIVE_LIST_INDEX_MAX))) {
        return gv_archiveInfo.lv_cellRecord[lp_archiveIndex];
    }
    else {
        return ge_Cell_None;
    }
}
int gf_PlayerRecordFromArchive (int lp_archiveIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_archiveIndex >= 0) && (lp_archiveIndex <= gv_aRCHIVE_LIST_INDEX_MAX))) {
        return gv_archiveInfo.lv_playerRecord[lp_archiveIndex];
    }
    else {
        return c_playerAny;
    }
}
unit gf_DeviceRecordFromArchive (int lp_archiveIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_archiveIndex >= 0) && (lp_archiveIndex <= gv_aRCHIVE_LIST_INDEX_MAX))) {
        return gv_archiveInfo.lv_deviceRecord[lp_archiveIndex];
    }
    else {
        return null;
    }
}
text gf_TextRecordfromArchive (int lp_archiveIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_archiveIndex >= 0) && (lp_archiveIndex <= gv_aRCHIVE_LIST_INDEX_MAX))) {
        return gv_archiveInfo.lv_textRecord[lp_archiveIndex];
    }
    else {
        return null;
    }
}
int gf_NextRecordIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gv_aRCHIVE_LIST_INDEX_MAX))) {
        if ((lp_index == gv_aRCHIVE_LIST_INDEX_MAX)) {
            return 0;
        }
        else {
            return (lp_index+1);
        }
    }
    else {
        return gv_archiveInfo.lv_firstRecordIndex;
    }
}
int gf_PreviousRecordIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index >= 0) && (lp_index <= gv_aRCHIVE_LIST_INDEX_MAX))) {
        if ((lp_index == 0)) {
            return gv_aRCHIVE_LIST_INDEX_MAX;
        }
        else {
            return (lp_index-1);
        }
    }
    else {
        return gv_archiveInfo.lv_lastRecordIndex;
    }
}
void gf_IncineratorTimerExpires (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventTimer(t, gv_incineratorInfo.lv_timer);
}
void gf_IncineratorOperationFinished (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "Incinerator Operation Finished");
}
void gf_InitializeIncinerator (unit lp_device, unit lp_gate, region lp_targetRegion) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isIncineratorInfoInitialized == false) && gf_CanInitializeNewDeviceInfo()) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_Incinerator, gf_DefaultDeviceFlag(ge_DeviceType_Incinerator));
        gv_incineratorInfo.lv_deviceIndex = gv_deviceIndexLast;
        gv_incineratorInfo.lv_state = ge_IncineratorState_Stabilized;
        gv_incineratorInfo.lv_gate = lp_gate;
        gv_incineratorInfo.lv_targetRegion = lp_targetRegion;
        gv_isIncineratorInfoInitialized = true;
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/B22C5D09"));
    }
}
void gf_SetIncineratorStatetoPreparing (fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    gv_incineratorInfo.lv_state = ge_IncineratorState_Preparing;
    WaterSetState(gv_iNCI_WATER_NORMAL, 0.0, c_wtcLinear);
    WaterSetState(gv_iNCI_WATER_PREPARED, lp_time, c_wtcLinear);
    TimerStart(gf_IncineratorTimer(), lp_time, false, c_timeGame);
    if (((gf_GameState() != ge_GameState_MainGame) || (gf_GetPowerState() == ge_PowerStateType_PowerOff))) {
    }
    gf_UpdatePanelofIncinerator();
}
void gf_SetIncineratorStatetoPrepared () {
    // Automatic Variable Declarations
    // Implementation
    gv_incineratorInfo.lv_state = ge_IncineratorState_Prepared;
    WaterSetState(gv_iNCI_WATER_PREPARED, 0.0, c_wtcLinear);
    gf_UpdatePanelofIncinerator();
}
void gf_SetIncineratorStatetoStabilizing (fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    gv_incineratorInfo.lv_state = ge_IncineratorState_Stabilizing;
    WaterSetState(gv_iNCI_WATER_NORMAL, 0.0, c_wtcLinear);
    TimerStart(gv_incineratorInfo.lv_timer, lp_time, false, c_timeGame);
    gf_UpdatePanelofIncinerator();
}
void gf_SetIncineratorStatetoStabilized () {
    // Automatic Variable Declarations
    // Implementation
    gv_incineratorInfo.lv_state = ge_IncineratorState_Stabilized;
    WaterSetState(gv_iNCI_WATER_NORMAL, 0.0, c_wtcLinear);
    gf_UpdatePanelofIncinerator();
}
trigger auto_gf_RunIncinerator_Trigger = null;
int auto_gf_RunIncinerator_lp_user;
fixed auto_gf_RunIncinerator_lp_timeRunning;
fixed auto_gf_RunIncinerator_lp_timeStabilizing;
bool auto_gf_RunIncinerator_lp_requiresPower;
void gf_RunIncinerator (int lp_user, fixed lp_timeRunning, fixed lp_timeStabilizing, bool lp_requiresPower) {
    auto_gf_RunIncinerator_lp_user = lp_user;
    auto_gf_RunIncinerator_lp_timeRunning = lp_timeRunning;
    auto_gf_RunIncinerator_lp_timeStabilizing = lp_timeStabilizing;
    auto_gf_RunIncinerator_lp_requiresPower = lp_requiresPower;
    if (auto_gf_RunIncinerator_Trigger == null) {
        auto_gf_RunIncinerator_Trigger = TriggerCreate("auto_gf_RunIncinerator_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunIncinerator_Trigger, false, false);
}
bool auto_gf_RunIncinerator_TriggerFunc (bool testConds, bool runActions) {
    int lp_user = auto_gf_RunIncinerator_lp_user;
    fixed lp_timeRunning = auto_gf_RunIncinerator_lp_timeRunning;
    fixed lp_timeStabilizing = auto_gf_RunIncinerator_lp_timeStabilizing;
    bool lp_requiresPower = auto_gf_RunIncinerator_lp_requiresPower;
    // Variable Declarations
    const int lv__PHASE_1 = 5;
    const int lv__PHASE_2 = 1;
    const int lv__PHASE_3 = 4;
    unitgroup lv__ug;
    playergroup lv__pg;
    int lv__i;
    unit lv__u;
    // Automatic Variable Declarations
    playergroup auto8AD92516_g;
    unitgroup auto4C503020_g;
    int auto4C503020_u;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    lv__pg = PlayerGroupEmpty();
    // Implementation
    if (((gf_GameState() != ge_GameState_MainGame) || (gf_IsUser(lp_user) == false) || ((lp_requiresPower == true) && (gf_GetPowerState() == ge_PowerStateType_PowerOff)))) {
        gf_CustomDebugMessage(StringExternal("Param/Value/2196EB65"));
        return true;
    }
    gv_incineratorInfo.lv_state = ge_IncineratorState_Running;
    UnitIssueOrder(gf_IncineratorGate(), Order(AbilityCommand("DestructibleGateStraightVerticalLF", 0)), c_orderQueueReplace);
    auto8AD92516_g = gf_UsersinIncineratorTargetArea();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto8AD92516_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetLocalEnvironmentStateforUserwithObs(lv__i, ge_EnvironmentState_InIncinerator);
    }
    SoundPlayOnUnitForPlayer(SoundLink("Doodad_UmojanLabAlarms", -1), c_maxPlayers, PlayerGroupAll(), gf_IncineratorGate(), 0.0, 100.0, 0.0);
    WaterSetState(gv_iNCI_WATER_PREPARED, 0.0, c_wtcLinear);
    gf_UpdatePanelofIncinerator();
    Wait(lv__PHASE_1, c_timeGame);
    if (((gf_GameState() != ge_GameState_MainGame) || (gf_IncineratorState() != ge_IncineratorState_Running))) {
        SoundStop(SoundLastPlayed(), false);
        return true;
    }
    if ((lp_requiresPower == true) && (gf_GetPowerState() == ge_PowerStateType_PowerOff)) {
        SoundStop(SoundLastPlayed(), false);
        WaterSetState(gv_iNCI_WATER_NORMAL, 5.0, c_wtcLinear);
        return true;
    }
    WaterSetState(gv_iNCI_WATER_RUNNING, lv__PHASE_2, c_wtcLinear);
    Wait(lv__PHASE_2, c_timeGame);
    if (((gf_GameState() != ge_GameState_MainGame) || (gf_IncineratorState() != ge_IncineratorState_Running))) {
        SoundStop(SoundLastPlayed(), false);
        return true;
    }
    auto4C503020_g = gf_UnitsinIncineratorTargetArea();
    auto4C503020_u = UnitGroupCount(auto4C503020_g, c_unitCountAll);
    for (;; auto4C503020_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto4C503020_g, auto4C503020_u);
        if (lv__u == null) { break; }
        PlayerCreateEffectUnit(lp_user, "Kill2", lv__u);
    }
    Wait(lv__PHASE_3, c_timeGame);
    if (((gf_GameState() != ge_GameState_MainGame) || (gf_IncineratorState() != ge_IncineratorState_Running))) {
        SoundStop(SoundLastPlayed(), false);
        return true;
    }
    if ((lp_timeRunning > (lv__PHASE_1+lv__PHASE_2+lv__PHASE_3))) {
        WaterSetState(gv_iNCI_WATER_NORMAL, (lp_timeRunning-lv__PHASE_1-lv__PHASE_2-lv__PHASE_3), c_wtcLinear);
        Wait((lp_timeRunning-lv__PHASE_1-lv__PHASE_2-lv__PHASE_3), c_timeGame);
    }
    else {
        WaterSetState(gv_iNCI_WATER_NORMAL, 1.0, c_wtcLinear);
        Wait(1.0, c_timeGame);
    }
    SoundStop(SoundLastPlayed(), false);
    UnitIssueOrder(gf_IncineratorGate(), Order(AbilityCommand("DestructibleGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
    if (((gf_GameState() != ge_GameState_MainGame) || (gf_IncineratorState() != ge_IncineratorState_Running))) {
        return true;
    }
    TriggerSendEvent("IncineratorOperationFinished");
    gf_SetIncineratorStatetoStabilizing(lp_timeStabilizing);
    return true;
}
void gf_CancelRunningIncinerator () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_IncineratorState() == ge_IncineratorState_Running)) {
        gv_incineratorInfo.lv_state = ge_IncineratorState_Canceled;
    }
}
unit gf_IncineratorUnit () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isIncineratorInfoInitialized == true)) {
        return gf_DevicebyIndex(gv_incineratorInfo.lv_deviceIndex);
    }
    else {
        return null;
    }
}
int gf_IncineratorState () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isIncineratorInfoInitialized == true)) {
        return gv_incineratorInfo.lv_state;
    }
    else {
        return ge_IncineratorState_None;
    }
}
unit gf_IncineratorGate () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isIncineratorInfoInitialized == true)) {
        return gv_incineratorInfo.lv_gate;
    }
    else {
        return null;
    }
}
timer gf_IncineratorTimer () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isIncineratorInfoInitialized == true)) {
        return gv_incineratorInfo.lv_timer;
    }
    else {
        return null;
    }
}
region gf_IncineratorTargetArea () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isIncineratorInfoInitialized == true)) {
        return gv_incineratorInfo.lv_targetRegion;
    }
    else {
        return null;
    }
}
unitgroup gf_UnitsinIncineratorTargetArea () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isIncineratorInfoInitialized == true)) {
        return UnitGroup(null, c_playerAny, gv_incineratorInfo.lv_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    }
    else {
        return null;
    }
}
playergroup gf_UsersinIncineratorTargetArea () {
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto7AB6EC18_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    if ((gv_isIncineratorInfoInitialized == true)) {
        auto7AB6EC18_g = gf_AliveUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto7AB6EC18_g, lv__i);
            if (lv__i < 0) { break; }
            if ((libNtve_gf_UnitInRegion(gf_CharacterUnit(lv__i), gv_incineratorInfo.lv_targetRegion) == true)) {
                PlayerGroupAdd(lv__pg, lv__i);
            }
        }
        return lv__pg;
    }
    else {
        return null;
    }
}
void gf_InitializeMedicalBot (unit lp_device, unit lp_healer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isMedicalBotInitialized == false) && gf_CanInitializeNewDeviceInfo()) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_MedicalBot, gf_DefaultDeviceFlag(ge_DeviceType_MedicalBot));
        gv_medicalBotInfo.lv_state = ge_MedicalBotState_Idle;
        gv_medicalBotInfo.lv_healer = lp_healer;
        gv_isMedicalBotInitialized = true;
    }
    else {
        gf_Assert(ge_AssertType_AlreadyInitialized, "Initialize Medical Bot");
    }
}
void gf_OrderMedicalBottoStartHealing (unit lp_medicalBot, int lp_user, fixed lp_preparingTime) {
    // Variable Declarations
    int lv__f;
    timer lv__timer;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__timer = TimerCreate();
    // Implementation
    if (((gf_DeviceType(lp_medicalBot) != ge_DeviceType_MedicalBot) || (gf_IsUserAlive(lp_user) == false))) {
        gf_CustomDebugMessage(StringExternal("Param/Value/8B404143"));
        return ;
    }
    gf_WriteRecordtoArchive(lp_user, gf_MedicalBotHealerUnit(), gf_GetCellwhereUnitExists(lp_medicalBot), StringExternal("Param/Value/BE1E413A"));
    gv_medicalBotInfo.lv_state = ge_MedicalBotState_Preparing;
    gf_UpdatePanelofMedicalBot();
    TimerStart(lv__timer, lp_preparingTime, false, c_timeGame);
    gf_ActivateProgressBarforTimer(gf_GetMedicalBotProgressBar(), lp_user, lv__timer);
    while ((TimerGetRemaining(lv__timer) > 0.0)) {
        if ((gf_GameState() == ge_GameState_MainGame) && (gf_GetPowerState() == ge_PowerStateType_PowerOn) && (gf_MedicalBotState() == ge_MedicalBotState_Preparing) && gf_IsUserAlive(lp_user)) {
            Wait(0.0625, c_timeGame);
        }
        else {
            if ((gf_MedicalBotState() != ge_MedicalBotState_Healing) && (gf_MedicalBotState() != ge_MedicalBotState_Idle)) {
                gv_medicalBotInfo.lv_state = ge_MedicalBotState_Idle;
            }
            libNtve_gf_StopTimer(TimerLastStarted());
            return ;
        }
    }
    gf_OrderMedicalBottoHealCharacter(lp_medicalBot, lp_user);
}
void gf_OrderMedicalBottoHealCharacter (unit lp_medicalBot, int lp_user) {
    // Variable Declarations
    unit lv__character;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__character = gf_CharacterUnit(lp_user);
    // Implementation
    if (((gf_DeviceType(lp_medicalBot) != ge_DeviceType_MedicalBot) || (gf_IsUserAlive(lp_user) == false))) {
        gf_CustomDebugMessage(StringExternal("Param/Value/3334F1D8"));
        return ;
    }
    gv_medicalBotInfo.lv_state = ge_MedicalBotState_Healing;
    gf_ActivateProgressBarforUnitProperty(gf_GetMedicalBotProgressBar(), lp_user, gf_CharacterUnit(lp_user), c_unitPropLifePercent);
    gf_UpdatePanelofMedicalBot();
    UnitIssueOrder(gf_MedicalBotHealerUnit(), OrderTargetingUnit(AbilityCommand("heal", 0), gf_CharacterUnit(lp_user)), c_orderQueueReplace);
    while ((UnitGetPropertyFixed(lv__character, c_unitPropLife, c_unitPropCurrent) < UnitTypeGetProperty(UnitGetType(lv__character), c_unitPropLifeMax))) {
        if ((gf_MedicalBotState() != ge_MedicalBotState_Healing)) {
            if ((gf_MedicalBotState() == ge_MedicalBotState_Canceled)) {
                gv_medicalBotInfo.lv_state = ge_MedicalBotState_Idle;
            }
            gf_RequestStopProgressBar(gf_GetMedicalBotProgressBar(), lp_user);
            UnitIssueOrder(gf_MedicalBotHealerUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            return ;
        }
        else {
            Wait(0.0625, c_timeGame);
        }
    }
    gf_RequestStopProgressBar(gf_GetMedicalBotProgressBar(), lp_user);
    UnitIssueOrder(gf_MedicalBotHealerUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    gv_medicalBotInfo.lv_state = ge_MedicalBotState_Completed;
    gf_DisplayInformationMessage(StringExternal("Param/Value/1E8D22E3"), gf_GetUserwithObservers(lp_user));
    if ((gf_DeviceUser(lp_medicalBot) != c_playerAny)) {
        gf_RemoveCharacterStateofControllingDevice(gf_DeviceUser(lp_medicalBot));
    }
}
void gf_CancelMedicalBotHealing (unit lp_medicalBot) {
    // Variable Declarations
    int lv__f;
    timer lv__timer;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__timer = TimerCreate();
    // Implementation
    if (((gf_MedicalBotState() == ge_MedicalBotState_Healing) || (gf_MedicalBotState() == ge_MedicalBotState_Preparing))) {
        gv_medicalBotInfo.lv_state = ge_MedicalBotState_Canceled;
    }
    else {
        return ;
    }
    gf_UpdatePanelofMedicalBot();
}
int gf_MedicalBotState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_medicalBotInfo.lv_state;
}
unit gf_MedicalBotHealerUnit () {
    // Automatic Variable Declarations
    // Implementation
    return gv_medicalBotInfo.lv_healer;
}
void gf_MonitorTimerExpires (trigger t) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int autoF54B64DB_ae = gv_mONITOR_INDEX_MAX;
    const int autoF54B64DB_ai = 1;
    // Variable Initialization
    // Implementation
    lv__i = 0;
    for ( ; ( (autoF54B64DB_ai >= 0 && lv__i <= autoF54B64DB_ae) || (autoF54B64DB_ai < 0 && lv__i >= autoF54B64DB_ae) ) ; lv__i += autoF54B64DB_ai ) {
        TriggerAddEventTimer(t, gv_monitorInfoArray[lv__i].lv_targetingDelayTimer);
    }
}
void gf_InitializeMonitorInfo (unit lp_device) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_device != null) && gf_CanInitializeNewDeviceInfo() && (gv_monitorIndexLast != gv_mONITOR_INDEX_MAX)) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_Monitor, gf_DefaultDeviceFlag(ge_DeviceType_Monitor));
        if ((gv_monitorIndexLast != -1)) {
            gv_monitorIndexLast = (gv_monitorIndexLast+1);
        }
        else {
            gv_monitorIndexLast = 0;
        }
        gv_monitorInfoArray[gv_monitorIndexLast].lv_unit = lp_device;
        gv_monitorInfoArray[gv_monitorIndexLast].lv_deviceIndex = gv_deviceIndexLast;
        gv_monitorInfoArray[gv_monitorIndexLast].lv_monitoringCell = gf_GetCellbyIndex(RandomInt(0, (gv_initializedCellCounter-1)));
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/0DC975C5"));
    }
}
void gf_SetMonitoringCell (unit lp_monitor, int lp_targetCell) {
    // Variable Declarations
    int lv__monitorIndex;
    int lv__user;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitorIndex = gf_GetMonitorIndex(lp_monitor);
    lv__user = gf_DeviceUser(lp_monitor);
    // Implementation
    if ((lv__monitorIndex != -1)) {
        gv_monitorInfoArray[lv__monitorIndex].lv_monitoringCell = lp_targetCell;
        if ((lv__user != c_playerAny)) {
            gf_SetUsertoWatchEntireCellArea(lv__user, lp_targetCell);
        }
    }
}
void gf_SetUsertoWatchEntireCellArea (int lp_user, int lp_targetCell) {
    // Variable Declarations
    unit lv__u;
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoA84955C0_g;
    unitgroup auto9804E883_g;
    int auto9804E883_u;
    // Variable Initialization
    // Implementation
    if (gf_IsUserAlive(lp_user) && (lp_targetCell != ge_Cell_None)) {
        gf_ClearRevealerforPlayer(lp_user);
        autoA84955C0_g = gf_GetUserwithObservers(lp_user);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoA84955C0_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCameraModetoTopSideView(lv__i, gf_GetCellRegion(lp_targetCell), 0.0, RegionGetCenter(gf_GetCellRegion(lp_targetCell)));
        }
        auto9804E883_g = UnitGroup("Revealer", gv_pLAYER_NEUTRAL, gf_GetCellRegion(lp_targetCell), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9804E883_u = UnitGroupCount(auto9804E883_g, c_unitCountAll);
        for (;; auto9804E883_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto9804E883_g, auto9804E883_u);
            if (lv__u == null) { break; }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Revealer", c_unitCreateIgnorePlacement, lp_user, UnitGetPosition(lv__u));
        }
    }
}
void gf_ClearRevealerforPlayer (int lp_player) {
    // Variable Declarations
    unit lv__u;
    int lv__i;
    // Automatic Variable Declarations
    unitgroup auto46D17BC7_g;
    int auto46D17BC7_u;
    // Variable Initialization
    // Implementation
    auto46D17BC7_g = UnitGroup("Revealer", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto46D17BC7_u = UnitGroupCount(auto46D17BC7_g, c_unitCountAll);
    for (;; auto46D17BC7_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto46D17BC7_g, auto46D17BC7_u);
        if (lv__u == null) { break; }
        UnitRemove(lv__u);
    }
}
unit gf_GetMonitor (int lp_monitorIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_monitorIndex >= 0) && (lp_monitorIndex <= gv_monitorIndexLast))) {
        return gf_DevicebyIndex(gv_monitorInfoArray[lp_monitorIndex].lv_deviceIndex);
    }
    else {
        return null;
    }
}
unit gf_GetMonitorbyTriggeringPulldown () {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int auto3D4F70EB_ae;
    const int auto3D4F70EB_ai = 1;
    // Variable Initialization
    // Implementation
    auto3D4F70EB_ae = gv_monitorIndexLast;
    lv__i = 0;
    for ( ; ( (auto3D4F70EB_ai >= 0 && lv__i <= auto3D4F70EB_ae) || (auto3D4F70EB_ai < 0 && lv__i >= auto3D4F70EB_ae) ) ; lv__i += auto3D4F70EB_ai ) {
        if ((gv_monitorPanelArray[lv__i].lv_pulldown == EventDialogControl())) {
            return gf_DevicebyIndex(gv_monitorInfoArray[lv__i].lv_deviceIndex);
        }
    }
    return null;
}
unit gf_GetMonitorbyTriggeringTimer () {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int auto48D3C698_ae;
    const int auto48D3C698_ai = 1;
    // Variable Initialization
    // Implementation
    auto48D3C698_ae = gv_monitorIndexLast;
    lv__i = 0;
    for ( ; ( (auto48D3C698_ai >= 0 && lv__i <= auto48D3C698_ae) || (auto48D3C698_ai < 0 && lv__i >= auto48D3C698_ae) ) ; lv__i += auto48D3C698_ai ) {
        if ((gv_monitorInfoArray[lv__i].lv_targetingDelayTimer == EventTimer())) {
            return gf_DevicebyIndex(gv_monitorInfoArray[lv__i].lv_deviceIndex);
        }
    }
    return null;
}
int gf_GetMonitoringCell (unit lp_monitor) {
    // Variable Declarations
    int lv__monitorIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitorIndex = gf_GetMonitorIndex(lp_monitor);
    // Implementation
    if ((lv__monitorIndex != -1)) {
        return gv_monitorInfoArray[lv__monitorIndex].lv_monitoringCell;
    }
    else {
        return ge_Cell_None;
    }
}
int gf_GetMonitorIndex (unit lp_monitor) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int autoB68A4D2D_ae;
    const int autoB68A4D2D_ai = 1;
    // Variable Initialization
    // Implementation
    if ((gf_DeviceType(lp_monitor) != ge_DeviceType_Monitor)) {
        return -1;
    }
    autoB68A4D2D_ae = gv_monitorIndexLast;
    lv__i = 0;
    for ( ; ( (autoB68A4D2D_ai >= 0 && lv__i <= autoB68A4D2D_ae) || (autoB68A4D2D_ai < 0 && lv__i >= autoB68A4D2D_ae) ) ; lv__i += autoB68A4D2D_ai ) {
        if ((gv_monitorInfoArray[lv__i].lv_unit == lp_monitor)) {
            return lv__i;
        }
    }
    return -1;
}
timer gf_GetMonitorTargetingDelayTimer (unit lp_monitor) {
    // Variable Declarations
    int lv__monitorIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitorIndex = gf_GetMonitorIndex(lp_monitor);
    // Implementation
    if ((lv__monitorIndex != -1)) {
        return gv_monitorInfoArray[lv__monitorIndex].lv_targetingDelayTimer;
    }
    else {
        return null;
    }
}
timer gf_GetMonitorTransmitCooldownTimer (unit lp_monitor) {
    // Variable Declarations
    int lv__monitorIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitorIndex = gf_GetMonitorIndex(lp_monitor);
    // Implementation
    if ((lv__monitorIndex != -1)) {
        return gv_monitorInfoArray[lv__monitorIndex].lv_transmitCooldownTimer;
    }
    else {
        return null;
    }
}
unitgroup gf_GetAllMonitors () {
    // Variable Declarations
    int lv__i;
    unit lv__u;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    int auto65F37C3E_ae;
    const int auto65F37C3E_ai = 1;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Implementation
    if ((gv_monitorIndexLast < 0)) {
        return null;
    }
    auto65F37C3E_ae = gv_monitorIndexLast;
    lv__i = 0;
    for ( ; ( (auto65F37C3E_ai >= 0 && lv__i <= auto65F37C3E_ae) || (auto65F37C3E_ai < 0 && lv__i >= auto65F37C3E_ae) ) ; lv__i += auto65F37C3E_ai ) {
        UnitGroupAdd(lv__ug, gv_monitorInfoArray[lv__i].lv_unit);
    }
    return lv__ug;
}
int gf_GetLastMonitorIndex () {
    // Automatic Variable Declarations
    // Implementation
    return gv_monitorIndexLast;
}
void gf_InitializePhaseShifter (unit lp_device, point lp_arrivalPoint, unit lp_gate) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_device != null) && (lp_arrivalPoint != null) && (lp_gate != null) && (gf_GetLastIndexofPhaseShifter() < gv_pHASESHIFTER_INDEX_MAX) && gf_CanInitializeNewDeviceInfo()) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_PhaseShifter, ge_DeviceFlag_NeedsPower);
        gv_phaseShifterLastIndex = (gv_phaseShifterLastIndex+1);
        gv_phaseShifterInfoArray[gv_phaseShifterLastIndex].lv_deviceIndex = gv_deviceIndexLast;
        gv_phaseShifterInfoArray[gv_phaseShifterLastIndex].lv_arrivalPoint = lp_arrivalPoint;
        gv_phaseShifterInfoArray[gv_phaseShifterLastIndex].lv_gate = lp_gate;
    }
    else {
        gf_Assert(ge_AssertType_ParameterException, "Initialize PhaseShifter");
    }
}
int gf_GetLastIndexofPhaseShifter () {
    // Automatic Variable Declarations
    // Implementation
    return gv_phaseShifterLastIndex;
}
void gf_InitializePowerController (unit lp_device) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isPowerControllerInitialized == false) && gf_CanInitializeNewDeviceInfo()) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_PowerController, gf_DefaultDeviceFlag(ge_DeviceType_PowerController));
        gv_powerControllerInfo.lv_deviceIndex = gv_deviceIndexLast;
        gv_powerControllerInfo.lv_state = ge_PowerControllerState_Supplying;
        gv_isPowerControllerInitialized = true;
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/964D83E5"));
    }
}
unit gf_PowerControllerUnit () {
    // Automatic Variable Declarations
    // Implementation
    return gf_DevicebyIndex(gv_powerControllerInfo.lv_deviceIndex);
}
int gf_PowerControllerState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_powerControllerInfo.lv_state;
}
timer gf_PowerControllerTimer () {
    // Automatic Variable Declarations
    // Implementation
    return gv_powerControllerInfo.lv_timer;
}
void gf_PowerControllerTimerExpiers (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventTimer(t, gv_powerControllerInfo.lv_timer);
}
unit gf_GetRDT () {
    // Automatic Variable Declarations
    // Implementation
    return gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex);
}
int gf_GetRDTState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_rdtInfo.lv_state;
}
timer gf_GetRDTTimer () {
    // Automatic Variable Declarations
    // Implementation
    return gv_rdtInfo.lv_timer;
}
int gf_GetTargetUserofRDT () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_rdtInfo.lv_state == ge_RDTState_Scanning)) {
        return gv_rdtInfo.lv_scanTarget;
    }
    else {
        return c_playerAny;
    }
}
void gf_InitializeRadiationDiagnosticTester (unit lp_device) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isRDTInitialized == false) && gf_CanInitializeNewDeviceInfo()) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_RadiationDiagnosticTester, gf_DefaultDeviceFlag(ge_DeviceType_RadiationDiagnosticTester));
        gv_rdtInfo.lv_deviceIndex = gv_deviceIndexLast;
        gv_rdtInfo.lv_state = ge_RDTState_Preparing;
        TimerStart(gv_rdtInfo.lv_timer, gv_rDT_PREPARING_TIME, false, c_timeGame);
        TimerPause(TimerLastStarted(), true);
        gv_isRDTInitialized = true;
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/2DA06765"));
    }
}
void gf_SetRDTStatetoPreparing (fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(gv_rdtInfo.lv_timer, lp_time, false, c_timeGame);
    if (((gf_GameState() != ge_GameState_MainGame) || (gf_GetPowerState() == ge_PowerStateType_PowerOff))) {
        TimerPause(TimerLastStarted(), true);
    }
    gv_rdtInfo.lv_state = ge_RDTState_Preparing;
    gf_UpdatePanelofRDT();
}
void gf_SetRDTStatetoPrepared () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_StopTimer(gv_rdtInfo.lv_timer);
    gv_rdtInfo.lv_state = ge_RDTState_Prepared;
    gf_UpdatePanelofRDT();
}
void gf_RDTStartScanning (int lp_targetUser, fixed lp_scanningTime, fixed lp_preparingTime) {
    // Variable Declarations
    fixed lv__f;
    int lv__soundCnt;
    timer lv__timer;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__timer = TimerCreate();
    // Implementation
    if ((gf_GameState() == ge_GameState_MainGame) && gf_IsUserAlive(lp_targetUser)) {
        TimerStart(lv__timer, lp_scanningTime, false, c_timeGame);
        gv_rdtInfo.lv_state = ge_RDTState_Scanning;
        gv_rdtInfo.lv_scanTarget = lp_targetUser;
        gf_ActivateProgressBarforTimer(gv_rdtPanel.lv_progressBar, lp_targetUser, lv__timer);
        gf_UpdatePanelofRDT();
        while ((TimerGetRemaining(lv__timer) > 0.0)) {
            if ((gf_GameState() == ge_GameState_MainGame) && (gv_rdtInfo.lv_state == ge_RDTState_Scanning)) {
                if ((lv__soundCnt == 0)) {
                    SoundPlayForPlayer(SoundLink("UI_BnetCountdownBeep", -1), c_maxPlayers, gf_GetUserwithObservers(lp_targetUser), 100.0, 0.0);
                    lv__soundCnt = 16;
                }
                else {
                    lv__soundCnt = (lv__soundCnt-1);
                }
            }
            else {
                break;
            }
            Wait(0.0625, c_timeGame);
        }
        if ((gv_rdtInfo.lv_state == ge_RDTState_Canceled)) {
            gf_WriteRecordtoArchive(lp_targetUser, gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex), gf_GetCellwhereUnitExists(gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex)), StringExternal("Param/Value/871A3DB8"));
            gf_SetRDTStatetoPreparing(lp_preparingTime);
            return ;
        }
        gf_RDTScanTargetUser(lp_targetUser);
        if ((gf_DeviceState(gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex)) == ge_DeviceState_InUse)) {
            gf_RemoveCharacterStateofControllingDevice(gf_DeviceUser(gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex)));
        }
        gf_SetRDTStatetoPreparing(lp_preparingTime);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/C9CDA1DE"));
    }
}
void gf_RDTCancelScanning () {
    // Variable Declarations
    fixed lv__f;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((gv_rdtInfo.lv_state == ge_RDTState_Scanning)) {
        gv_rdtInfo.lv_state = ge_RDTState_Canceled;
        libNtve_gf_StopTimer(gv_rdtInfo.lv_timer);
        gf_UpdatePanelofRDT();
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/1988DBD8"));
    }
}
void gf_RDTScanTargetUser (int lp_targetUser) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUserAlive(lp_targetUser)) {
        if ((gf_GetAccessLevelofCell(gf_GetCellwhereUnitExists(gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex))) == ge_AccessLevel_Restricted)) {
            gf_DisplayInformationMessage(StringExternal("Param/Value/B27C1AD3"), gf_GetUserwithObservers(lp_targetUser));
        }
        else {
            if ((gf_CharacterRole(lp_targetUser) == ge_CharacterRole_Marine)) {
                gf_DisplayInformationMessage((gf_RecordedUserNamewithColor(lp_targetUser) + StringExternal("Param/Value/15B0E12A")), PlayerGroupAll());
            }
            else {
                gf_DisplayAlertMessage((gf_RecordedUserNamewithColor(gf_GetDisguiseTargetUser()) + StringExternal("Param/Value/0A746632")), PlayerGroupAll());
            }
        }
        if ((gf_CharacterRole(lp_targetUser) == ge_CharacterRole_Marine)) {
            gf_WriteRecordtoArchive(lp_targetUser, gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex), ge_Cell_RadioactiveCell, StringExternal("Param/Value/502C6CA8"));
        }
        else {
            gf_WriteRecordtoArchive(gf_GetDisguiseTargetUser(), gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex), ge_Cell_RadioactiveCell, StringExternal("Param/Value/28AADF0B"));
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/2D7DD447", "A", IntToText(lp_targetUser));
        gf_CustomDebugMessage(TextExpressionAssemble("Param/Expression/2D7DD447"));
    }
}
void gf_InitializeSateliteController (unit lp_device, fixed lp_preparingTime) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isSateliteControllerInitialized == false) && gf_CanInitializeNewDeviceInfo()) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_SateliteController, gf_DefaultDeviceFlag(ge_DeviceType_SateliteController));
        gv_isSateliteControllerInitialized = true;
        gv_sateliteControllerInfo.lv_deviceIndex = gv_deviceIndexLast;
        if ((lp_preparingTime > 0.0)) {
            gv_sateliteControllerInfo.lv_state = ge_SateliteControllerState_Preparing;
            TimerStart(gv_sateliteControllerInfo.lv_timer, lp_preparingTime, false, c_timeGame);
            TimerPause(TimerLastStarted(), true);
        }
        else {
            gv_sateliteControllerInfo.lv_state = ge_SateliteControllerState_Prepared;
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/2E888861"));
    }
}
void gf_SetSateliteControllerStatetoPrepared () {
    // Automatic Variable Declarations
    // Implementation
    gv_sateliteControllerInfo.lv_state = ge_SateliteControllerState_Prepared;
    libNtve_gf_StopTimer(gv_sateliteControllerInfo.lv_timer);
    gf_UpdatePanelofSateliteController();
}
void gf_SetSateliteControllerStatetoPreparing (fixed lp_preparingTime) {
    // Automatic Variable Declarations
    // Implementation
    gv_sateliteControllerInfo.lv_state = ge_SateliteControllerState_Preparing;
    TimerStart(gv_sateliteControllerInfo.lv_timer, lp_preparingTime, false, c_timeGame);
    if (((gf_GameState() != ge_GameState_MainGame) || (gf_GetPowerState() == ge_PowerStateType_PowerOff))) {
        TimerPause(gv_sateliteControllerInfo.lv_timer, true);
    }
    gf_UpdatePanelofSateliteController();
}
trigger auto_gf_SetSateliteControllerStatetoTrackingforTime_Trigger = null;
fixed auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_trackingTime;
fixed auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_preparingTime;
playergroup auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_playerGroup;
void gf_SetSateliteControllerStatetoTrackingforTime (fixed lp_trackingTime, fixed lp_preparingTime, playergroup lp_playerGroup) {
    auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_trackingTime = lp_trackingTime;
    auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_preparingTime = lp_preparingTime;
    auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_playerGroup = lp_playerGroup;
    if (auto_gf_SetSateliteControllerStatetoTrackingforTime_Trigger == null) {
        auto_gf_SetSateliteControllerStatetoTrackingforTime_Trigger = TriggerCreate("auto_gf_SetSateliteControllerStatetoTrackingforTime_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetSateliteControllerStatetoTrackingforTime_Trigger, false, false);
}
bool auto_gf_SetSateliteControllerStatetoTrackingforTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_trackingTime = auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_trackingTime;
    fixed lp_preparingTime = auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_preparingTime;
    playergroup lp_playerGroup = auto_gf_SetSateliteControllerStatetoTrackingforTime_lp_playerGroup;
    // Variable Declarations
    int lv__i;
    fixed lv__f;
    playergroup lv__pg;
    // Automatic Variable Declarations
    playergroup auto54DE0CFB_g;
    fixed autoAAC9D22A_ae;
    const fixed autoAAC9D22A_ai = 0.0625;
    playergroup auto3DF823EE_g;
    // Variable Initialization
    lv__pg = PlayerGroupCopy(lp_playerGroup);
    // Implementation
    gv_sateliteControllerInfo.lv_state = ge_SateliteControllerState_Tracking;
    auto54DE0CFB_g = lv__pg;
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto54DE0CFB_g, lv__i);
        if (lv__i < 0) { break; }
        if (gf_IsUser(lv__i)) {
            gf_SetTrackingModeofCustomMinimap(lv__i, true);
        }
        else {
            PlayerGroupRemove(lp_playerGroup, lv__i);
        }
    }
    autoAAC9D22A_ae = lp_trackingTime;
    lv__f = 0.0;
    for ( ; ( (autoAAC9D22A_ai >= 0 && lv__f <= autoAAC9D22A_ae) || (autoAAC9D22A_ai < 0 && lv__f >= autoAAC9D22A_ae) ) ; lv__f += autoAAC9D22A_ai ) {
        if ((gf_GameState() == ge_GameState_MainGame) && (gf_GetPowerState() == ge_PowerStateType_PowerOn)) {
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    auto3DF823EE_g = lv__pg;
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto3DF823EE_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetTrackingModeofCustomMinimap(lv__i, false);
    }
    gf_SetSateliteControllerStatetoPreparing(lp_preparingTime);
    return true;
}
trigger auto_gf_OrderSatelitetoStartTracking_Trigger = null;
int auto_gf_OrderSatelitetoStartTracking_lp_orderingUser;
playergroup auto_gf_OrderSatelitetoStartTracking_lp_recievingUserGroup;
fixed auto_gf_OrderSatelitetoStartTracking_lp_trackingDelayTime;
fixed auto_gf_OrderSatelitetoStartTracking_lp_trackingDurationTime;
fixed auto_gf_OrderSatelitetoStartTracking_lp_preparingTime;
void gf_OrderSatelitetoStartTracking (int lp_orderingUser, playergroup lp_recievingUserGroup, fixed lp_trackingDelayTime, fixed lp_trackingDurationTime, fixed lp_preparingTime) {
    auto_gf_OrderSatelitetoStartTracking_lp_orderingUser = lp_orderingUser;
    auto_gf_OrderSatelitetoStartTracking_lp_recievingUserGroup = lp_recievingUserGroup;
    auto_gf_OrderSatelitetoStartTracking_lp_trackingDelayTime = lp_trackingDelayTime;
    auto_gf_OrderSatelitetoStartTracking_lp_trackingDurationTime = lp_trackingDurationTime;
    auto_gf_OrderSatelitetoStartTracking_lp_preparingTime = lp_preparingTime;
    if (auto_gf_OrderSatelitetoStartTracking_Trigger == null) {
        auto_gf_OrderSatelitetoStartTracking_Trigger = TriggerCreate("auto_gf_OrderSatelitetoStartTracking_TriggerFunc");
    }
    TriggerExecute(auto_gf_OrderSatelitetoStartTracking_Trigger, false, false);
}
bool auto_gf_OrderSatelitetoStartTracking_TriggerFunc (bool testConds, bool runActions) {
    int lp_orderingUser = auto_gf_OrderSatelitetoStartTracking_lp_orderingUser;
    playergroup lp_recievingUserGroup = auto_gf_OrderSatelitetoStartTracking_lp_recievingUserGroup;
    fixed lp_trackingDelayTime = auto_gf_OrderSatelitetoStartTracking_lp_trackingDelayTime;
    fixed lp_trackingDurationTime = auto_gf_OrderSatelitetoStartTracking_lp_trackingDurationTime;
    fixed lp_preparingTime = auto_gf_OrderSatelitetoStartTracking_lp_preparingTime;
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/0788066E", "A", FixedToText(lp_trackingDelayTime, 0));
    gf_DisplayInformationMessage(TextExpressionAssemble("Param/Expression/0788066E"), lp_recievingUserGroup);
    gf_WriteRecordtoArchive(lp_orderingUser, gf_GetSatatliteController(), gf_GetCellwhereUnitExists(gf_GetSatatliteController()), StringExternal("Param/Value/08A3BDDB"));
    gv_sateliteControllerInfo.lv_state = ge_SateliteControllerState_StartingTracking;
    TimerStart(gv_sateliteControllerInfo.lv_timer, lp_trackingDelayTime, false, c_timeGame);
    gf_UpdatePanelofSateliteController();
    while ((TimerGetRemaining(gv_sateliteControllerInfo.lv_timer) > 0.0)) {
        if ((gf_GameState() == ge_GameState_MainGame) && (gf_GetPowerState() == ge_PowerStateType_PowerOn)) {
            Wait(0.0625, c_timeGame);
        }
        else {
            gf_SetSateliteControllerStatetoPreparing(lp_preparingTime);
            return true;
        }
    }
    gf_SetAssistUserforFoundChangelingScore(lp_orderingUser, gv_sCC_SCORE_ASSIST_DURATION, false);
    TextExpressionSetToken("Param/Expression/714E9F9E", "A", FixedToText(lp_trackingDurationTime, 0));
    gf_DisplayInformationMessage(TextExpressionAssemble("Param/Expression/714E9F9E"), lp_recievingUserGroup);
    gf_SetSateliteControllerStatetoTrackingforTime(lp_trackingDurationTime, lp_preparingTime, lp_recievingUserGroup);
    return true;
}
void gf_UpdateDirectionMessageSCC (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_GetSateliteControllerState() == ge_SateliteControllerState_Prepared)) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/062BAFB0"), lp_player);
    }
    else {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/0804F1E0"), lp_player);
    }
}
timer gf_GetSateliteControllerTimer () {
    // Automatic Variable Declarations
    // Implementation
    return gv_sateliteControllerInfo.lv_timer;
}
int gf_GetSateliteControllerState () {
    // Automatic Variable Declarations
    // Implementation
    return gv_sateliteControllerInfo.lv_state;
}
unit gf_GetSatatliteController () {
    // Automatic Variable Declarations
    // Implementation
    return gf_DevicebyIndex(gv_sateliteControllerInfo.lv_deviceIndex);
}
void gf_InitializeEmergencyControlConsole (unit lp_device) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isEmergencyControlConsoleInitialized == false)) {
        gf_InitializeDeviceInfo(lp_device, ge_DeviceType_SecurityController, gf_DefaultDeviceFlag(ge_DeviceType_SecurityController));
        gv_emergencyControlConsoleInfo.lv_deviceIndex = gv_deviceIndexLast;
        gv_isEmergencyControlConsoleInitialized = true;
        gv_emergencyControlConsoleInfo.lv_state = ge_EmergencyControlConsoleState_Idle;
    }
    else {
        gf_Assert(ge_AssertType_AlreadyInitialized, "Initialize Security Controller");
    }
}
unit gf_GetEmergencyControlConsole () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_emergencyControlConsoleInfo.lv_deviceIndex != -1)) {
        return gf_DevicebyIndex(gv_emergencyControlConsoleInfo.lv_deviceIndex);
    }
    else {
        return null;
    }
}
int gf_GetEmergencyControlConsoleState () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isEmergencyControlConsoleInitialized == true)) {
        return gv_emergencyControlConsoleInfo.lv_state;
    }
    else {
        return ge_EmergencyControlConsoleState_None;
    }
}
int gf_GetEmergencyControlConsoleTargetIndex () {
    // Automatic Variable Declarations
    // Implementation
    if (((gf_GetEmergencyControlConsoleState() == ge_EmergencyControlConsoleState_InSettingToRestrict) || (gf_GetEmergencyControlConsoleState() == ge_EmergencyControlConsoleState_InSettingToNoraml))) {
        return gv_emergencyControlConsoleInfo.lv_indexOfTargetCell;
    }
    else {
        return -1;
    }
}
timer gf_GetEmergencyControlConsoleTimer () {
    // Automatic Variable Declarations
    // Implementation
    return gv_emergencyControlConsoleInfo.lv_timer;
}
int gf_GetCustomFullScreenDialog (int lp_dialogType) {
    // Automatic Variable Declarations
    int auto23DEDB31_val;
    // Implementation
    auto23DEDB31_val = lp_dialogType;
    if (auto23DEDB31_val == ge_CustomFullScreenDialogType_ChangelingSelectionPanel) {
        return gv_changelingSelectionPanel.lv_dialog;
    }
    else if (auto23DEDB31_val == ge_CustomFullScreenDialogType_CharacterHUD) {
        return gv_characterHUDDailog;
    }
    else if (auto23DEDB31_val == ge_CustomFullScreenDialogType_DeviceHUD) {
        return gv_deviceHUDDialog;
    }
    else if (auto23DEDB31_val == ge_CustomFullScreenDialogType_Vote) {
        return gv_voteInfo.lv_dialog;
    }
    else if (auto23DEDB31_val == ge_CustomFullScreenDialogType_GateUnlockProcess) {
        return gv_gateUnlockProcessPanel.lv_dialog;
    }
    else {
        return c_invalidDialogId;
    }
}
int gf_GetCurrentFullScreenDialogType (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_fullscreenDialogInfoArray[lv__userIndex].lv_curType;
    }
    else {
        return ge_CustomFullScreenDialogType_None;
    }
}
void gf_SetCurrentFullScreenDialogforPlayer (int lp_player, int lp_dialogType) {
    // Variable Declarations
    int lv__dialog;
    int lv__useIndex;
    // Automatic Variable Declarations
    int autoF86AE3E9_val;
    int auto03E61427_val;
    // Variable Initialization
    lv__dialog = gf_GetCustomFullScreenDialog(lp_dialogType);
    lv__useIndex = gf_GetUserIndex(lp_player);
    // Implementation
    if ((lv__useIndex != -1)) {
        if ((gf_GetCurrentFullScreenDialogType(lp_player) != lp_dialogType) && (gv_fullscreenDialogInfoArray[lv__useIndex].lv_isLocked == false)) {
            if ((gf_GetCurrentFullScreenDialogType(lp_player) != ge_CustomFullScreenDialogType_None)) {
                DialogSetVisible(gf_GetCustomFullScreenDialog(gf_GetCurrentFullScreenDialogType(lp_player)), PlayerGroupSingle(lp_player), false);
                if (lp_dialogType == ge_CustomFullScreenDialogType_CharacterHUD) {
                gf_ShowHideBattery(lp_player, false);
                }
                autoF86AE3E9_val = gf_GetCurrentFullScreenDialogType(lp_player);
                if (autoF86AE3E9_val == ge_CustomFullScreenDialogType_DeviceHUD) {
                    gf_ShowHideDevicePanel(lp_player, false, null);
                }
                else {
                }
            }
            if ((lv__dialog != c_invalidDialogId)) {
                DialogSetVisible(lv__dialog, PlayerGroupSingle(lp_player), true);
                if (lp_dialogType == ge_CustomFullScreenDialogType_CharacterHUD) {
                gf_ShowHideBattery(lp_player, true);
                }
                auto03E61427_val = lp_dialogType;
                if (auto03E61427_val == ge_CustomFullScreenDialogType_DeviceHUD) {
                    gf_ShowHideDevicePanel(lp_player, true, null);
                    gf_ShowHideBattery(lp_player, false);
                }
                else {
                }
            }
            gv_fullscreenDialogInfoArray[lv__useIndex].lv_curType = lp_dialogType;
            gv_fullscreenDialogInfoArray[lv__useIndex].lv_curDialog = lv__dialog;
        }
        else {
            return ;
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/A0E94CE8"));
        return ;
    }
}
void gf_LockCustomFullScreenDialog (int lp_user, bool lp_lock) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        gv_fullscreenDialogInfoArray[lv__userIndex].lv_isLocked = lp_lock;
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/B5B6164C"));
    }
}
void gf_EnableDisableRevealerforEntireMap (bool lp_enabledisable, int lp_player) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_player);
    // Implementation
    if ((lv__userIndex != -1)) {
        VisRevealerEnable(gv_revealerInfoArray[lv__userIndex].lv_vision, lp_enabledisable);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/37CEAE22"));
    }
}
void gf_CopyHUDStatefromUsertoUser (int lp_sourceUser, int lp_targetUser) {
    // Variable Declarations
    int lv__dialogType;
    // Automatic Variable Declarations
    int auto1B93561C_val;
    // Variable Initialization
    lv__dialogType = gf_GetCurrentFullScreenDialogType(lp_sourceUser);
    // Implementation
    if (gf_IsUser(lp_sourceUser) && gf_IsUser(lp_targetUser)) {
        gf_SetCurrentFullScreenDialogforPlayer(lp_targetUser, lv__dialogType);
        auto1B93561C_val = lv__dialogType;
        if (auto1B93561C_val == ge_CustomFullScreenDialogType_DeviceHUD) {
            gf_SetTargetDeviceofDevicePanel(lp_targetUser, gf_GetCurrentTargetDeviceofDeviceHUD(lp_sourceUser));
        }
        else if (auto1B93561C_val == ge_CustomFullScreenDialogType_CharacterHUD) {
            gf_UpdateWeaponStatusPanel(lp_sourceUser, PlayerGroupSingle(lp_targetUser));
            gf_UpdateCharacterHealthBar(lp_sourceUser, PlayerGroupSingle(lp_targetUser));
            gf_UpdateCharacterStaminaBar(lp_sourceUser, PlayerGroupSingle(lp_targetUser));
            if (gf_IsChangelingUser(lp_sourceUser)) {
                DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBar), PlayerGroupSingle(lp_targetUser), true);
            }
            else {
                DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBar), PlayerGroupSingle(lp_targetUser), false);
            }
        }
        else {
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/AF09A315"));
    }
}
void gf_CreatePlainDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
}
void gf_CreatePlainPanelInDialog (int lp_parentDialog) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(lp_parentDialog, c_triggerControlTypePanel);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}
void gf_CreateCustomizedPanelInDialog (int lp_parentDialog, int lp_width, int lp_height) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreateFromTemplate(lp_parentDialog, c_triggerControlTypePanel, "_CustomizedStandardTemplates/CustomizedMediumPanelTemplate");
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
}
void gf_CreateCustomizedButtonInPanel (int lp_panel, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreateInPanelFromTemplate(lp_panel, c_triggerControlTypeButton, "_CustomizedStandardTemplates/CustomizedButton");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lp_panel, c_anchorCenter, 0, 0);
}
void gf_HookupInnerPanelinCustomizedPanel (int lp_panel) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_panel, c_triggerControlTypePanel, "InnerPanel");
}
void gf_CreateCustomizedProgressBarInPanel (int lp_panel) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreateInPanelFromTemplate(lp_panel, c_triggerControlTypePanel, "_CustomizedStandardTemplates/CustomizedProgressBar");
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), (ge_ProgressBarState_Idle), PlayerGroupAll());
}
void gf_HookupBarImageinCustomizedProgressBar (int lp_progressBar) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_progressBar, c_triggerControlTypeImage, "BarImage");
}
void gf_HookupNameLabelinCustomizedProgressBar (int lp_progressBar) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_progressBar, c_triggerControlTypeLabel, "NameLabel");
}
void gf_HookupLeftBarLabelinCustomizedProgressBar (int lp_progressBar) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_progressBar, c_triggerControlTypeLabel, "LeftBarLabel");
}
void gf_SetValueofBarImageinProgressBar (int lp_barImage, fixed lp_value, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(lp_barImage, lp_value, lp_playerGroup);
    DialogControlSetSize(lp_barImage, lp_playerGroup, FixedToInt((lp_value*gv_pROGRESSBAR_WIDTH)), gv_pROGRESSBAR_HEIGHT);
}
trigger auto_gf_SetColorofBarImageinProgressBar_Trigger = null;
int auto_gf_SetColorofBarImageinProgressBar_lp_progressBar;
color auto_gf_SetColorofBarImageinProgressBar_lp_color;
void gf_SetColorofBarImageinProgressBar (int lp_progressBar, color lp_color) {
    auto_gf_SetColorofBarImageinProgressBar_lp_progressBar = lp_progressBar;
    auto_gf_SetColorofBarImageinProgressBar_lp_color = lp_color;
    if (auto_gf_SetColorofBarImageinProgressBar_Trigger == null) {
        auto_gf_SetColorofBarImageinProgressBar_Trigger = TriggerCreate("auto_gf_SetColorofBarImageinProgressBar_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetColorofBarImageinProgressBar_Trigger, false, false);
}
bool auto_gf_SetColorofBarImageinProgressBar_TriggerFunc (bool testConds, bool runActions) {
    int lp_progressBar = auto_gf_SetColorofBarImageinProgressBar_lp_progressBar;
    color lp_color = auto_gf_SetColorofBarImageinProgressBar_lp_color;
    // Automatic Variable Declarations
    // Implementation
    gf_HookupBarImageinCustomizedProgressBar(lp_progressBar);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lp_color, PlayerGroupAll());
    return true;
}
trigger auto_gf_ActivateProgressBarforTimer_Trigger = null;
int auto_gf_ActivateProgressBarforTimer_lp_progressBar;
int auto_gf_ActivateProgressBarforTimer_lp_user;
timer auto_gf_ActivateProgressBarforTimer_lp_timer;
void gf_ActivateProgressBarforTimer (int lp_progressBar, int lp_user, timer lp_timer) {
    auto_gf_ActivateProgressBarforTimer_lp_progressBar = lp_progressBar;
    auto_gf_ActivateProgressBarforTimer_lp_user = lp_user;
    auto_gf_ActivateProgressBarforTimer_lp_timer = lp_timer;
    if (auto_gf_ActivateProgressBarforTimer_Trigger == null) {
        auto_gf_ActivateProgressBarforTimer_Trigger = TriggerCreate("auto_gf_ActivateProgressBarforTimer_TriggerFunc");
    }
    TriggerExecute(auto_gf_ActivateProgressBarforTimer_Trigger, false, false);
}
bool auto_gf_ActivateProgressBarforTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_progressBar = auto_gf_ActivateProgressBarforTimer_lp_progressBar;
    int lp_user = auto_gf_ActivateProgressBarforTimer_lp_user;
    timer lp_timer = auto_gf_ActivateProgressBarforTimer_lp_timer;
    // Variable Declarations
    int lv__progressBarImage;
    int lv__progressBarLeftLabel;
    fixed lv__startingTime;
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__progressBarImage = c_invalidDialogControlId;
    lv__progressBarLeftLabel = c_invalidDialogControlId;
    lv__startingTime = TimerGetRemaining(lp_timer);
    // Implementation
    if ((lp_progressBar != c_invalidDialogControlId) && gf_IsUser(lp_user)) {
        gf_RequestStopProgressBarAndLockUntilAccepted(lp_progressBar, lp_user);
        gf_SetProgressBarState(lp_progressBar, ge_ProgressBarState_Activated, lp_user);
        gf_HookupBarImageinCustomizedProgressBar(lp_progressBar);
        lv__progressBarImage = DialogControlLastCreated();
        gf_HookupLeftBarLabelinCustomizedProgressBar(lp_progressBar);
        lv__progressBarLeftLabel = DialogControlLastCreated();
        while ((TimerGetRemaining(lp_timer) > 0.0) && (gf_GetProgressBarState(lp_progressBar, lp_user) == ge_ProgressBarState_Activated)) {
            lv__pg = gf_GetUserwithObservers(lp_user);
            gf_SetValueofBarImageinProgressBar(lv__progressBarImage, (TimerGetRemaining(lp_timer)/lv__startingTime), lv__pg);
            TextExpressionSetToken("Param/Expression/321F8C8A", "A", FixedToTextAdvanced(TimerGetRemaining(lp_timer), c_formatNumberStyleNormal, false, 1, 1));
            libNtve_gf_SetDialogItemText(lv__progressBarLeftLabel, TextExpressionAssemble("Param/Expression/321F8C8A"), lv__pg);
            Wait(0.0625, c_timeGame);
        }
        gf_SetProgressBarState(lp_progressBar, ge_ProgressBarState_Idle, lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/4FC292BD"));
    }
    return true;
}
trigger auto_gf_ActivateProgressBarforUnitProperty_Trigger = null;
int auto_gf_ActivateProgressBarforUnitProperty_lp_progressBar;
int auto_gf_ActivateProgressBarforUnitProperty_lp_user;
unit auto_gf_ActivateProgressBarforUnitProperty_lp_unit;
int auto_gf_ActivateProgressBarforUnitProperty_lp_unitPropertyPercent;
void gf_ActivateProgressBarforUnitProperty (int lp_progressBar, int lp_user, unit lp_unit, int lp_unitPropertyPercent) {
    auto_gf_ActivateProgressBarforUnitProperty_lp_progressBar = lp_progressBar;
    auto_gf_ActivateProgressBarforUnitProperty_lp_user = lp_user;
    auto_gf_ActivateProgressBarforUnitProperty_lp_unit = lp_unit;
    auto_gf_ActivateProgressBarforUnitProperty_lp_unitPropertyPercent = lp_unitPropertyPercent;
    if (auto_gf_ActivateProgressBarforUnitProperty_Trigger == null) {
        auto_gf_ActivateProgressBarforUnitProperty_Trigger = TriggerCreate("auto_gf_ActivateProgressBarforUnitProperty_TriggerFunc");
    }
    TriggerExecute(auto_gf_ActivateProgressBarforUnitProperty_Trigger, false, false);
}
bool auto_gf_ActivateProgressBarforUnitProperty_TriggerFunc (bool testConds, bool runActions) {
    int lp_progressBar = auto_gf_ActivateProgressBarforUnitProperty_lp_progressBar;
    int lp_user = auto_gf_ActivateProgressBarforUnitProperty_lp_user;
    unit lp_unit = auto_gf_ActivateProgressBarforUnitProperty_lp_unit;
    int lp_unitPropertyPercent = auto_gf_ActivateProgressBarforUnitProperty_lp_unitPropertyPercent;
    // Variable Declarations
    int lv__progressBarImage;
    int lv__progressBarLeftLabel;
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__progressBarImage = c_invalidDialogControlId;
    lv__progressBarLeftLabel = c_invalidDialogControlId;
    // Implementation
    if ((lp_progressBar != c_invalidDialogControlId) && gf_IsUser(lp_user)) {
        gf_RequestStopProgressBarAndLockUntilAccepted(lp_progressBar, lp_user);
        gf_SetProgressBarState(lp_progressBar, ge_ProgressBarState_Activated, lp_user);
        gf_HookupBarImageinCustomizedProgressBar(lp_progressBar);
        lv__progressBarImage = DialogControlLastCreated();
        gf_HookupLeftBarLabelinCustomizedProgressBar(lp_progressBar);
        lv__progressBarLeftLabel = DialogControlLastCreated();
        while ((gf_GetProgressBarState(lp_progressBar, lp_user) == ge_ProgressBarState_Activated)) {
            lv__pg = gf_GetUserwithObservers(lp_user);
            gf_SetValueofBarImageinProgressBar(lv__progressBarImage, (UnitGetPropertyFixed(lp_unit, lp_unitPropertyPercent, c_unitPropCurrent) / 100), lv__pg);
            TextExpressionSetToken("Param/Expression/CEC829D9", "A", FixedToTextAdvanced(UnitGetPropertyFixed(lp_unit, lp_unitPropertyPercent, c_unitPropCurrent), c_formatNumberStyleNormal, false, 1, 1));
            libNtve_gf_SetDialogItemText(lv__progressBarLeftLabel, TextExpressionAssemble("Param/Expression/CEC829D9"), lv__pg);
            Wait(0.0625, c_timeGame);
        }
        gf_SetProgressBarState(lp_progressBar, ge_ProgressBarState_Idle, lp_user);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/ACEE3F72"));
    }
    return true;
}
void gf_RequestStopProgressBar (int lp_progressBar, int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_GetProgressBarState(lp_progressBar, lp_user) == ge_ProgressBarState_Activated) && gf_IsUser(lp_user)) {
        libNtve_gf_SetDialogItemCurrentValue(lp_progressBar, (ge_ProgressBarState_StopRequested), PlayerGroupSingle(lp_user));
    }
}
void gf_RequestStopProgressBarAndLockUntilAccepted (int lp_progressBar, int lp_user) {
    // Variable Declarations
    bool lv__isActivated;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((lp_progressBar != c_invalidDialogControlId) && gf_IsUser(lp_user)) {
        gf_RequestStopProgressBar(lp_progressBar, lp_user);
        while ((gf_GetProgressBarState(lp_progressBar, lp_user) == ge_ProgressBarState_StopRequested)) {
            Wait(0.0625, c_timeGame);
        }
    }
}
trigger auto_gf_SetProgressBarState_Trigger = null;
int auto_gf_SetProgressBarState_lp_progressBar;
int auto_gf_SetProgressBarState_lp_state;
int auto_gf_SetProgressBarState_lp_user;
void gf_SetProgressBarState (int lp_progressBar, int lp_state, int lp_user) {
    auto_gf_SetProgressBarState_lp_progressBar = lp_progressBar;
    auto_gf_SetProgressBarState_lp_state = lp_state;
    auto_gf_SetProgressBarState_lp_user = lp_user;
    if (auto_gf_SetProgressBarState_Trigger == null) {
        auto_gf_SetProgressBarState_Trigger = TriggerCreate("auto_gf_SetProgressBarState_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetProgressBarState_Trigger, false, false);
}
bool auto_gf_SetProgressBarState_TriggerFunc (bool testConds, bool runActions) {
    int lp_progressBar = auto_gf_SetProgressBarState_lp_progressBar;
    int lp_state = auto_gf_SetProgressBarState_lp_state;
    int lp_user = auto_gf_SetProgressBarState_lp_user;
    // Automatic Variable Declarations
    // Implementation
    if ((lp_progressBar != c_invalidDialogControlId) && gf_IsUser(lp_user)) {
        libNtve_gf_SetDialogItemCurrentValue(lp_progressBar, (lp_state), PlayerGroupSingle(lp_user));
    }
    return true;
}
int gf_GetProgressBarState (int lp_progressBar, int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_progressBar != c_invalidDialogControlId)) {
        return FixedToInt(libNtve_gf_DialogItemValue(lp_progressBar, lp_user));
    }
    else {
        return ge_ProgressBarState_None;
    }
}
int gf_GetChangelingSelectionPanelElement (int lp_element, int lp_userneedsforuserrelateditem) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    int auto29286F4F_val;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_userneedsforuserrelateditem);
    // Implementation
    auto29286F4F_val = lp_element;
    if (auto29286F4F_val == ge_ChangelingSelectionPanelElement_KickVoteButton) {
        if ((lv__userIndex != -1)) {
            return gv_changelingSelectionPanel.lv_kickVoteButton[lv__userIndex];
        }
    }
    else if (auto29286F4F_val == ge_ChangelingSelectionPanelElement_KickVoteCountLabel) {
        if ((lv__userIndex != -1)) {
            return gv_changelingSelectionPanel.lv_kickVoteCountLabel[lv__userIndex];
        }
    }
    else if (auto29286F4F_val == ge_ChangelingSelectionPanelElement_GameStartCounter) {
        return gv_changelingSelectionPanel.lv_gameStartCounterText;
    }
    else if (auto29286F4F_val == ge_ChangelingSelectionPanelElement_WantToPlayChangelingButton) {
        return gv_changelingSelectionPanel.lv_applyButton;
    }
    else {
    }
    return c_invalidDialogControlId;
}
int gf_GetTargetUserofKickVoteButton (int lp_button) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto510110A1_g;
    // Variable Initialization
    // Implementation
    if ((lp_button != c_invalidDialogControlId)) {
        auto510110A1_g = gf_StartingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto510110A1_g, lv__i);
            if (lv__i < 0) { break; }
            if ((gv_changelingSelectionPanel.lv_kickVoteButton[gf_GetUserIndex(lv__i)] == lp_button)) {
                return lv__i;
            }
        }
    }
    return c_playerAny;
}
void gf_UpdateWeaponFrameToRifle (int lp_sourceUser, playergroup lp_pg) {
    // Variable Declarations
    int lv__userIndex;
    int lv__ammo;
    color lv__color;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_sourceUser);
    lv__color = Color(0,0,0);
    // Implementation
    if ((lv__userIndex != -1) && gf_IsUser(lp_sourceUser) && (lp_pg != null)) {
        libNtve_gf_SetDialogItemColor(gv_weaponIconBorderImage, Color(100,100,100), lp_pg);
        libNtve_gf_SetDialogItemImage(gv_weaponIconImage, gv_wEAPON_IMAGE_RIFLE, lp_pg);
        lv__ammo = gf_GetRemainingAmmo(lp_sourceUser);
        if ((lv__ammo > (gv_sHOT_AMMO_MAX/2))) {
            lv__color = Color(100.00, 100.00, 100.00);
        }
        else if ((lv__ammo > (gv_sHOT_AMMO_MAX/4))) {
            lv__color = Color(100.00, 100.00, 0.00);
        }
        else if ((lv__ammo > 0)) {
            lv__color = Color(100.00, 0.00, 0.00);
        }
        else if (true) {
            lv__color = Color(50.20, 50.20, 50.20);
        }
        TextExpressionSetToken("Param/Expression/4BC804EF", "A", TextWithColor(IntToText(lv__ammo), lv__color));
        TextExpressionSetToken("Param/Expression/4BC804EF", "max", IntToText(gv_sHOT_AMMO_MAX));
        libNtve_gf_SetDialogItemText(gv_weaponAmmoText, TextExpressionAssemble("Param/Expression/4BC804EF"), lp_pg);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/54D068D2"));
    }
}
void gf_UpdateWeaponFrameToAbduct (playergroup lp_pg) {
    // Variable Declarations
    int lv__remainingTime;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__remainingTime = FixedToInt(TimerGetRemaining(gf_GetChangelingTimer()));
    // Implementation
    if ((lp_pg != null)) {
        libNtve_gf_SetDialogItemImage(gv_weaponIconImage, gv_wEAPON_IMAGE_ABDUCT, lp_pg);
        if ((lv__remainingTime > 0.0) && (gf_GetChangelingState() == ge_ChangelingState_HasEaten)) {
            libNtve_gf_SetDialogItemColor(gv_weaponIconBorderImage, Color(100.00, 0.00, 0.00), lp_pg);
            libNtve_gf_SetDialogItemText(gv_weaponAmmoText, FormatDuration(lv__remainingTime), lp_pg);
        }
        else {
            libNtve_gf_SetDialogItemColor(gv_weaponIconBorderImage, Color(100,100,100), lp_pg);
            libNtve_gf_SetDialogItemText(gv_weaponAmmoText, StringToText(""), lp_pg);
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/5985B9D1"));
    }
}
void gf_UpdateWeaponStatusPanel (int lp_sourceUser, playergroup lp_pg) {
    // Variable Declarations
    text lv__ammo;
    // Automatic Variable Declarations
    int autoCAFEA9B5_val;
    int autoED5451EE_val;
    // Variable Initialization
    // Implementation
    if (gf_IsUser(lp_sourceUser) && (lp_pg != null)) {
        autoCAFEA9B5_val = gf_CharacterRole(lp_sourceUser);
        if (autoCAFEA9B5_val == ge_CharacterRole_Marine) {
            gf_UpdateWeaponFrameToRifle(lp_sourceUser, lp_pg);
        }
        else if (autoCAFEA9B5_val == ge_CharacterRole_Changeling) {
            autoED5451EE_val = gf_GetChangelingDisguiseState();
            if (autoED5451EE_val == ge_DisguiseState_Disguising) {
                gf_UpdateWeaponFrameToRifle(lp_sourceUser, lp_pg);
            }
            else if (autoED5451EE_val == ge_DisguiseState_Exposed) {
                gf_UpdateWeaponFrameToAbduct(lp_pg);
            }
            else {
            }
        }
        else {
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/09610EFD"));
    }
}
void gf_UpdateWeaponStatusforUserwithObservers (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    gf_UpdateWeaponStatusPanel(lp_user, gf_GetUserwithObservers(lp_user));
}
void gf_ShowHideAimBox (bool lp_showhide, playergroup lp_playergroup) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_aimBox, lp_playergroup, lp_showhide);
}
int gf_CalcualteUnitPropertyBarWidth (fixed lp_sourceLife, fixed lp_targetLife, int lp_barWidthMax) {
    // Variable Declarations
    int lv__result;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((lp_sourceLife != 0.0)) {
        lv__result = FixedToInt((lp_barWidthMax * lp_targetLife / lp_sourceLife ));
        if ((lv__result >= 0)) {
            return lv__result;
        }
        else {
            return 0;
        }
    }
    else {
        return 0;
    }
}
int gf_GetCharacterStatusPanelElement (int lp_element) {
    // Automatic Variable Declarations
    int autoF053B54C_val;
    // Implementation
    autoF053B54C_val = lp_element;
    if (autoF053B54C_val == ge_CharacterStatusPanelElement_ChangelingProcessBar) {
        return gv_characterStatusPanel.lv_changelingProcessBarPanel;
    }
    else if (autoF053B54C_val == ge_CharacterStatusPanelElement_ChangelingProcessBarImage) {
        return gv_characterStatusPanel.lv_changelingProcessBarImage;
    }
    else if (autoF053B54C_val == ge_CharacterStatusPanelElement_HealthBarImage) {
        return gv_characterStatusPanel.lv_healthBarImage;
    }
    else if (autoF053B54C_val == ge_CharacterStatusPanelElement_Panel) {
        return gv_characterStatusPanel.lv_panel;
    }
    else if (autoF053B54C_val == ge_CharacterStatusPanelElement_StaminaBarImage) {
        return gv_characterStatusPanel.lv_staminaBarImage;
    }
    else {
        return c_invalidDialogControlId;
    }
}
color gf_GetMixedColor (color lp_colorA, color lp_colorB, fixed lp_per) {
    // Variable Declarations
    color lv__color;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__color = Color(0,0,0);
    // Implementation
    if ((lp_per <= 0.0)) {
        lv__color = lp_colorB;
    }
    else {
        if ((lp_per > 1.0)) {
            lv__color = lp_colorA;
        }
        else {
            lv__color = Color((ColorGetComponent(lp_colorA, c_colorComponentRed)*lp_per+ColorGetComponent(lp_colorB, c_colorComponentRed)*(1-lp_per)), (ColorGetComponent(lp_colorA, c_colorComponentGreen)*lp_per+ColorGetComponent(lp_colorB, c_colorComponentGreen)*(1-lp_per)), (ColorGetComponent(lp_colorA, c_colorComponentBlue)*lp_per+ColorGetComponent(lp_colorB, c_colorComponentBlue)*(1-lp_per)));
        }
    }
    return lv__color;
}
void gf_UpdateCharacterHealthBar (int lp_sourceUser, playergroup lp_pg) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_sourceUser) && (lp_pg != null)) {
        if (gf_IsUserAlive(lp_sourceUser)) {
            DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_HealthBarImage), lp_pg, true);
            DialogControlSetSize(gv_characterStatusPanel.lv_healthBarImage, lp_pg, FixedToInt((gv_bAR_HEALTH_WIDHT*(UnitGetPropertyFixed(gf_CharacterUnit(lp_sourceUser), c_unitPropLifePercent, c_unitPropCurrent)/100.0))), gv_bAR_HEALTH_HEIGHT);
        }
        else {
            DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_HealthBarImage), lp_pg, false);
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/6B0E805F"));
    }
}
void gf_UpdateCharacterStaminaBar (int lp_sourceUser, playergroup lp_pg) {
    // Variable Declarations
    int lv__barWidth;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (gf_IsUser(lp_sourceUser) && (lp_pg != null)) {
        if (gf_IsUserAlive(lp_sourceUser)) {
            lv__barWidth = FixedToInt((gv_bAR_STAMINA_WIDHT*(UnitGetPropertyFixed(gf_CharacterUnit(lp_sourceUser), c_unitPropEnergyPercent, c_unitPropCurrent)/100.0)));
            if ((lv__barWidth > 0)) {
                DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_StaminaBarImage), lp_pg, true);
                DialogControlSetSize(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_StaminaBarImage), lp_pg, lv__barWidth, gv_bAR_STAMINA_HEIGHT);
                libNtve_gf_SetDialogItemColor(gv_characterStatusPanel.lv_staminaBarImage, gf_GetMixedColor(Color(100.00, 100.00, 0.00), Color(100.00, 0.00, 0.00), ((UnitGetPropertyFixed(gf_CharacterUnit(lp_sourceUser), c_unitPropEnergyPercent, c_unitPropCurrent)-30)/40)), lp_pg);
            }
            else {
                DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_StaminaBarImage), lp_pg, false);
            }
        }
        else {
            DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_HealthBarImage), lp_pg, false);
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/6D3FDB37"));
    }
}
bool gf_IsPanelofDeviceVisible (int lp_player, unit lp_deivce) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player) && gf_IsDevice(lp_deivce) && (DialogIsVisible(gv_deviceHUDDialog, lp_player) == true) && (gf_GetCurrentTargetDeviceofDeviceHUD(lp_player) == lp_deivce)) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_IsDeviceHUDVisible (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((DialogIsVisible(gv_deviceHUDDialog, lp_player) == true)) {
        return true;
    }
    else {
        return false;
    }
}
void gf_SetTargetDeviceofDevicePanel (int lp_player, unit lp_device) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_player);
    // Implementation
    if (((lv__index == -1) || (gf_IsDevice(lp_device) == false))) {
        gf_CustomDebugMessage(StringExternal("Param/Value/9E260830"));
        return ;
    }
    if ((gf_GetCurrentTargetDeviceofDeviceHUD(lp_player) != null)) {
        gf_ShowHideDevicePanel(lp_player, false, gf_GetCurrentTargetDeviceofDeviceHUD(lp_player));
    }
    gf_ShowHideDevicePanel(lp_player, true, lp_device);
    gv_deviceHUDInfo[lv__index].lv_currentHUDTargetDevice = lp_device;
}
void gf_ShowHideDevicePanel (int lp_player, bool lp_showhide, unit lp_device) {
    // Automatic Variable Declarations
    int autoA1204D2F_val;
    // Implementation
    autoA1204D2F_val = gf_DeviceType(lp_device);
    if (autoA1204D2F_val == ge_DeviceType_None) {
        if ((lp_device == null) && (gf_GetCurrentTargetDeviceofDeviceHUD(lp_player) != null)) {
            gf_ShowHideDevicePanel(lp_player, lp_showhide, gf_GetCurrentTargetDeviceofDeviceHUD(lp_player));
        }
    }
    else if (autoA1204D2F_val == ge_DeviceType_AberrationCage) {
        gf_ShowHidePanelofAberrationPanel(lp_player, lp_showhide);
    }
    else if (autoA1204D2F_val == ge_DeviceType_Archive) {
        gf_ShowHidePanelofArchive(lp_player, lp_showhide);
        gv_interplayer[lp_player] = lp_showhide;
    }
    else if (autoA1204D2F_val == ge_DeviceType_Incinerator) {
        gf_ShowHidePanelofIncinerator(lp_player, lp_showhide);
    }
    else if (autoA1204D2F_val == ge_DeviceType_MedicalBot) {
        gf_ShowHidePanelofMedicalBot(lp_player, lp_showhide);
    }
    else if (autoA1204D2F_val == ge_DeviceType_Monitor) {
        gf_ShowHidePanelofMonitor(lp_player, lp_showhide, lp_device);
    }
    else if (autoA1204D2F_val == ge_DeviceType_PowerController) {
        gf_ShowHidePanelofPowerGeneratorController(lp_player, lp_showhide);
    }
    else if (autoA1204D2F_val == ge_DeviceType_RadiationDiagnosticTester) {
        gf_ShowHidePanelofRDT(lp_player, lp_showhide);
    }
    else if (autoA1204D2F_val == ge_DeviceType_SateliteController) {
        gf_ShowHidePanelofSateliteController(lp_player, lp_showhide);
    }
    else if (autoA1204D2F_val == ge_DeviceType_SecurityController) {
        gf_ShowHidePanelofEmergencyControlConsole(lp_showhide, lp_player);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/8358680F"));
    }
}
int gf_GetDeviceHUDDialog () {
    // Automatic Variable Declarations
    // Implementation
    return gv_deviceHUDDialog;
}
unit gf_GetCurrentTargetDeviceofDeviceHUD (int lp_player) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_player);
    // Implementation
    if ((lv__index != -1)) {
        return gv_deviceHUDInfo[lv__index].lv_currentHUDTargetDevice;
    }
    else {
        return null;
    }
}
playergroup gf_GetUsersUsingDeviceHUD (unit lp_device) {
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoDFB10ED0_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    if (gf_IsDevice(lp_device)) {
        autoDFB10ED0_g = gf_AllPlayingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoDFB10ED0_g, lv__i);
            if (lv__i < 0) { break; }
            if (gf_IsPanelofDeviceVisible(lv__i, lp_device)) {
                PlayerGroupAdd(lv__pg, lv__i);
            }
        }
    }
    return lv__pg;
}
void gf_ShowHidePanelofAberrationPanel (int lp_player, bool lp_showhide) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player)) {
        DialogControlSetVisible(gv_aberrationCagePanel.lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
    }
}
int gf_GetAberrationCageProgressBar () {
    // Automatic Variable Declarations
    // Implementation
    return gv_aberrationCagePanel.lv_progressBar;
}
void gf_ShowHidePanelofArchive (int lp_player, bool lp_showhide) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player)) {
        DialogControlSetVisible(gv_archivePanel.lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
    }
}
void gf_UpdateArchivePanel () {
    int init_i;
    // Variable Declarations
    int lv__i;
    int lv__firstRecordIndex;
    int[gv_uSER_INDEX_MAX + 1] lv__savedSelectedRecordIndex;
    // Automatic Variable Declarations
    playergroup autoD63EF982_g;
    playergroup autoCA902840_g;
    // Variable Initialization
    lv__firstRecordIndex = gv_archiveInfo.lv_firstRecordIndex;
    for (init_i = 0; init_i <= gv_uSER_INDEX_MAX; init_i += 1) {
        lv__savedSelectedRecordIndex[init_i] = -1;
    }
    // Implementation
    autoD63EF982_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoD63EF982_g, lv__i);
        if (lv__i < 0) { break; }
        lv__savedSelectedRecordIndex[gf_GetUserIndex(lv__i)] = gf_GetArchiveRecordIndexFromListItem(DialogControlGetSelectedItem(gv_archivePanel.lv_list, lv__i));
    }
    DialogControlRemoveAllItems(gv_archivePanel.lv_list, PlayerGroupAll());
    lv__i = gv_archiveInfo.lv_lastRecordIndex;
    if ((lv__i == -1)) {
        return ;
    }
    while (true) {
        if (((gf_CellRecordfromArchive(lv__i) == ge_Cell_None) || (gf_GetAccessLevelofCell(gf_CellRecordfromArchive(lv__i)) != ge_AccessLevel_Restricted))) {
            DialogControlAddItem(gv_archivePanel.lv_list, PlayerGroupAll(), gf_TextRecordfromArchive(lv__i));
        }
        else {
            DialogControlAddItem(gv_archivePanel.lv_list, PlayerGroupAll(), StringExternal("Param/Value/B1942535"));
        }
        if ((lv__i == lv__firstRecordIndex)) {
            break;
        }
        else {
            lv__i = gf_PreviousRecordIndex(lv__i);
        }
    }
    autoCA902840_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoCA902840_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_GetArchiveListItemFromRecordIndex(lv__savedSelectedRecordIndex[gf_GetUserIndex(lv__i)]) != -1)) {
            DialogControlSelectItem(gv_archivePanel.lv_list, PlayerGroupSingle(lv__i), gf_GetArchiveListItemFromRecordIndex(lv__savedSelectedRecordIndex[gf_GetUserIndex(lv__i)]));
        }
    }
    gf_UpdateArchiveRecordingNumberLabel();
    gf_UpdateArchiveTransmitButton();
}
void gf_UpdateArchiveRecordingNumberLabel () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gf_GetArchivePanelElement(ge_ArchivePanelElement_RecordingNumberLabel), IntToText(gv_archiveInfo.lv_recordingNumber), PlayerGroupAll());
}
void gf_UpdateArchiveTransmitButton () {
    // Automatic Variable Declarations
    // Implementation
    if ((TimerGetRemaining(gf_ArchiveTimer()) > 0.0)) {
        DialogControlSetEnabled(gf_GetArchivePanelElement(ge_ArchivePanelElement_Button), PlayerGroupAll(), false);
    }
    else {
        DialogControlSetEnabled(gf_GetArchivePanelElement(ge_ArchivePanelElement_Button), PlayerGroupAll(), true);
    }
}
int gf_GetArchivePanelElement (int lp_element) {
    // Automatic Variable Declarations
    int auto31F1A8F8_val;
    // Implementation
    auto31F1A8F8_val = lp_element;
    if (auto31F1A8F8_val == ge_ArchivePanelElement_Button) {
        return gv_archivePanel.lv_button;
    }
    else if (auto31F1A8F8_val == ge_ArchivePanelElement_ListBox) {
        return gv_archivePanel.lv_list;
    }
    else if (auto31F1A8F8_val == ge_ArchivePanelElement_Panel) {
        return gv_archivePanel.lv_panel;
    }
    else if (auto31F1A8F8_val == ge_ArchivePanelElement_RecordingNumberLabel) {
        return gv_archivePanel.lv_numberLabel;
    }
    else {
        return c_invalidDialogControlId;
    }
}
int gf_GetArchiveRecordIndexFromListItem (int lp_itemIndex) {
    // Variable Declarations
    int lv__recordIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (((lp_itemIndex >= 1) && (lp_itemIndex <= DialogControlGetItemCount(gv_archivePanel.lv_list, gv_pLAYER_NEUTRAL)))) {
        lv__recordIndex = (1 + gv_archiveInfo.lv_lastRecordIndex - lp_itemIndex);
        if ((lv__recordIndex < 0)) {
            return (gv_aRCHIVE_LIST_INDEX_MAX+lv__recordIndex+1);
        }
        else {
            return lv__recordIndex;
        }
    }
    else {
        return -1;
    }
}
int gf_GetArchiveListItemFromRecordIndex (int lp_recordIndex) {
    // Variable Declarations
    int lv__itemIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (((lp_recordIndex >= 0) && (lp_recordIndex <= gv_aRCHIVE_LIST_INDEX_MAX)) && (((lp_recordIndex >= gv_archiveInfo.lv_firstRecordIndex) && (lp_recordIndex <= gv_archiveInfo.lv_lastRecordIndex)) || (gv_archiveInfo.lv_firstRecordIndex > gv_archiveInfo.lv_lastRecordIndex))) {
        if ((gv_archiveInfo.lv_firstRecordIndex > gv_archiveInfo.lv_lastRecordIndex)) {
            if ((lp_recordIndex >= gv_archiveInfo.lv_firstRecordIndex)) {
                lv__itemIndex = (1 + gv_archiveInfo.lv_lastRecordIndex + gv_aRCHIVE_LIST_INDEX_MAX - lp_recordIndex);
            }
            else {
                lv__itemIndex = (1 + gv_archiveInfo.lv_lastRecordIndex - lp_recordIndex);
            }
        }
        else {
            lv__itemIndex = (1 + gv_archiveInfo.lv_lastRecordIndex - lp_recordIndex);
        }
        return lv__itemIndex;
    }
    else {
        return -1;
    }
}
int gf_GetArchiveListBox () {
    // Automatic Variable Declarations
    // Implementation
    return gv_archivePanel.lv_list;
}
void gf_ShowHidePanelofIncinerator (int lp_player, bool lp_showhide) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player)) {
        DialogControlSetVisible(gv_incineratorPanel.lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
        if ((TimerGetRemaining(gf_IncineratorTimer()) > 0.0) && gf_IsDeviceHUDVisible(lp_player)) {
            TimerWindowShow(gv_incineratorPanel.lv_timerWindow, PlayerGroupSingle(lp_player), lp_showhide);
        }
        else {
            TimerWindowShow(gv_incineratorPanel.lv_timerWindow, PlayerGroupSingle(lp_player), false);
        }
    }
}
void gf_UpdatePanelofIncinerator () {
    // Variable Declarations
    int lv__incineratorState;
    // Automatic Variable Declarations
    int auto627A9184_val;
    // Variable Initialization
    lv__incineratorState = gf_IncineratorState();
    // Implementation
    if (((lv__incineratorState == ge_IncineratorState_Preparing) || (lv__incineratorState == ge_IncineratorState_Stabilizing))) {
        TimerWindowShow(gv_incineratorPanel.lv_timerWindow, gf_GetUsersUsingDeviceHUD(gf_IncineratorUnit()), true);
        auto627A9184_val = lv__incineratorState;
        if (auto627A9184_val == ge_IncineratorState_Preparing) {
            TimerWindowSetTitle(gv_incineratorPanel.lv_timerWindow, StringExternal("Param/Value/1CF6F52F"));
        }
        else if (auto627A9184_val == ge_IncineratorState_Stabilizing) {
            TimerWindowSetTitle(gv_incineratorPanel.lv_timerWindow, StringExternal("Param/Value/7AA3820B"));
        }
        else {
        }
    }
    else {
        TimerWindowShow(gv_incineratorPanel.lv_timerWindow, PlayerGroupAll(), false);
    }
    if (((lv__incineratorState == ge_IncineratorState_Prepared) || (lv__incineratorState == ge_IncineratorState_Preparing))) {
        libNtve_gf_SetDialogItemText(gv_incineratorPanel.lv_button, StringExternal("Param/Value/2C5D1C92"), PlayerGroupAll());
    }
    else if (((lv__incineratorState == ge_IncineratorState_Stabilized) || (lv__incineratorState == ge_IncineratorState_Stabilizing))) {
        libNtve_gf_SetDialogItemText(gv_incineratorPanel.lv_button, StringExternal("Param/Value/0C8C019F"), PlayerGroupAll());
    }
    if (((lv__incineratorState == ge_IncineratorState_Prepared) || (lv__incineratorState == ge_IncineratorState_Stabilized))) {
        DialogControlSetEnabled(gv_incineratorPanel.lv_button, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetEnabled(gv_incineratorPanel.lv_button, PlayerGroupAll(), false);
    }
}
int gf_GetIncineratorButton () {
    // Automatic Variable Declarations
    // Implementation
    return gv_incineratorPanel.lv_button;
}
void gf_ShowHidePanelofMedicalBot (int lp_player, bool lp_showhide) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player)) {
        DialogControlSetVisible(gv_medicalBotPanel.lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
    }
}
void gf_UpdatePanelofMedicalBot () {
    // Variable Declarations
    int lv__incineratorState;
    // Automatic Variable Declarations
    int autoBBCEDC7C_val;
    // Variable Initialization
    lv__incineratorState = gf_IncineratorState();
    // Implementation
    autoBBCEDC7C_val = gf_MedicalBotState();
    if (autoBBCEDC7C_val == ge_MedicalBotState_Preparing) {
        libNtve_gf_SetDialogItemText(gv_medicalBotPanel.lv_progressBarNameLabel, StringExternal("Param/Value/4C86CAEF"), PlayerGroupAll());
        gf_SetColorofBarImageinProgressBar(gv_medicalBotPanel.lv_progressBar, Color(14.12, 84.71, 32.16));
    }
    else if (autoBBCEDC7C_val == ge_MedicalBotState_Healing) {
        libNtve_gf_SetDialogItemText(gv_medicalBotPanel.lv_progressBarNameLabel, StringExternal("Param/Value/0A49FF17"), PlayerGroupAll());
        gf_SetColorofBarImageinProgressBar(gv_medicalBotPanel.lv_progressBar, Color(100.00, 100.00, 0.00));
    }
    else {
    }
}
int gf_GetMedicalBotProgressBar () {
    // Automatic Variable Declarations
    // Implementation
    return gv_medicalBotPanel.lv_progressBar;
}
void gf_ShowHidePanelofMonitor (int lp_player, bool lp_showhide, unit lp_device) {
    // Variable Declarations
    int lv__monitorIndex;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto32369B1B_g;
    // Variable Initialization
    lv__monitorIndex = gf_GetMonitorIndex(lp_device);
    // Implementation
    if (gf_IsUser(lp_player) && (lv__monitorIndex != -1)) {
        DialogControlSetVisible(gv_monitorPanelArray[lv__monitorIndex].lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
        if ((TimerGetRemaining(gf_GetMonitorTargetingDelayTimer(lp_device)) > 0.0) && gf_IsDeviceHUDVisible(lp_player)) {
            TimerWindowShow(gv_monitorPanelArray[lv__monitorIndex].lv_timerWindow, PlayerGroupSingle(lp_player), lp_showhide);
        }
        else {
            TimerWindowShow(gv_monitorPanelArray[lv__monitorIndex].lv_timerWindow, PlayerGroupSingle(lp_player), false);
        }
        if ((lp_showhide == true)) {
            gf_UpdateTrackingDialogOfSecurityMonitorForPlayerGroup(lp_device, PlayerGroupSingle(lp_player));
        }
        else {
            auto32369B1B_g = gf_StartingUsers();
            lv__i = -1;
            while (true) {
                lv__i = PlayerGroupNextPlayer(auto32369B1B_g, lv__i);
                if (lv__i < 0) { break; }
                DialogSetVisible(gv_monitorTrackingDialog[gf_GetUserIndex(lv__i)], PlayerGroupSingle(lp_player), false);
            }
        }
    }
}
void gf_UpdateTrackingDialogOfSecurityMonitorForPlayerGroup (unit lp_monitor, playergroup lp_pg) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto529EE129_g;
    // Variable Initialization
    // Implementation
    if ((gf_DeviceType(lp_monitor) == ge_DeviceType_Monitor)) {
        auto529EE129_g = gf_StartingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto529EE129_g, lv__i);
            if (lv__i < 0) { break; }
            if ((gf_IsUnitInCell(gf_CharacterUnit(lv__i), gf_GetMonitoringCell(lp_monitor)) == true) && (gf_GetAccessLevelofCell(gf_GetMonitoringCell(lp_monitor)) != ge_AccessLevel_Restricted) && ((gf_IsChangelingUser(lv__i) == false) || (gf_IsChangelingCloaked() == false))) {
                DialogSetVisible(gf_MonitorTrackingDialog(lv__i), lp_pg, true);
            }
            else {
                DialogSetVisible(gf_MonitorTrackingDialog(lv__i), lp_pg, false);
            }
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/15191BAC"));
    }
}
void gf_UpdateTrackingDialogOfSecurityMonitor (unit lp_monitor) {
    // Variable Declarations
    int lv__i;
    playergroup lv__pg;
    // Automatic Variable Declarations
    playergroup autoAFD955D3_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    if ((gf_DeviceType(lp_monitor) == ge_DeviceType_Monitor)) {
        autoAFD955D3_g = gf_StartingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoAFD955D3_g, lv__i);
            if (lv__i < 0) { break; }
            if (gf_IsPanelofDeviceVisible(lv__i, lp_monitor)) {
                PlayerGroupAdd(lv__pg, lv__i);
            }
        }
        gf_UpdateTrackingDialogOfSecurityMonitorForPlayerGroup(lp_monitor, lv__pg);
    }
}
void gf_UpdatePanelofMonitor (unit lp_device) {
    // Variable Declarations
    int lv__monitorIndex;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitorIndex = gf_GetMonitorIndex(lp_device);
    // Implementation
    if ((lv__monitorIndex != -1)) {
        if ((gf_GetAccessLevelofCell(gf_GetMonitoringCell(lp_device)) == ge_AccessLevel_Restricted)) {
            DialogControlSetVisible(gv_monitorPanelArray[lv__monitorIndex].lv_blackImage, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_monitorPanelArray[lv__monitorIndex].lv_restrictLabel, PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(gv_monitorPanelArray[lv__monitorIndex].lv_blackImage, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_monitorPanelArray[lv__monitorIndex].lv_restrictLabel, PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemText(gv_monitorPanelArray[lv__monitorIndex].lv_restrictLabel, StringToText(""), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_monitorPanelArray[lv__monitorIndex].lv_restrictLabel, StringExternal("Param/Value/5EC6C930"), PlayerGroupAll());
        }
        if ((TimerGetRemaining(gf_GetMonitorTargetingDelayTimer(lp_device)) > 0.0)) {
            TimerWindowShow(gv_monitorPanelArray[lv__monitorIndex].lv_timerWindow, gf_GetUsersUsingDeviceHUD(lp_device), true);
            DialogControlSetEnabled(gv_monitorPanelArray[lv__monitorIndex].lv_pulldown, PlayerGroupAll(), false);
        }
        else {
            TimerWindowShow(gv_monitorPanelArray[lv__monitorIndex].lv_timerWindow, PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_monitorPanelArray[lv__monitorIndex].lv_pulldown, PlayerGroupAll(), true);
        }
        gf_UpdateTrackingDialogOfSecurityMonitor(lp_device);
    }
}
int gf_TargetUserOfMonitorTrakingDialog (int lp_diaolg) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto9C94DD2F_g;
    // Variable Initialization
    // Implementation
    if ((lp_diaolg != c_invalidDialogId)) {
        auto9C94DD2F_g = gf_StartingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto9C94DD2F_g, lv__i);
            if (lv__i < 0) { break; }
            if ((lp_diaolg == gf_MonitorTrackingDialog(lv__i))) {
                return lv__i;
            }
        }
    }
    return c_playerAny;
}
int gf_MonitorTrackingDialog (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_user)) {
        return gv_monitorTrackingDialog[gf_GetUserIndex(lp_user)];
    }
    else {
        return c_invalidDialogId;
    }
}
int gf_GetSelectedCellofMonitor (unit lp_monitor) {
    // Variable Declarations
    int lv__monitorIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitorIndex = gf_GetMonitorIndex(lp_monitor);
    // Implementation
    if ((lv__monitorIndex != -1)) {
        return gf_GetCellbyIndex(gf_GetCellIndexbySelectedItemofMonitorPulldown(gv_pLAYER_NEUTRAL, gv_monitorPanelArray[lv__monitorIndex].lv_pulldown));
    }
    else {
        return ge_Cell_None;
    }
}
int gf_GetCellIndexbySelectedItemofMonitorPulldown (int lp_player, int lp_pulldown) {
    // Automatic Variable Declarations
    // Implementation
    return (DialogControlGetSelectedItem(lp_pulldown, lp_player)-1);
}
int gf_GetPulldownofMonitorbyMonitorIndex (int lp_monitorIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_monitorIndex >= 0) && (lp_monitorIndex <= gv_mONITOR_INDEX_MAX))) {
        return gv_monitorPanelArray[lp_monitorIndex].lv_pulldown;
    }
    else {
        return c_invalidDialogControlId;
    }
}
int gf_GetPulldownItemIndexforMonitoringCell (unit lp_monitor) {
    // Variable Declarations
    int lv__cellIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__cellIndex = gf_GetCellIndex(gf_GetMonitoringCell(lp_monitor));
    // Implementation
    if ((lv__cellIndex != -1)) {
        return (lv__cellIndex+1);
    }
    else {
        return -1;
    }
}
void gf_ShowHidePanelofPowerGeneratorController (int lp_player, bool lp_showhide) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player)) {
        DialogControlSetVisible(gv_powerControllerPanel.lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
        if ((TimerGetRemaining(gf_PowerControllerTimer()) > 0.0) && gf_IsDeviceHUDVisible(lp_player)) {
            TimerWindowShow(gv_powerControllerPanel.lv_timerWindow, PlayerGroupSingle(lp_player), lp_showhide);
        }
        else {
            TimerWindowShow(gv_powerControllerPanel.lv_timerWindow, PlayerGroupSingle(lp_player), false);
        }
    }
}
void gf_UpdatePanelofPowerController () {
    // Variable Declarations
    int lv__i;
    playergroup lv__targetPlayerGroup;
    // Automatic Variable Declarations
    int auto44FBBF6F_val;
    // Variable Initialization
    lv__targetPlayerGroup = gf_GetUsersUsingDeviceHUD(gf_PowerControllerUnit());
    // Implementation
    auto44FBBF6F_val = gf_PowerControllerState();
    if (auto44FBBF6F_val == ge_PowerControllerState_NotSupplying) {
        libNtve_gf_SetDialogItemText(gv_powerControllerPanel.lv_button, StringExternal("Param/Value/FC0D7FA9"), PlayerGroupAll());
        DialogControlSetEnabled(gv_powerControllerPanel.lv_button, PlayerGroupAll(), true);
        gf_DisplayDirectiveMessageforPlayerGroup(StringExternal("Param/Value/CC65B4EF"), lv__targetPlayerGroup);
    }
    else if (auto44FBBF6F_val == ge_PowerControllerState_InClosingGenerator) {
        libNtve_gf_SetDialogItemText(gv_powerControllerPanel.lv_button, StringExternal("Param/Value/0C55A539"), PlayerGroupAll());
        DialogControlSetEnabled(gv_powerControllerPanel.lv_button, PlayerGroupAll(), true);
        TimerWindowSetTitle(gv_powerControllerPanel.lv_timerWindow, StringExternal("Param/Value/60C5C902"));
        gf_DisplayDirectiveMessageforPlayerGroup(StringExternal("Param/Value/49955EFC"), lv__targetPlayerGroup);
    }
    else if (auto44FBBF6F_val == ge_PowerControllerState_Supplying) {
        libNtve_gf_SetDialogItemText(gv_powerControllerPanel.lv_button, StringExternal("Param/Value/63FEE654"), PlayerGroupAll());
        DialogControlSetEnabled(gv_powerControllerPanel.lv_button, PlayerGroupAll(), true);
        gf_DisplayDirectiveMessageforPlayerGroup(StringExternal("Param/Value/84ADBE09"), lv__targetPlayerGroup);
    }
    else if (auto44FBBF6F_val == ge_PowerControllerState_Stabilizing) {
        libNtve_gf_SetDialogItemText(gv_powerControllerPanel.lv_button, StringExternal("Param/Value/B526A486"), PlayerGroupAll());
        DialogControlSetEnabled(gv_powerControllerPanel.lv_button, PlayerGroupAll(), false);
        TimerWindowSetTitle(gv_powerControllerPanel.lv_timerWindow, StringExternal("Param/Value/167F5B40"));
        gf_DisplayDirectiveMessageforPlayerGroup(StringExternal("Param/Value/B1D53D5B"), lv__targetPlayerGroup);
    }
    else {
    }
    if ((TimerGetRemaining(gf_PowerControllerTimer()) > 0.0)) {
        TimerWindowShow(gv_powerControllerPanel.lv_timerWindow, lv__targetPlayerGroup, true);
    }
    else {
        TimerWindowShow(gv_powerControllerPanel.lv_timerWindow, lv__targetPlayerGroup, false);
    }
}
int gf_GetPowerControllerButton () {
    // Automatic Variable Declarations
    // Implementation
    return gv_powerControllerPanel.lv_button;
}
void gf_ShowHidePanelofRDT (int lp_player, bool lp_showhide) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (gf_IsUser(lp_player)) {
        DialogControlSetVisible(gv_rdtPanel.lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
        if ((TimerGetRemaining(gv_rdtInfo.lv_timer) > 0.0) && gf_IsDeviceHUDVisible(lp_player)) {
            TimerWindowShow(gv_rdtPanel.lv_timerWindow, PlayerGroupSingle(lp_player), lp_showhide);
        }
        else {
            TimerWindowShow(gv_rdtPanel.lv_timerWindow, PlayerGroupSingle(lp_player), false);
        }
    }
}
void gf_UpdatePanelofRDT () {
    // Variable Declarations
    int lv__i;
    playergroup lv__targetPlayerGroup;
    // Automatic Variable Declarations
    int auto64141ED6_val;
    // Variable Initialization
    lv__targetPlayerGroup = gf_GetUsersUsingDeviceHUD(gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex));
    // Implementation
    auto64141ED6_val = gv_rdtInfo.lv_state;
    if (auto64141ED6_val == ge_RDTState_Prepared) {
        DialogControlSetVisible(gv_rdtPanel.lv_button, PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_rdtPanel.lv_button, PlayerGroupAll(), true);
        DialogControlSetVisible(gv_rdtPanel.lv_progressBar, PlayerGroupAll(), false);
        TimerWindowShow(gv_rdtPanel.lv_timerWindow, PlayerGroupAll(), false);
        gf_DisplayDirectiveMessageforPlayerGroup(StringExternal("Param/Value/E1E7D21D"), lv__targetPlayerGroup);
    }
    else if (auto64141ED6_val == ge_RDTState_Preparing) {
        DialogControlSetVisible(gv_rdtPanel.lv_button, PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_rdtPanel.lv_button, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_rdtPanel.lv_progressBar, PlayerGroupAll(), false);
        TimerWindowShow(gv_rdtPanel.lv_timerWindow, lv__targetPlayerGroup, true);
        gf_DisplayDirectiveMessageforPlayerGroup(StringExternal("Param/Value/D457BA7C"), lv__targetPlayerGroup);
    }
    else if (auto64141ED6_val == ge_RDTState_Scanning) {
        DialogControlSetVisible(gv_rdtPanel.lv_button, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_rdtPanel.lv_button, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_rdtPanel.lv_progressBar, PlayerGroupAll(), true);
        TimerWindowShow(gv_rdtPanel.lv_timerWindow, PlayerGroupAll(), false);
        gf_DisplayDirectiveMessageforPlayerGroup(StringExternal("Param/Value/765E2D06"), lv__targetPlayerGroup);
        gf_ClearDirectiveMessageforPlayerGroup(lv__targetPlayerGroup);
    }
    else {
    }
}
int gf_GetRDTButton () {
    // Automatic Variable Declarations
    // Implementation
    return gv_rdtPanel.lv_button;
}
int gf_GetRDTProgressBar () {
    // Automatic Variable Declarations
    // Implementation
    return gv_rdtPanel.lv_progressBar;
}
void gf_ShowHidePanelofEmergencyControlConsole (bool lp_showhide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player)) {
        DialogControlSetVisible(gv_emergencyControlConsolePanel.lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
        if ((TimerGetRemaining(gv_emergencyControlConsoleInfo.lv_timer) > 0.0) && gf_IsDeviceHUDVisible(lp_player)) {
            TimerWindowShow(gv_emergencyControlConsolePanel.lv_timerWindow, PlayerGroupSingle(lp_player), lp_showhide);
        }
        else {
            TimerWindowShow(gv_emergencyControlConsolePanel.lv_timerWindow, PlayerGroupSingle(lp_player), false);
        }
    }
}
void gf_UpdatePanelofEmergencyControlConsole () {
    // Variable Declarations
    int lv__i;
    int lv__index;
    // Automatic Variable Declarations
    int auto8A9C5725_ae;
    const int auto8A9C5725_ai = 1;
    int auto824D5CDF_ae;
    const int auto824D5CDF_ai = 1;
    int auto37D5EF22_ae;
    const int auto37D5EF22_ai = 1;
    playergroup auto76D72431_g;
    // Variable Initialization
    lv__index = gf_GetEmergencyControlConsoleTargetIndex();
    // Implementation
    if ((lv__index != -1)) {
        if ((gf_GetEmergencyControlConsoleState() == ge_EmergencyControlConsoleState_InSettingToRestrict)) {
            libNtve_gf_SetDialogItemText(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__index], StringExternal("Param/Value/B725AC98"), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__index], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        }
        else if ((gf_GetEmergencyControlConsoleState() == ge_EmergencyControlConsoleState_InSettingToNoraml)) {
            libNtve_gf_SetDialogItemText(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__index], StringExternal("Param/Value/551F9FDE"), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__index], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        }
    }
    auto8A9C5725_ae = (gv_initializedCellCounter-1);
    lv__i = 0;
    for ( ; ( (auto8A9C5725_ai >= 0 && lv__i <= auto8A9C5725_ae) || (auto8A9C5725_ai < 0 && lv__i >= auto8A9C5725_ae) ) ; lv__i += auto8A9C5725_ai ) {
        if ((lv__i != lv__index)) {
            if ((gf_GetAccessLevelofCell(gf_GetCellbyIndex(lv__i)) == ge_AccessLevel_Restricted)) {
                libNtve_gf_SetDialogItemColor(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__i], Color(100.00, 0.00, 0.00), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__i], gv_eMERGENCYCONSOLE_TEXT_RESTRICT, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__i], Color(22*100/255,128*100/255,0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__i], gv_eMERGENCYCONSOLE_TEXT_NORMAL, PlayerGroupAll());
            }
        }
    }
    if ((gf_GetEmergencyControlConsoleState() == ge_EmergencyControlConsoleState_Idle)) {
        auto37D5EF22_ae = (gv_initializedCellCounter-1);
        lv__i = 0;
        for ( ; ( (auto37D5EF22_ai >= 0 && lv__i <= auto37D5EF22_ae) || (auto37D5EF22_ai < 0 && lv__i >= auto37D5EF22_ae) ) ; lv__i += auto37D5EF22_ai ) {
            DialogControlSetEnabled(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__i], PlayerGroupAll(), true);
        }
    }
    else {
        auto824D5CDF_ae = (gv_initializedCellCounter-1);
        lv__i = 0;
        for ( ; ( (auto824D5CDF_ai >= 0 && lv__i <= auto824D5CDF_ae) || (auto824D5CDF_ai < 0 && lv__i >= auto824D5CDF_ae) ) ; lv__i += auto824D5CDF_ai ) {
            DialogControlSetEnabled(gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__i], PlayerGroupAll(), false);
        }
    }
    if ((TimerGetRemaining(gf_GetEmergencyControlConsoleTimer()) > 0.0)) {
        auto76D72431_g = gf_AllPlayingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto76D72431_g, lv__i);
            if (lv__i < 0) { break; }
            if (gf_IsDeviceHUDVisible(lv__i) && (gf_DeviceType(gf_GetCurrentTargetDeviceofDeviceHUD(lv__i)) == ge_DeviceType_SecurityController)) {
                TimerWindowShow(gv_emergencyControlConsolePanel.lv_timerWindow, PlayerGroupSingle(lv__i), true);
            }
        }
    }
    else {
        TimerWindowShow(gv_emergencyControlConsolePanel.lv_timerWindow, PlayerGroupAll(), false);
    }
}
bool gf_IsSecurityButton (int lp__item) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int autoA8D5B1B4_ae;
    const int autoA8D5B1B4_ai = 1;
    // Variable Initialization
    // Implementation
    autoA8D5B1B4_ae = (gv_initializedCellCounter-1);
    lv__i = 0;
    for ( ; ( (autoA8D5B1B4_ai >= 0 && lv__i <= autoA8D5B1B4_ae) || (autoA8D5B1B4_ai < 0 && lv__i >= autoA8D5B1B4_ae) ) ; lv__i += autoA8D5B1B4_ai ) {
        if ((lp__item == gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__i])) {
            return true;
        }
    }
    return false;
}
int gf_GetCellIndexbyEmergencyControlConsolebutton (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsSecurityButton(lp_item)) {
        return FixedToInt(libNtve_gf_DialogItemValue(lp_item, gv_pLAYER_NEUTRAL));
    }
    else {
        return -1;
    }
}
void gf_ShowHidePanelofSateliteController (int lp_player, bool lp_showhide) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (gf_IsUser(lp_player)) {
        DialogControlSetVisible(gv_sateliteControllerPanel.lv_panel, PlayerGroupSingle(lp_player), lp_showhide);
        if ((TimerGetRemaining(gv_sateliteControllerInfo.lv_timer) > 0.0) && gf_IsDeviceHUDVisible(lp_player)) {
            TimerWindowShow(gv_sateliteControllerPanel.lv_timerWindow, PlayerGroupSingle(lp_player), lp_showhide);
        }
        else {
            TimerWindowShow(gv_sateliteControllerPanel.lv_timerWindow, PlayerGroupSingle(lp_player), false);
        }
    }
}
void gf_UpdatePanelofSateliteController () {
    // Variable Declarations
    int lv__i;
    playergroup lv__targetPlayerGroup;
    // Automatic Variable Declarations
    int autoDFD44C6A_val;
    // Variable Initialization
    lv__targetPlayerGroup = gf_GetUsersUsingDeviceHUD(gf_GetSatatliteController());
    // Implementation
    autoDFD44C6A_val = gf_GetSateliteControllerState();
    if (autoDFD44C6A_val == ge_SateliteControllerState_Prepared) {
        DialogControlSetEnabled(gv_sateliteControllerPanel.lv_button, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetEnabled(gv_sateliteControllerPanel.lv_button, PlayerGroupAll(), false);
    }
    if ((TimerGetRemaining(gv_sateliteControllerInfo.lv_timer) > 0.0)) {
        TimerWindowShow(gv_sateliteControllerPanel.lv_timerWindow, lv__targetPlayerGroup, true);
    }
    else {
        TimerWindowShow(gv_sateliteControllerPanel.lv_timerWindow, lv__targetPlayerGroup, false);
    }
}
int gf_GetSateliteControllerButton () {
    // Automatic Variable Declarations
    // Implementation
    return gv_sateliteControllerPanel.lv_button;
}
int gf_GetGateUnlockProcessProgressBar () {
    // Automatic Variable Declarations
    // Implementation
    return gv_gateUnlockProcessPanel.lv_processBar;
}
int gf_GetMostVotedUser () {
    // Variable Declarations
    int lv__i;
    int lv__userIndex;
    int lv__mostVotedUser;
    int lv__mostVoteCount;
    bool lv__isUniqueVotedUser;
    // Automatic Variable Declarations
    playergroup autoC9384C14_g;
    // Variable Initialization
    lv__mostVotedUser = c_playerAny;
    // Implementation
    if ((gf_GetCustomFullScreenDialog(ge_CustomFullScreenDialogType_Vote) != c_invalidDialogId)) {
        autoC9384C14_g = gv_voteInfo.lv_votingUsers;
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoC9384C14_g, lv__i);
            if (lv__i < 0) { break; }
            lv__userIndex = gf_GetUserIndex(lv__i);
            if ((gv_voteInfo.lv_voteCounter[lv__userIndex] > lv__mostVoteCount)) {
                lv__isUniqueVotedUser = true;
                lv__mostVoteCount = gv_voteInfo.lv_voteCounter[lv__userIndex];
                lv__mostVotedUser = lv__i;
            }
            else if ((gv_voteInfo.lv_voteCounter[lv__userIndex] == lv__mostVoteCount)) {
                lv__isUniqueVotedUser = false;
            }
        }
        if ((lv__isUniqueVotedUser == true)) {
            return lv__mostVotedUser;
        }
        else {
            return c_playerAny;
        }
    }
    else {
        return c_playerAny;
    }
}
int gf_GetVoteTargetUser (int lp_dialogItem) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_dialogItem != c_invalidDialogControlId) && (DialogControlGetDialog(lp_dialogItem) == gv_voteInfo.lv_dialog)) {
        return FixedToInt(libNtve_gf_DialogItemValue(lp_dialogItem, gv_pLAYER_NEUTRAL));
    }
    else {
        return c_playerAny;
    }
}
bool gf_HasVoted (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_voteInfo.lv_hasVoted[lv__userIndex];
    }
    else {
        return false;
    }
}
void gf_InitializeVoteDialog (playergroup lp_pg) {
    // Variable Declarations
    int lv__i;
    int lv__cnt;
    playergroup lv__pg;
    // Automatic Variable Declarations
    playergroup auto998FF2A9_g;
    playergroup auto447F226D_g;
    const int autoF23B8C7B_ae = gv_uSER_LAST;
    const int autoF23B8C7B_ai = 1;
    // Variable Initialization
    lv__pg = PlayerGroupCopy(lp_pg);
    // Implementation
    if ((lv__pg != null)) {
        auto998FF2A9_g = lp_pg;
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto998FF2A9_g, lv__i);
            if (lv__i < 0) { break; }
            if (gf_IsUser(lv__i)) {
                continue;
            }
            else {
                PlayerGroupRemove(lv__pg, lv__i);
            }
        }
        if ((PlayerGroupCount(lv__pg) > 1)) {
            if ((gv_voteInfo.lv_dialog != c_invalidDialogId)) {
                DialogDestroy(gv_voteInfo.lv_dialog);
                auto447F226D_g = lv__pg;
                lv__i = -1;
                while (true) {
                    lv__i = PlayerGroupNextPlayer(auto447F226D_g, lv__i);
                    if (lv__i < 0) { break; }
                    gv_voteInfo.lv_hasVoted[gf_GetUserIndex(lv__i)] = false;
                    gv_voteInfo.lv_voteCounter[gf_GetUserIndex(lv__i)] = 0;
                }
            }
            gv_voteInfo.lv_votingUsers = lv__pg;
            DialogCreate(280, (50*PlayerGroupCount(lv__pg)+20*(PlayerGroupCount(lv__pg)-1)+45*2), c_anchorCenter, 0, 0, true);
            DialogSetTransparency(DialogLastCreated(), 20.0);
            lv__i = gv_uSER_FIRST;
            for ( ; ( (autoF23B8C7B_ai >= 0 && lv__i <= autoF23B8C7B_ae) || (autoF23B8C7B_ai < 0 && lv__i >= autoF23B8C7B_ae) ) ; lv__i += autoF23B8C7B_ai ) {
                if ((((PlayerGroupHasPlayer(lv__pg, lv__i) == true) && (gf_CharacterRole(lv__i) == ge_CharacterRole_Marine)) || ((lv__i == gf_GetDisguiseTargetUser()) && (PlayerGroupHasPlayer(lv__pg, gf_GetChangelingPlayer()) == true)))) {
                    lv__cnt = (lv__cnt+1);
                    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, (45+(50+20)*(lv__cnt-1)), StringToText(""), gf_RecordedUserNamewithColor(lv__i), "");
                    if ((lv__i == gf_GetDisguiseTargetUser())) {
                        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), FixedToInt(gf_GetChangelingPlayer()), PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), FixedToInt(lv__i), PlayerGroupAll());
                    }
                }
            }
            gv_voteInfo.lv_dialog = DialogLastCreated();
        }
        else {
            gf_CustomDebugMessage(StringExternal("Param/Value/AB833AB2"));
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/D47E72A3"));
    }
}
void gf_VoteforTargetUser (int lp_user, int lp_targetUser) {
    // Variable Declarations
    int lv__i;
    int lv__userIndex;
    int lv__targetUserIndex;
    // Automatic Variable Declarations
    playergroup auto8DC07846_g;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__targetUserIndex = gf_GetUserIndex(lp_targetUser);
    // Implementation
    if ((lv__userIndex != -1) && (lv__targetUserIndex != -1) && (gv_voteInfo.lv_hasVoted[lv__userIndex] == false)) {
        gv_voteInfo.lv_voteCounter[lv__targetUserIndex] = (gv_voteInfo.lv_voteCounter[lv__targetUserIndex]+1);
        gv_voteInfo.lv_hasVoted[lv__userIndex] = true;
        auto8DC07846_g = gv_voteInfo.lv_votingUsers;
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto8DC07846_g, lv__i);
            if (lv__i < 0) { break; }
            TextExpressionSetToken("Param/Expression/310ACD87", "A", gf_RecordedUserNamewithColor(lv__i));
            TextExpressionSetToken("Param/Expression/310ACD87", "B", IntToText(gv_voteInfo.lv_voteCounter[gf_GetUserIndex(lv__i)]));
            gf_CustomDebugMessage(TextExpressionAssemble("Param/Expression/310ACD87"));
        }
    }
}
void gf_CustomMinimapTickActions () {
    // Variable Declarations
    int lv__i;
    unit lv__u;
    int lv__changelingPlayer;
    playergroup lv__pg;
    // Automatic Variable Declarations
    playergroup auto32C88B19_g;
    int auto4FA0880F_ae;
    const int auto4FA0880F_ai = 1;
    // Variable Initialization
    lv__changelingPlayer = gf_GetChangelingPlayer();
    // Implementation
    if ((gf_GameState() != ge_GameState_MainGame)) {
        return ;
    }
    auto32C88B19_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto32C88B19_g, lv__i);
        if (lv__i < 0) { break; }
        gf_UpdateDialogItemPositionInCustomMimimap(gv_customMinimap.lv_characterIconImage, UnitGetPosition(gf_CharacterUnit(lv__i)), gf_GetUserwithObservers(lv__i));
        lv__pg = gf_GetCustomMinimapTrackingModeUsers();
        if (gf_IsUnitInRestrictedCell(gf_CharacterUnit(lv__i))) {
            DialogControlSetVisible(gf_GetCustomMinimapTrackingIconImage(lv__i), lv__pg, false);
        }
        else {
            DialogControlSetVisible(gf_GetCustomMinimapTrackingIconImage(lv__i), lv__pg, true);
            gf_UpdateDialogItemPositionInCustomMimimap(gf_GetCustomMinimapTrackingIconImage(lv__i), UnitGetPosition(gf_CharacterUnit(lv__i)), PlayerGroupAll());
        }
    }
    if ((lv__changelingPlayer != c_playerAny)) {
        auto4FA0880F_ae = gf_GetLastAberrationCageIndex();
        lv__i = 0;
        for ( ; ( (auto4FA0880F_ai >= 0 && lv__i <= auto4FA0880F_ae) || (auto4FA0880F_ai < 0 && lv__i >= auto4FA0880F_ae) ) ; lv__i += auto4FA0880F_ai ) {
            if ((gf_GetAberrationCageStatebyIndex(lv__i) == ge_AberrationCageState_Released)) {
                lv__u = gf_GetAberrationbyIndex(lv__i);
                if ((lv__u != null) && (UnitIsAlive(lv__u) == true)) {
                    gf_UpdateDialogItemPositionInCustomMimimap(gv_customMinimap.lv_abberationImage[lv__i], UnitGetPosition(lv__u), gf_GetUserwithObservers(gf_GetChangelingPlayer()));
                }
                else {
                    if ((DialogControlIsVisible(gv_customMinimap.lv_abberationImage[lv__i], lv__changelingPlayer) == true)) {
                        DialogControlSetVisible(gv_customMinimap.lv_abberationImage[lv__i], PlayerGroupAll(), false);
                    }
                }
            }
        }
    }
}
void gf_SetTrackingModeofCustomMinimap (int lp_user, bool lp_isTrackingMode) {
    // Variable Declarations
    int lv__i;
    int lv__userIndex;
    // Automatic Variable Declarations
    playergroup auto654E9695_g;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if (((lv__userIndex == -1) || (gv_customMinimap.lv_isTrackingMode[lv__userIndex] == lp_isTrackingMode))) {
        gf_CustomDebugMessage(StringExternal("Param/Value/BBB25082"));
        return ;
    }
    if ((lp_isTrackingMode == true)) {
        DialogControlSetVisible(gv_customMinimap.lv_characterIconImage, PlayerGroupSingle(lp_user), false);
        gv_customMinimap.lv_isTrackingMode[lv__userIndex] = true;
    }
    else {
        DialogControlSetVisible(gv_customMinimap.lv_characterIconImage, PlayerGroupAll(), true);
        auto654E9695_g = gf_AliveUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto654E9695_g, lv__i);
            if (lv__i < 0) { break; }
            DialogControlSetVisible(gv_customMinimap.lv_sateliteTargetImage[gf_GetUserIndex(lv__i)], PlayerGroupSingle(lp_user), false);
        }
        gv_customMinimap.lv_isTrackingMode[lv__userIndex] = false;
    }
}
void gf_AllowDisallowControlMinimap (int lp_user, bool lp_allowdisallow) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        if ((lp_allowdisallow == true)) {
            gv_canControlMinimap[lv__userIndex] = true;
        }
        else {
            gv_canControlMinimap[lv__userIndex] = false;
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/46EC62FA"));
    }
}
void gf_ShowHideCustomMinimap (int lp_player, bool lp_showhide) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_IsUser(lp_player) == false)) {
        gf_CustomDebugMessage(StringExternal("Param/Value/5C31CFC4"));
        return ;
    }
    if ((lp_showhide == true)) {
        DialogSetVisible(gv_customMinimap.lv_dialog, gf_GetUserwithObservers(lp_player), true);
        gv_customMinimap.lv_isVisible[gf_GetUserIndex(lp_player)] = true;
    }
    else {
        DialogSetVisible(gv_customMinimap.lv_dialog, gf_GetUserwithObservers(lp_player), false);
        gv_customMinimap.lv_isVisible[gf_GetUserIndex(lp_player)] = false;
    }
}
trigger auto_gf_CreatePointMarkerToMinimap_Trigger = null;
point auto_gf_CreatePointMarkerToMinimap_lp_point;
color auto_gf_CreatePointMarkerToMinimap_lp_color;
playergroup auto_gf_CreatePointMarkerToMinimap_lp_pg;
fixed auto_gf_CreatePointMarkerToMinimap_lp_duration;
void gf_CreatePointMarkerToMinimap (point lp_point, color lp_color, playergroup lp_pg, fixed lp_duration) {
    auto_gf_CreatePointMarkerToMinimap_lp_point = lp_point;
    auto_gf_CreatePointMarkerToMinimap_lp_color = lp_color;
    auto_gf_CreatePointMarkerToMinimap_lp_pg = lp_pg;
    auto_gf_CreatePointMarkerToMinimap_lp_duration = lp_duration;
    if (auto_gf_CreatePointMarkerToMinimap_Trigger == null) {
        auto_gf_CreatePointMarkerToMinimap_Trigger = TriggerCreate("auto_gf_CreatePointMarkerToMinimap_TriggerFunc");
    }
    TriggerExecute(auto_gf_CreatePointMarkerToMinimap_Trigger, false, false);
}
bool auto_gf_CreatePointMarkerToMinimap_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_CreatePointMarkerToMinimap_lp_point;
    color lp_color = auto_gf_CreatePointMarkerToMinimap_lp_color;
    playergroup lp_pg = auto_gf_CreatePointMarkerToMinimap_lp_pg;
    fixed lp_duration = auto_gf_CreatePointMarkerToMinimap_lp_duration;
    // Automatic Variable Declarations
    // Implementation
    if ((lp_point != null) && (lp_pg != null) && (lp_duration > 0.0)) {
        libNtve_gf_CreateDialogItemImage(gv_customMinimap.lv_dialog, 30, 30, c_anchorTopLeft, 50, 50, StringToText(""), "EditorData\\Images\\MinimapStartLocation.tga", c_triggerImageTypeNormal, false, lp_color, c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), lp_pg, true);
        gf_UpdateDialogItemPositionInCustomMimimap(DialogControlLastCreated(), lp_point, lp_pg);
        Wait(lp_duration, c_timeGame);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 100.0);
        Wait(3.0, c_timeGame);
        DialogControlDestroy(DialogControlLastCreated());
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/DEE05F69"));
    }
    return true;
}
playergroup gf_GetCustomMinimapTrackingModeUsers () {
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto4AF9C25C_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    auto4AF9C25C_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto4AF9C25C_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gv_customMinimap.lv_isTrackingMode[gf_GetUserIndex(lv__i)] == true)) {
            PlayerGroupAdd(lv__pg, lv__i);
        }
    }
    return lv__pg;
}
int gf_GetCustomMinimapTrackingIconImage (int lp_trackingTargetUser) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_trackingTargetUser);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_customMinimap.lv_sateliteTargetImage[lv__userIndex];
    }
    else {
        return c_invalidDialogControlId;
    }
}
bool gf_CanControlMinimap (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_canControlMinimap[lv__userIndex];
    }
    else {
        return false;
    }
}
int gf_MinimapXPositionbyWorldPoint (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_point == null)) {
        return 0;
    }
    return FixedToInt(((PointGetX(lp_point)-2) * gv_mINIMAP_RATIO));
}
int gf_MinimapYPositionbyWorldPoint (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_point == null)) {
        return 0;
    }
    return FixedToInt((gv_mINIMAP_SIZE_Y - PointGetY(lp_point) * gv_mINIMAP_RATIO));
}
void gf_UpdateDialogItemPositionInCustomMimimap (int lp_dialogItem, point lp_point, playergroup lp_pg) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_dialogItem != c_invalidDialogControlId) && (lp_point != null) && (lp_pg != null) && (DialogControlGetDialog(lp_dialogItem) == gv_customMinimap.lv_dialog) && (lp_dialogItem != gv_customMinimap.lv_mapImage)) {
        DialogControlSetPositionRelative(lp_dialogItem, lp_pg, c_anchorCenter, gv_customMinimap.lv_mapImage, c_anchorTopLeft, gf_MinimapXPositionbyWorldPoint(lp_point), gf_MinimapYPositionbyWorldPoint(lp_point));
    }
}
void gf_DoDontUpdateCustomMinimap (bool lp_dodonot) {
    // Automatic Variable Declarations
    bool autoCE99FB98_val;
    // Implementation
    autoCE99FB98_val = lp_dodonot;
    if (autoCE99FB98_val == true) {
        if ((TriggerActiveCount(gt_LoopforUpdateMinimap) < 1)) {
            TriggerExecute(gt_LoopforUpdateMinimap, true, false);
        }
    }
    else if (autoCE99FB98_val == false) {
        if ((TriggerActiveCount(gt_LoopforUpdateMinimap) > 0)) {
            TriggerStop(gt_LoopforUpdateMinimap);
        }
    }
    else {
    }
}
void gf_ShowHideUtilityHUD (int lp_user, bool lp_showhide, int lp_panelType) {
    // Variable Declarations
    int lv__userIndex;
    int lv__panel;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__panel = c_invalidDialogControlId;
    // Implementation
    if ((lv__userIndex != -1)) {
        DialogSetVisible(gv_utilityDialog, PlayerGroupSingle(lp_user), lp_showhide);
        if ((lp_showhide == true)) {
            if ((gv_currentUtilityPanelType[lv__userIndex] != lp_panelType)) {
                lv__panel = gf_GetUtilityPanel(gv_currentUtilityPanelType[lv__userIndex]);
                if ((lv__panel != c_invalidDialogControlId)) {
                    DialogControlSetVisible(lv__panel, PlayerGroupSingle(lp_user), false);
                }
                lv__panel = gf_GetUtilityPanel(lp_panelType);
                if ((lv__panel != c_invalidDialogControlId)) {
                    gv_currentUtilityPanelType[lv__userIndex] = lp_panelType;
                    DialogControlSetVisible(lv__panel, PlayerGroupSingle(lp_user), true);
                }
                else {
                    gv_currentUtilityPanelType[lv__userIndex] = ge_UtilityPanelType_None;
                }
            }
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/4F0CE769"));
    }
}
int gf_GetUtilityPanel (int lp_panelType) {
    // Automatic Variable Declarations
    int auto45801126_val;
    // Implementation
    auto45801126_val = lp_panelType;
    if (auto45801126_val == ge_UtilityPanelType_BlacklistPanel) {
        return gv_blacklistPanel.lv_panel;
    }
    else if (auto45801126_val == ge_UtilityPanelType_ChatSettingPanel) {
        return gv_chatSettingPanel.lv_panel;
    }
    else if (auto45801126_val == ge_UtilityPanelType_HelpPanel) {
        return gv_helpTextPanel.lv_panel;
    }
    else if (auto45801126_val == ge_UtilityPanelType_SelectionPanel) {
        return gv_selectionPanel.lv_panel;
    }
    else {
        return c_invalidDialogControlId;
    }
}
int gf_GetUtilityPanelTypeofSelectionPanelMenuItem (int lp_item) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int auto587ABDA2_ae = gv_sELECTION_MENU_ITEM_INDEX_MAX;
    const int auto587ABDA2_ai = 1;
    // Variable Initialization
    // Implementation
    if ((lp_item != c_invalidDialogControlId)) {
        lv__i = 0;
        for ( ; ( (auto587ABDA2_ai >= 0 && lv__i <= auto587ABDA2_ae) || (auto587ABDA2_ai < 0 && lv__i >= auto587ABDA2_ae) ) ; lv__i += auto587ABDA2_ai ) {
            if ((lp_item == gv_selectionPanel.lv_menuItems[lv__i])) {
                return gv_selectionPanel.lv_menuValueTable[lv__i];
            }
        }
        return ge_UtilityPanelType_None;
    }
    else {
        return ge_UtilityPanelType_None;
    }
}
int gf_GetHelpTextPanelListBox () {
    // Automatic Variable Declarations
    // Implementation
    return gv_helpTextPanel.lv_listBox;
}
int gf_GetHelpTextPanelListBoxItemIndex (int lp_helpPanelItemType, int lp_deviceTypeOnlyForDevice) {
    // Variable Declarations
    int lv__deviceTypeIndex;
    // Automatic Variable Declarations
    int autoBA2F4365_val;
    // Variable Initialization
    lv__deviceTypeIndex = gf_DeviceTypeIndex(lp_deviceTypeOnlyForDevice);
    // Implementation
    autoBA2F4365_val = lp_helpPanelItemType;
    if (autoBA2F4365_val == ge_HelpTextPanelItemType_AccountBan) {
        return gv_helpTextPanel.lv_accountBanHelp.lv_listBoxIndex;
    }
    else if (autoBA2F4365_val == ge_HelpTextPanelItemType_Blacklist) {
        return gv_helpTextPanel.lv_blacklistHelp.lv_listBoxIndex;
    }
    else if (autoBA2F4365_val == ge_HelpTextPanelItemType_Command) {
        return gv_helpTextPanel.lv_commandHelp.lv_listBoxIndex;
    }
    else if (autoBA2F4365_val == ge_HelpTextPanelItemType_Device) {
        if ((lv__deviceTypeIndex != -1)) {
            return gv_helpTextPanel.lv_deviceHelp[lv__deviceTypeIndex].lv_listBoxIndex;
        }
        else {
            return -1;
        }
    }
    else if (autoBA2F4365_val == ge_HelpTextPanelItemType_LegacyScore) {
        return gv_helpTextPanel.lv_legacyScoreHelp.lv_listBoxIndex;
    }
    else if (autoBA2F4365_val == ge_HelpTextPanelItemType_ObjectOfChangeling) {
        return gv_helpTextPanel.lv_objectChangeling.lv_listBoxIndex;
    }
    else if (autoBA2F4365_val == ge_HelpTextPanelItemType_ObjectOfMarine) {
        return gv_helpTextPanel.lv_objectMarine.lv_listBoxIndex;
    }
    else if (autoBA2F4365_val == ge_HelpTextPanelItemType_Synopsis) {
        return gv_helpTextPanel.lv_synopsis.lv_listBoxIndex;
    }
    else if (autoBA2F4365_val == ge_HelpTextPanelItemType_CreatorsComment) {
        return gv_helpTextPanel.lv_comment.lv_listBoxIndex;
    }
    else {
        return -1;
    }
}
text gf_GetHelpTextPanelTextbyListBoxItemIndex (int lp_index) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int auto409A8C05_ae = gv_dEVICE_TYPE_INDEX_MAX;
    const int auto409A8C05_ai = 1;
    // Variable Initialization
    // Implementation
    if ((lp_index != -1)) {
        if ((lp_index == gv_helpTextPanel.lv_accountBanHelp.lv_listBoxIndex)) {
            return gv_helpTextPanel.lv_accountBanHelp.lv_text;
        }
        else if ((lp_index == gv_helpTextPanel.lv_blacklistHelp.lv_listBoxIndex)) {
            return gv_helpTextPanel.lv_blacklistHelp.lv_text;
        }
        else if ((lp_index == gv_helpTextPanel.lv_commandHelp.lv_listBoxIndex)) {
            return gv_helpTextPanel.lv_commandHelp.lv_text;
        }
        else if ((lp_index == gv_helpTextPanel.lv_legacyScoreHelp.lv_listBoxIndex)) {
            return gv_helpTextPanel.lv_legacyScoreHelp.lv_text;
        }
        else if ((lp_index == gv_helpTextPanel.lv_objectChangeling.lv_listBoxIndex)) {
            return gv_helpTextPanel.lv_objectChangeling.lv_text;
        }
        else if ((lp_index == gv_helpTextPanel.lv_objectMarine.lv_listBoxIndex)) {
            return gv_helpTextPanel.lv_objectMarine.lv_text;
        }
        else if ((lp_index == gv_helpTextPanel.lv_synopsis.lv_listBoxIndex)) {
            return gv_helpTextPanel.lv_synopsis.lv_text;
        }
        else if ((lp_index == gv_helpTextPanel.lv_comment.lv_listBoxIndex)) {
            return gv_helpTextPanel.lv_comment.lv_text;
        }
        else if (true) {
            lv__i = 0;
            for ( ; ( (auto409A8C05_ai >= 0 && lv__i <= auto409A8C05_ae) || (auto409A8C05_ai < 0 && lv__i >= auto409A8C05_ae) ) ; lv__i += auto409A8C05_ai ) {
                if ((gv_helpTextPanel.lv_deviceHelp[lv__i].lv_listBoxIndex == lp_index)) {
                    return gv_helpTextPanel.lv_deviceHelp[lv__i].lv_text;
                }
            }
        }
        return null;
    }
    else {
        return null;
    }
}
text gf_CreateDeviceHelpText (int lp_deviceType) {
    // Variable Declarations
    text lv__text;
    bool lv__bool;
    unit lv__device;
    int lv__cell;
    int lv__cellIndex;
    bool[gv_cELL_INDEX_MAX + 1] lv__cellFilter;
    // Automatic Variable Declarations
    int autoDB7AE341_val;
    unitgroup auto7E2B6B17_g;
    int auto7E2B6B17_u;
    // Variable Initialization
    lv__cell = ge_Cell_None;
    // Implementation
    autoDB7AE341_val = lp_deviceType;
    if (autoDB7AE341_val == ge_DeviceType_AberrationCage) {
        lv__text = StringExternal("Param/Value/03FFBA94");
    }
    else if (autoDB7AE341_val == ge_DeviceType_Archive) {
        TextExpressionSetToken("Param/Expression/BE98C247", "A", IntToText(gv_aRCHIVE_RECORD_DELAY));
        lv__text = TextExpressionAssemble("Param/Expression/BE98C247");
    }
    else if (autoDB7AE341_val == ge_DeviceType_Incinerator) {
        TextExpressionSetToken("Param/Expression/3C5AAB0F", "A", IntToText(gv_iNCI_TIME_PREPARING));
        TextExpressionSetToken("Param/Expression/3C5AAB0F", "B", IntToText(gv_iNCI_TIME_STABILIZING));
        lv__text = TextExpressionAssemble("Param/Expression/3C5AAB0F");
    }
    else if (autoDB7AE341_val == ge_DeviceType_MedicalBot) {
        lv__text = TextExpressionAssemble("Param/Expression/3D298AD4");
    }
    else if (autoDB7AE341_val == ge_DeviceType_Monitor) {
        lv__text = TextExpressionAssemble("Param/Expression/2CBC33EA");
    }
    else if (autoDB7AE341_val == ge_DeviceType_PhaseShifter) {
        lv__text = TextExpressionAssemble("Param/Expression/5C7EC10A");
    }
    else if (autoDB7AE341_val == ge_DeviceType_PowerController) {
        TextExpressionSetToken("Param/Expression/76E02E7C", "A", IntToText(gv_pOWER_CONTROLLER_TIME_SHUT_DOWN));
        TextExpressionSetToken("Param/Expression/76E02E7C", "B", IntToText(gv_pOWER_CONTROLLER_TIME_STABILIZING));
        lv__text = TextExpressionAssemble("Param/Expression/76E02E7C");
    }
    else if (autoDB7AE341_val == ge_DeviceType_RadiationDiagnosticTester) {
        TextExpressionSetToken("Param/Expression/332220AD", "A", IntToText(gv_rDT_PREPARING_TIME));
        lv__text = TextExpressionAssemble("Param/Expression/332220AD");
    }
    else if (autoDB7AE341_val == ge_DeviceType_SateliteController) {
        TextExpressionSetToken("Param/Expression/019411EB", "A", IntToText(gv_sCC_PREPARING_TIME));
        lv__text = TextExpressionAssemble("Param/Expression/019411EB");
    }
    else if (autoDB7AE341_val == ge_DeviceType_SecurityController) {
        TextExpressionSetToken("Param/Expression/147BE18E", "A", IntToText(gv_cONTROL_GATE_TIME_FOR_UNLOCKING));
        TextExpressionSetToken("Param/Expression/147BE18E", "B", IntToText(gv_eMERGENCYCONSOLE_TIME_SETTING_RESTRICT));
        TextExpressionSetToken("Param/Expression/147BE18E", "C", IntToText(gv_eMERGENCYCONSOLE_TIME_SETTING_NORMAL));
        lv__text = TextExpressionAssemble("Param/Expression/147BE18E");
    }
    else {
        return null;
    }
    TextExpressionSetToken("Param/Expression/522CFB28", "text", lv__text);
    lv__text = TextExpressionAssemble("Param/Expression/522CFB28");
    if ((gf_MaskDeviceFlag(gf_DefaultDeviceFlag(lp_deviceType), ge_DeviceFlag_ForChangeling) == true)) {
        TextExpressionSetToken("Param/Expression/65411287", "text", lv__text);
        TextExpressionSetToken("Param/Expression/65411287", "deviceProperty", StringExternal("Param/Value/E250AC3C"));
        lv__text = TextExpressionAssemble("Param/Expression/65411287");
    }
    if ((gf_MaskDeviceFlag(gf_DefaultDeviceFlag(lp_deviceType), ge_DeviceFlag_NeedsPower) == true)) {
        TextExpressionSetToken("Param/Expression/70BC88B1", "text", lv__text);
        TextExpressionSetToken("Param/Expression/70BC88B1", "deviceProperty", StringExternal("Param/Value/16402D0D"));
        lv__text = TextExpressionAssemble("Param/Expression/70BC88B1");
    }
    if ((gf_MaskDeviceFlag(gf_DefaultDeviceFlag(lp_deviceType), ge_DeviceFlag_OnlyOnce) == true)) {
        TextExpressionSetToken("Param/Expression/F5B51CA3", "text", lv__text);
        TextExpressionSetToken("Param/Expression/F5B51CA3", "deviceProperty", StringExternal("Param/Value/65F85DD4"));
        lv__text = TextExpressionAssemble("Param/Expression/F5B51CA3");
    }
    auto7E2B6B17_g = gf_AllDevicesofDeviceType(lp_deviceType);
    auto7E2B6B17_u = UnitGroupCount(auto7E2B6B17_g, c_unitCountAll);
    for (;; auto7E2B6B17_u -= 1) {
        lv__device = UnitGroupUnitFromEnd(auto7E2B6B17_g, auto7E2B6B17_u);
        if (lv__device == null) { break; }
        lv__cell = gf_GetCellwhereUnitExists(lv__device);
        lv__cellIndex = gf_GetCellIndex(lv__cell);
        if ((lv__cellIndex != -1) && (lv__cellFilter[lv__cellIndex] == false)) {
            if ((lv__bool == false)) {
                TextExpressionSetToken("Param/Expression/17D43B6A", "text", lv__text);
                TextExpressionSetToken("Param/Expression/17D43B6A", "cellName", gf_GetCellName(lv__cell));
                lv__text = TextExpressionAssemble("Param/Expression/17D43B6A");
                lv__bool = true;
            }
            else {
                TextExpressionSetToken("Param/Expression/C35CCC28", "text", lv__text);
                TextExpressionSetToken("Param/Expression/C35CCC28", "cellName", gf_GetCellName(lv__cell));
                lv__text = TextExpressionAssemble("Param/Expression/C35CCC28");
            }
            lv__cellFilter[lv__cellIndex] = true;
        }
    }
    TextExpressionSetToken("Param/Expression/4688AC2C", "text", lv__text);
    lv__text = TextExpressionAssemble("Param/Expression/4688AC2C");
    return lv__text;
}
void gf_ResetBlacklistSelectionInfo () {
    // Automatic Variable Declarations
}
void gf_UpdateBlacklistTargetUserListBox (int lp_user, int lp_itemIndex) {
    // Variable Declarations
    int lv__userIndex;
    int lv__targetUserListBox;
    bank lv__bank;
    int lv__i;
    string lv__s;
    // Automatic Variable Declarations
    playergroup auto907FDF33_g;
    int auto03B18B25_i;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__targetUserListBox = gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListBox);
    // Implementation
    if ((lv__userIndex != -1) && ((lp_itemIndex >= 1) && (lp_itemIndex <= DialogControlGetItemCount(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListTypePulldown), lp_user)))) {
        DialogControlRemoveAllItems(lv__targetUserListBox, PlayerGroupSingle(lp_user));
        if ((lp_itemIndex == gv_bLACKLIST_PANEL_TARGET_USER_LIST_TYPE_CURRENT)) {
            gv_blacklistPanelUserInfoArray[lv__userIndex].lv_targetUserListType = ge_BlacklistTargetUserListType_CurrentUsers;
            auto907FDF33_g = gf_StartingUsers();
            lv__i = -1;
            while (true) {
                lv__i = PlayerGroupNextPlayer(auto907FDF33_g, lv__i);
                if (lv__i < 0) { break; }
                DialogControlAddItem(lv__targetUserListBox, PlayerGroupSingle(lp_user), gf_RecordedUserNamewithColor(lv__i));
            }
        }
        else if ((lp_itemIndex == gv_bLACKLIST_PANEL_TARGET_USER_LIST_TYPE_LAST)) {
            lv__bank = gf_GetBlacklistBank(lp_user);
            if ((lv__bank != null)) {
                gv_blacklistPanelUserInfoArray[lv__userIndex].lv_targetUserListType = ge_BlacklistTargetUserListType_LastUsers;
                auto03B18B25_i = 0;
                if(lv__bank != null && BankSectionExists(lv__bank, gv_bLACKLIST_BANK_SECTION_LASTPLAYERS)) {
                    for( ; auto03B18B25_i < BankKeyCount(lv__bank, gv_bLACKLIST_BANK_SECTION_LASTPLAYERS); auto03B18B25_i += BoolToInt(lv__s == BankKeyName(lv__bank, gv_bLACKLIST_BANK_SECTION_LASTPLAYERS, auto03B18B25_i))) {
                        lv__s = BankKeyName(lv__bank, gv_bLACKLIST_BANK_SECTION_LASTPLAYERS, auto03B18B25_i);
                        DialogControlAddItem(lv__targetUserListBox, PlayerGroupSingle(lp_user), BankValueGetAsText(lv__bank, gv_bLACKLIST_BANK_SECTION_LASTPLAYERS, lv__s));
                        if(!BankSectionExists(lv__bank, gv_bLACKLIST_BANK_SECTION_LASTPLAYERS)) {
                            break;
                        }
                    }
                }
            }
            else {
                gv_blacklistPanelUserInfoArray[lv__userIndex].lv_targetUserListType = ge_BlacklistTargetUserListType_None;
                gf_CustomDebugMessage(StringExternal("Param/Value/8D02877B"));
            }
        }
        else if (true) {
            gv_blacklistPanelUserInfoArray[lv__userIndex].lv_targetUserListType = ge_BlacklistTargetUserListType_None;
        }
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/52489786"));
    }
}
void gf_UpdateBlacklistRegisteredUserListBox (int lp_user) {
    // Variable Declarations
    string lv__s;
    bank lv__bank;
    // Automatic Variable Declarations
    int auto2403C4B6_i;
    // Variable Initialization
    lv__bank = gf_GetBlacklistBank(lp_user);
    // Implementation
    if ((lv__bank != null)) {
        DialogControlRemoveAllItems(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox), PlayerGroupSingle(lp_user));
        auto2403C4B6_i = 0;
        if(lv__bank != null && BankSectionExists(lv__bank, gf_GetBlacklistBankSection(1))) {
            for( ; auto2403C4B6_i < BankKeyCount(lv__bank, gf_GetBlacklistBankSection(1)); auto2403C4B6_i += BoolToInt(lv__s == BankKeyName(lv__bank, gf_GetBlacklistBankSection(1), auto2403C4B6_i))) {
                lv__s = BankKeyName(lv__bank, gf_GetBlacklistBankSection(1), auto2403C4B6_i);
                DialogControlAddItem(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox), PlayerGroupSingle(lp_user), BankValueGetAsText(lv__bank, gf_GetBlacklistBankSection(1), lv__s));
                if(!BankSectionExists(lv__bank, gf_GetBlacklistBankSection(1))) {
                    break;
                }
            }
        }
    }
}
int gf_GetBlacklistTargetUserInCurrentUserList (int lp_user, int lp_itemIndex) {
    // Variable Declarations
    playergroup lv__startingMembers;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__startingMembers = gf_StartingUsers();
    // Implementation
    if (gf_IsUser(lp_user) && (gf_GetCurrentBlacklistTargetUserListType(lp_user) == ge_BlacklistTargetUserListType_CurrentUsers) && ((lp_itemIndex >= 1) && (lp_itemIndex <= PlayerGroupCount(lv__startingMembers)))) {
        return PlayerGroupPlayer(lv__startingMembers, lp_itemIndex);
    }
    else {
        return c_playerAny;
    }
}
int gf_GetBlacklistBankKeyIndexFromListBox (int lp_user, int lp_listBox, int lp_itemIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_listBox == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListBox)) && (gf_GetCurrentBlacklistTargetUserListType(lp_user) == ge_BlacklistTargetUserListType_LastUsers)) || (lp_listBox == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox))) && ((lp_itemIndex >= 1) && (lp_itemIndex <= DialogControlGetItemCount(lp_listBox, lp_user)))) {
        return (lp_itemIndex - 1);
    }
    else {
        return -1;
    }
}
int gf_GetBlacklistPanelElement (int lp_element) {
    // Automatic Variable Declarations
    int autoE90440D9_val;
    // Implementation
    autoE90440D9_val = lp_element;
    if (autoE90440D9_val == ge_BlacklistPanelElement_AddUserToBlacklistButton) {
        return gv_blacklistPanel.lv_addTargetUserButton;
    }
    else if (autoE90440D9_val == ge_BlacklistPanelElement_RegisteredUserHandleEditBox) {
        return gv_blacklistPanel.lv_registeredUserHandleEditBox;
    }
    else if (autoE90440D9_val == ge_BlacklistPanelElement_RegisteredUserListBox) {
        return gv_blacklistPanel.lv_registeredUserListBox;
    }
    else if (autoE90440D9_val == ge_BlacklistPanelElement_RemoveUserFromBlacklistButton) {
        return gv_blacklistPanel.lv_removeRegisteredUserButton;
    }
    else if (autoE90440D9_val == ge_BlacklistPanelElement_TargetUserHandleEditBox) {
        return gv_blacklistPanel.lv_targetUserHandleEditBox;
    }
    else if (autoE90440D9_val == ge_BlacklistPanelElement_TargetUserListBox) {
        return gv_blacklistPanel.lv_targetUserListBox;
    }
    else if (autoE90440D9_val == ge_BlacklistPanelElement_TargetUserListTypePulldown) {
        return gv_blacklistPanel.lv_targetUserListTypePulldown;
    }
    else {
        return c_invalidDialogControlId;
    }
}
int gf_GetCurrentBlacklistTargetUserListType (int lp_user) {
    // Variable Declarations
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    // Implementation
    if ((lv__userIndex != -1)) {
        return gv_blacklistPanelUserInfoArray[lv__userIndex].lv_targetUserListType;
    }
    else {
        return ge_BlacklistTargetUserListType_None;
    }
}
int gf_GetCheckBoxOwnerofChatSettingsPanel (int lp_checkBox) {
    // Variable Declarations
    int lv__i;
    int lv__userIndex;
    // Automatic Variable Declarations
    playergroup autoEEFCE185_g;
    // Variable Initialization
    // Implementation
    if ((lp_checkBox != c_invalidDialogControlId)) {
        autoEEFCE185_g = gf_StartingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoEEFCE185_g, lv__i);
            if (lv__i < 0) { break; }
            lv__userIndex = gf_GetUserIndex(lv__i);
            if ((lv__userIndex != -1) && (gv_chatSettingPanel.lv_checkBoxArray[lv__userIndex] == lp_checkBox)) {
                return lv__i;
            }
        }
    }
    return c_playerAny;
}
void gf_CustomizedShowHideMouseCursor (int lp_player, bool lp_showhide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showhide == true)) {
        CameraForceMouseRelative(lp_player, false);
        UISetCursorVisible(PlayerGroupSingle(lp_player), false);
        UISetCursorVisible(PlayerGroupSingle(lp_player), false);
        UISetCursorVisible(PlayerGroupSingle(lp_player), false);
    }
    else {
        CameraForceMouseRelative(lp_player, true);
        UISetCursorVisible(PlayerGroupSingle(lp_player), true);
        UISetCursorVisible(PlayerGroupSingle(lp_player), true);
        UISetCursorVisible(PlayerGroupSingle(lp_player), true);
    }
}
void gf_DisplayMessageforChatArea (text lp_text, playergroup lp_playergroup, soundlink lp_soundlink) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playergroup, gv_mESSAGE_AREA_CHAT, lp_text);
    SoundPlayForPlayer(lp_soundlink, c_maxPlayers, lp_playergroup, 100.0, 0.0);
}
void gf_DisplayTransmissionStyleMessage (int lp_user, text lp_text, playergroup lp_playerGroup, int lp_securityLevel) {
    // Variable Declarations
    text lv__result;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if (gf_IsUser(lp_user) && (lp_playerGroup != null)) {
        lv__result = gf_RecordedUserNamewithColor(lp_user);
        if ((lp_securityLevel == ge_AccessLevel_Restricted)) {
            TextExpressionSetToken("Param/Expression/2784BB63", "userName", lv__result);
            lv__result = TextExpressionAssemble("Param/Expression/2784BB63");
        }
        TextExpressionSetToken("Param/Expression/73B30EB8", "A", lv__result);
        TextExpressionSetToken("Param/Expression/73B30EB8", "B", lp_text);
        lv__result = TextExpressionAssemble("Param/Expression/73B30EB8");
        gf_DisplayMessageforChatArea(lv__result, lp_playerGroup, SoundLink("UI_ChatMessageReceived2", -1));
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/1D8955EA"));
    }
}
void gf_DisplayObserverStyleMessage (int lp_player, text lp_text, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsUser(lp_player) && (lp_playerGroup != null)) {
        TextExpressionSetToken("Param/Expression/1B36F385", "player", gf_RecordedUserName(lp_player));
        TextExpressionSetToken("Param/Expression/1B36F385", "message", lp_text);
        gf_DisplayMessageforChatArea(TextExpressionAssemble("Param/Expression/1B36F385"), lp_playerGroup, SoundLink("UI_ChatMessageReceived2", -1));
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/BC047FAA"));
    }
}
void gf_DisplayDataTransferStyleMessage (unit lp_device, text lp_text, playergroup lp_playerGroup, soundlink lp_soundLink) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_IsDevice(lp_device) && (lp_playerGroup != null)) {
        TextExpressionSetToken("Param/Expression/1A0CD412", "deviceName", gf_DeviceName(gf_DeviceType(lp_device)));
        TextExpressionSetToken("Param/Expression/1A0CD412", "message", lp_text);
        gf_DisplayMessageforChatArea(TextExpressionAssemble("Param/Expression/1A0CD412"), lp_playerGroup, lp_soundLink);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/392B8FB5"));
    }
}
void gf_DisplayAlertMessage (text lp_text, playergroup lp_target) {
    // Variable Declarations
    text lv__t;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    SoundPlay(SoundLink("UI_GenericError", -1), lp_target, 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/9A72DAC1", "text", lp_text);
    lv__t = TextExpressionAssemble("Param/Expression/9A72DAC1");
    UIDisplayMessage(lp_target, c_messageAreaError, lv__t);
}
void gf_DisplayInformationMessage (text lp_text, playergroup lp_playerGroup) {
    // Variable Declarations
    text lv__t;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    SoundPlayForPlayer(SoundLink("UI_BnetToast", -1), c_maxPlayers, lp_playerGroup, 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/CF0A80ED", "text", lp_text);
    lv__t = TextExpressionAssemble("Param/Expression/CF0A80ED");
    UIDisplayMessage(lp_playerGroup, c_messageAreaError, lv__t);
}
trigger auto_gf_DisplayTutorialMessage_Trigger = null;
text auto_gf_DisplayTutorialMessage_lp_text;
playergroup auto_gf_DisplayTutorialMessage_lp_pg;
void gf_DisplayTutorialMessage (text lp_text, playergroup lp_pg) {
    auto_gf_DisplayTutorialMessage_lp_text = lp_text;
    auto_gf_DisplayTutorialMessage_lp_pg = lp_pg;
    if (auto_gf_DisplayTutorialMessage_Trigger == null) {
        auto_gf_DisplayTutorialMessage_Trigger = TriggerCreate("auto_gf_DisplayTutorialMessage_TriggerFunc");
    }
    TriggerExecute(auto_gf_DisplayTutorialMessage_Trigger, false, false);
}
bool auto_gf_DisplayTutorialMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_DisplayTutorialMessage_lp_text;
    playergroup lp_pg = auto_gf_DisplayTutorialMessage_lp_pg;
    // Variable Declarations
    playergroup lv__pg;
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoC4DA508C_g;
    playergroup auto2C231B41_g;
    playergroup auto9334FC51_g;
    // Variable Initialization
    lv__pg = PlayerGroupEmpty();
    // Implementation
    if ((lp_pg == null)) {
        return true;
    }
    lv__pg = PlayerGroupCopy(lp_pg);
    autoC4DA508C_g = lv__pg;
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoC4DA508C_g, lv__i);
        if (lv__i < 0) { break; }
        if (gf_IsUser(lv__i)) {
            if ((gv_tutorialMessageInfo.lv_tutorialLabel[gf_GetUserIndex(lv__i)] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_tutorialMessageInfo.lv_tutorialLabel[gf_GetUserIndex(lv__i)], PlayerGroupSingle(lv__i), false);
            }
            continue;
        }
        else {
            PlayerGroupRemove(lv__pg, lv__i);
        }
    }
    SoundPlayForPlayer(SoundLink("UI_Horner05sTerminalButton", -1), c_maxPlayers, lv__pg, 200.0, 0.0);
    libNtve_gf_CreateDialogItemLabel(gv_tutorialMessageInfo.lv_dialog, 1000, 250, c_anchorCenter, 0, 100, lp_text, ColorWithAlpha(0,0,0,0), true, 0.5);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_TutorialMessage", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), lv__pg, true);
    auto2C231B41_g = lv__pg;
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto2C231B41_g, lv__i);
        if (lv__i < 0) { break; }
        gv_tutorialMessageInfo.lv_tutorialLabel[gf_GetUserIndex(lv__i)] = DialogControlLastCreated();
    }
    Wait(10.0, c_timeGame);
    auto9334FC51_g = lv__pg;
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto9334FC51_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gv_tutorialMessageInfo.lv_tutorialLabel[gf_GetUserIndex(lv__i)] == DialogControlLastCreated())) {
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 100.0);
        }
        else {
            return true;
        }
    }
    Wait(4.0, c_timeGame);
    DialogControlDestroy(DialogControlLastCreated());
    return true;
}
void gf_DisplayDirectiveMessageforPlayer (text lp_text, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDirective, lp_text);
}
void gf_DisplayDirectiveMessageforPlayerGroup (text lp_text, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playerGroup, c_messageAreaDirective, lp_text);
}
void gf_DisplayDirectiveMessageforPlayerwithObs (text lp_text, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(gf_GetUserwithObservers(lp_player), c_messageAreaDirective, lp_text);
}
void gf_ClearDirectiveMessageforPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UIClearMessages(PlayerGroupSingle(lp_player), c_messageAreaDirective);
}
void gf_ClearDirectiveMessageforPlayerwithObs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UIClearMessages(gf_GetUserwithObservers(lp_player), c_messageAreaDirective);
}
void gf_ClearDirectiveMessageforPlayerGroup (playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    UIClearMessages(lp_playerGroup, c_messageAreaDirective);
}
int gf_MakeDirtyInteger (int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    return gv_dirtyFactor ^ lp_integer;
}
int gf_CleanDirtyInteger (int lp_dirtyInteger) {
    // Automatic Variable Declarations
    // Implementation
    return gv_dirtyFactor ^ lp_dirtyInteger;
}
unit gf_LeastPathCostUnit (unit lp_sourceUnit, unitgroup lp_targetUnitGroup, bool lp_includeBuildings) {
    // Variable Declarations
    int lv__minCost;
    int lv__curCost;
    unit lv__u;
    unit lv__result;
    // Automatic Variable Declarations
    unitgroup autoA410F8DC_g;
    int autoA410F8DC_u;
    // Variable Initialization
    lv__minCost = 500;
    // Implementation
    if ((lp_sourceUnit != null) && (lp_targetUnitGroup != null)) {
        autoA410F8DC_g = lp_targetUnitGroup;
        autoA410F8DC_u = UnitGroupCount(autoA410F8DC_g, c_unitCountAll);
        for (;; autoA410F8DC_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoA410F8DC_g, autoA410F8DC_u);
            if (lv__u == null) { break; }
            if ((lp_includeBuildings == true)) {
                lv__curCost = AIPathingCostUnit(lp_sourceUnit, UnitGetPosition(lv__u), c_includeAllBuildings);
            }
            else {
                lv__curCost = AIPathingCostMap(UnitGetPosition(lp_sourceUnit), UnitGetPosition(lv__u));
            }
            if ((lv__curCost > 0) && (lv__curCost < lv__minCost)) {
                lv__minCost = lv__curCost;
                lv__result = lv__u;
            }
        }
        return lv__result;
    }
    else {
        return null;
    }
}
string gf_UnitInfoInstancebyUnitType (string lp_unitType) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    return lp_unitType;
}
unit gf_TraceLineHitUnit (int lp_player) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_player);
    // Implementation
    if ((lv__index != -1)) {
        return gv_traceLineHitResult[lv__index].lv_unit;
    }
    else {
        return null;
    }
}
point gf_TraceLineHitPoint (int lp_player) {
    // Variable Declarations
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = gf_GetUserIndex(lp_player);
    // Implementation
    if ((lv__index != -1)) {
        return gv_traceLineHitResult[lv__index].lv_point;
    }
    else {
        return null;
    }
}
void gf_CastTraceline (int lp_user, point lp_sourcePoint, fixed lp_pitch, fixed lp_yaw, fixed lp_zOffset, unitfilter lp_unitFilter, fixed lp_range) {
    // Variable Declarations
    const fixed lv__defaultHeight = 8.0;
    int lv__userIndex;
    point lv__p;
    fixed lv__sourceHeight;
    fixed lv__tan;
    fixed lv__currentHeight;
    fixed lv__maxDistance;
    const fixed lv__delta = 0.1;
    fixed lv__i;
    unitgroup lv__ug;
    unit lv__u;
    // Automatic Variable Declarations
    fixed auto9E798AE0_ae;
    const fixed auto9E798AE0_ai = lv__delta;
    unitgroup auto2608BC6D_g;
    int auto2608BC6D_u;
    // Variable Initialization
    lv__userIndex = gf_GetUserIndex(lp_user);
    lv__p = lp_sourcePoint;
    lv__sourceHeight = (lp_zOffset + lv__defaultHeight);
    lv__tan = (Tan(lp_pitch) * -1.0);
    lv__currentHeight = (lv__sourceHeight + (lv__i*lv__tan));
    lv__maxDistance = (lp_range * Cos(lp_pitch));
    lv__i = lv__delta;
    lv__ug = UnitGroupEmpty();
    // Implementation
    if ((lv__maxDistance < lv__delta)) {
        gv_traceLineHitResult[lv__userIndex].lv_unit = null;
        gv_traceLineHitResult[lv__userIndex].lv_point = null;
        return ;
    }
    auto9E798AE0_ae = lv__maxDistance;
    lv__i = lv__delta;
    for ( ; ( (auto9E798AE0_ai >= 0 && lv__i <= auto9E798AE0_ae) || (auto9E798AE0_ai < 0 && lv__i >= auto9E798AE0_ae) ) ; lv__i += auto9E798AE0_ai ) {
        lv__p = PointWithOffsetPolar(lp_sourcePoint, lv__i, lp_yaw);
        lv__currentHeight = (lv__sourceHeight + (lv__i*lv__tan));
        lv__ug = UnitGroupSearch(null, lp_user, lv__p, 0.1, lp_unitFilter, 0);
        if ((UnitGroupCount(lv__ug, c_unitCountAlive) > 0)) {
            auto2608BC6D_g = lv__ug;
            auto2608BC6D_u = UnitGroupCount(auto2608BC6D_g, c_unitCountAll);
            for (;; auto2608BC6D_u -= 1) {
                lv__u = UnitGroupUnitFromEnd(auto2608BC6D_g, auto2608BC6D_u);
                if (lv__u == null) { break; }
                if (((lv__currentHeight < (lv__defaultHeight + UserDataGetFixed("UnitInfo", gf_UnitInfoInstancebyUnitType(UnitGetType(lv__u)), "minheight", 1))) || (lv__currentHeight > (lv__defaultHeight + UserDataGetFixed("UnitInfo", gf_UnitInfoInstancebyUnitType(UnitGetType(lv__u)), "height", 1))))) {
                    UnitGroupRemove(lv__ug, lv__u);
                }
            }
            if ((UnitGroupCount(lv__ug, c_unitCountAlive) > 0)) {
                gv_traceLineHitResult[lv__userIndex].lv_unit = UnitGroupClosestToPoint(lv__ug, lp_sourcePoint);
                gv_traceLineHitResult[lv__userIndex].lv_point = lv__p;
                return ;
            }
        }
        if (((CliffLevel(lv__p) > 1) || (lv__defaultHeight > lv__currentHeight))) {
            gv_traceLineHitResult[lv__userIndex].lv_unit = null;
            gv_traceLineHitResult[lv__userIndex].lv_point = lv__p;
            return ;
        }
    }
    gv_traceLineHitResult[lv__userIndex].lv_unit = null;
    gv_traceLineHitResult[lv__userIndex].lv_point = lv__p;
}
bool gf_IsAuthorizedUser (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((GameIsTestMap(false) == true) || (PlayerHandle(lp_player) == gf_HandleofCreator()))) {
        return true;
    }
    else {
        return false;
    }
}
string gf_GenerateDummyHandle (int lp_user) {
    // Automatic Variable Declarations
    // Implementation
    return gf_GetHandlebyCombiningId(3, 1, (lp_user * 10000));
}
string gf_HandleofCreator () {
    // Automatic Variable Declarations
    // Implementation
    return gf_GetHandlebyCombiningId(3, 1, 7619084);
}
void gf_DisplayUserList (playergroup lp_users) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoEBFA27E5_g;
    // Variable Initialization
    // Implementation
    autoEBFA27E5_g = lp_users;
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoEBFA27E5_g, lv__i);
        if (lv__i < 0) { break; }
        if (gf_IsUser(lv__i)) {
            TextExpressionSetToken("Param/Expression/704C5D06", "A", gf_RecordedUserNamewithColor(lv__i));
            gf_CustomDebugMessage(TextExpressionAssemble("Param/Expression/704C5D06"));
        }
    }
}
void gf_CustomDebugMessage (text lp_tEXT) {
    // Variable Declarations
    text lv__text;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__text = lp_tEXT;
    // Implementation
    if ((GameIsTestMap(false) == true)) {
        lv__text = (StringToText(TriggerGetFunction(TriggerGetCurrent())) + StringExternal("Param/Value/0FE6A35E") + lv__text);
        TriggerDebugOutput(1, lv__text, gv_doDisplayDebugMessage);
    }
}
void gf_Assert (int lp_exceptionType, string lp_from) {
    // Variable Declarations
    string lv__exceptionMessage;
    // Automatic Variable Declarations
    int auto11BD85AD_val;
    // Variable Initialization
    lv__exceptionMessage = "";
    // Implementation
    auto11BD85AD_val = lp_exceptionType;
    if (auto11BD85AD_val == ge_AssertType_ParameterException) {
        lv__exceptionMessage = "Parameter Exception";
    }
    else if (auto11BD85AD_val == ge_AssertType_NotImplemented) {
        lv__exceptionMessage = "Not Implemented Exception";
    }
    else if (auto11BD85AD_val == ge_AssertType_InvalidGameState) {
        lv__exceptionMessage = "Not Valide Game State Exception";
    }
    else if (auto11BD85AD_val == ge_AssertType_AlreadyInitialized) {
        lv__exceptionMessage = "Already Initialized Exception";
    }
    else if (auto11BD85AD_val == ge_AssertType_OutOfRange) {
        lv__exceptionMessage = "Out of Range Exception";
    }
    else if (auto11BD85AD_val == ge_AssertType_CharacterStateException) {
        lv__exceptionMessage = "Character State Exception";
    }
    else if (auto11BD85AD_val == ge_AssertType_TestException) {
        lv__exceptionMessage = "Test Exception";
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/9A898B6A"));
        TriggerStop(TriggerGetCurrent());
        return ;
    }
    lv__exceptionMessage = ("'" + lv__exceptionMessage + "' has occured.");
    if ((lp_from != null)) {
        lv__exceptionMessage = (lv__exceptionMessage + " (" + lp_from + ")");
    }
    gf_CustomDebugMessage(StringToText(lv__exceptionMessage));
    TriggerStop(TriggerGetCurrent());
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Game
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameState = ge_GameState_Initializing;
    TimerWindowCreate(gv_gameTimer, StringExternal("Param/Value/678D8843"), true, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    gv_gameTimerWindow = TimerWindowLastCreated();
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryTV, true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_InitializationforUser, true, false);
    TriggerExecute(gt_InitializationforCharacter, true, false);
    TriggerExecute(gt_InitializationforLab, true, false);
    TriggerExecute(gt_InitializationforHUD, true, false);
    TriggerExecute(gt_InitializationforUI, true, false);
    TriggerExecute(gt_InitializationTracline, true, false);
    Wait(2.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforGame_Init () {
    gt_InitializationforGame = TriggerCreate("gt_InitializationforGame_Func");
    TriggerAddEventMapInit(gt_InitializationforGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Delayed Initialization for Changeling Selection
//--------------------------------------------------------------------------------------------------
bool gt_DelayedInitializationforChangelingSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoC34DF9F6_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_Initializing))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameState = ge_GameState_SelectingRandomChangelingPlayer;
    autoC34DF9F6_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoC34DF9F6_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCameraModetoFocusingUnit(lv__i, gf_CharacterUnit(lv__i), CameraInfoFromId(1450913119), 0.0);
        gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_ChangelingSelectionPanel);
    }
    TriggerExecute(gt_RandomChangelingPlayerSelection, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DelayedInitializationforChangelingSelection_Init () {
    gt_DelayedInitializationforChangelingSelection = TriggerCreate("gt_DelayedInitializationforChangelingSelection_Func");
    TriggerAddEventTimeElapsed(gt_DelayedInitializationforChangelingSelection, 0.25, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Random Changeling Player Selection
//--------------------------------------------------------------------------------------------------
bool gt_RandomChangelingPlayerSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__changelingPlayer;
    point lv__p;
    fixed lv__angle;
    // Automatic Variable Declarations
    const int autoF064A891_ae = 0;
    const int autoF064A891_ai = -1;
    playergroup autoEB546DA0_g;
    playergroup auto0BC90C89_g;
    playergroup auto015316AE_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv__i = gv_tIME_FOR_APPLICATION;
    for ( ; ( (autoF064A891_ai >= 0 && lv__i <= autoF064A891_ae) || (autoF064A891_ai < 0 && lv__i >= autoF064A891_ae) ) ; lv__i += autoF064A891_ai ) {
        libNtve_gf_SetDialogItemText(gf_GetChangelingSelectionPanelElement(ge_ChangelingSelectionPanelElement_GameStartCounter, c_playerAny), IntToText(lv__i), PlayerGroupAll());
        Wait(1.0, c_timeReal);
    }
    TriggerEnable(gt_ApplyForChangeling, false);
    autoEB546DA0_g = gv_changelingSelectionInfo.lv_applicants;
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoEB546DA0_g, lv__i);
        if (lv__i < 0) { break; }
        if ((PlayerStatus(lv__i) == c_playerStatusLeft)) {
            PlayerGroupRemove(gv_changelingSelectionInfo.lv_applicants, lv__i);
        }
    }
    if ((PlayerGroupCount(gv_changelingSelectionInfo.lv_applicants) < 1)) {
        lv__changelingPlayer = PlayerGroupPlayer(gf_AllPlayingUsers(), RandomInt(1, PlayerGroupCount(gf_AllPlayingUsers())));
    }
    else {
        lv__changelingPlayer = PlayerGroupPlayer(gv_changelingSelectionInfo.lv_applicants, RandomInt(1, PlayerGroupCount(gv_changelingSelectionInfo.lv_applicants)));
    }
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
    SoundChannelMute(PlayerGroupSingle(lv__changelingPlayer), c_soundCategoryDeath, false);
    SoundChannelMute(PlayerGroupSingle(lv__changelingPlayer), c_soundCategoryCombat, false);
    lv__p = UnitGetPosition(gf_CharacterUnit(lv__changelingPlayer));
    lv__angle = UnitGetFacing(gf_CharacterUnit(lv__changelingPlayer));
    UnitKill(gf_CharacterUnit(lv__changelingPlayer));
    UnitCreate(1, gv_cHANGELING_UNITTYPE_NORMAL_FORM, c_unitCreateIgnorePlacement, lv__changelingPlayer, lv__p, (lv__angle + 180.0));
    UnitGroupAdd(gv_unitgroups[lv__changelingPlayer], UnitLastCreated());
    gf_SetUserasChangeling(lv__changelingPlayer, UnitLastCreated());
    gv_changeling_unit = UnitLastCreated();
    gv_changeling_player = lv__changelingPlayer;
    auto0BC90C89_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto0BC90C89_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_None);
    }
    Wait(1.5, c_timeGame);
    gf_SetChangelingDisguiseState(ge_DisguiseState_Disguising);
    Wait(2.0, c_timeGame);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, false);
    auto015316AE_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto015316AE_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCameraModetoTPS(lv__i, gf_CharacterUnit(lv__i), 2.0, 0.0, false);
    }
    Wait(2.0, c_timeGame);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionEntireMap());
    TriggerExecute(gt_SetGameStatetoMainGame, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RandomChangelingPlayerSelection_Init () {
    gt_RandomChangelingPlayerSelection = TriggerCreate("gt_RandomChangelingPlayerSelection_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Apply For Changeling
//--------------------------------------------------------------------------------------------------
bool gt_ApplyForChangeling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_SelectingRandomChangelingPlayer))) {
            return false;
        }
        if (!((EventDialogControl() == gf_GetChangelingSelectionPanelElement(ge_ChangelingSelectionPanelElement_WantToPlayChangelingButton, c_playerAny)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupAdd(gv_changelingSelectionInfo.lv_applicants, EventPlayer());
    DialogControlSetEnabled(EventDialogControl(), PlayerGroupSingle(lv__player), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ApplyForChangeling_Init () {
    gt_ApplyForChangeling = TriggerCreate("gt_ApplyForChangeling_Func");
    TriggerAddEventDialogControl(gt_ApplyForChangeling, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Vote User To Kick
//--------------------------------------------------------------------------------------------------
bool gt_VoteUserToKick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    int lv__targetUser;
    int lv__tempInt;
    // Automatic Variable Declarations
    playergroup autoE82C319C_g;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    lv__targetUser = gf_GetTargetUserofKickVoteButton(EventDialogControl());
    // Conditions
    if (testConds) {
        if (!((lv__userIndex != -1))) {
            return false;
        }
        if (!((lv__targetUser != c_playerAny))) {
            return false;
        }
        if (!((lv__targetUser != lv__user))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_SelectingRandomChangelingPlayer))) {
            return false;
        }
        if (!((PlayerGroupCount(gv_changelingSelectionInfo.lv_kickVoteTable[lv__userIndex]) < gv_aLLOWED_TIMES_FOR_KICK_VOTE))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupAdd(gv_changelingSelectionInfo.lv_kickVoteTable[lv__userIndex], lv__targetUser);
    lv__tempInt = gf_KickVoteCount(lv__targetUser);
    libNtve_gf_SetDialogItemText(gf_GetChangelingSelectionPanelElement(ge_ChangelingSelectionPanelElement_KickVoteCountLabel, lv__targetUser), IntToText(lv__tempInt), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/D56AF928", "A", gf_RecordedUserNamewithColor(lv__user));
    TextExpressionSetToken("Param/Expression/D56AF928", "B", gf_RecordedUserNamewithColor(lv__targetUser));
    gf_DisplayInformationMessage(TextExpressionAssemble("Param/Expression/D56AF928"), gf_StartingUsers());
    if ((lv__tempInt >= gv_rEQUIRED_NUMBER_OF_USERS_FOR_KICK)) {
        gf_KickUser(lv__targetUser, null);
    }
    if ((PlayerGroupCount(gv_changelingSelectionInfo.lv_kickVoteTable[lv__userIndex]) < gv_aLLOWED_TIMES_FOR_KICK_VOTE)) {
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupSingle(lv__user), false);
    }
    else {
        autoE82C319C_g = gf_StartingUsers();
        lv__tempInt = -1;
        while (true) {
            lv__tempInt = PlayerGroupNextPlayer(autoE82C319C_g, lv__tempInt);
            if (lv__tempInt < 0) { break; }
            DialogControlSetEnabled(gf_GetChangelingSelectionPanelElement(ge_ChangelingSelectionPanelElement_KickVoteButton, lv__tempInt), PlayerGroupSingle(lv__user), false);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VoteUserToKick_Init () {
    gt_VoteUserToKick = TriggerCreate("gt_VoteUserToKick_Func");
    TriggerAddEventDialogControl(gt_VoteUserToKick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Game State to Main Game
//--------------------------------------------------------------------------------------------------
bool gt_SetGameStatetoMainGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__main_game_time;
    // Automatic Variable Declarations
    playergroup auto0B85637F_g;
    // Variable Initialization
    lv__main_game_time = gv_mAIN_GAME_TIME;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_SelectingRandomChangelingPlayer))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    
    lv__main_game_time = lv__main_game_time - 90 * (8  - PlayerGroupCount(gf_AllPlayingUsers()));
    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_gameTimer, lv__main_game_time, false, c_timeGame);
    TimerWindowSetTitle(gv_gameTimerWindow, StringExternal("Param/Value/607EF9DE"));
    TimerWindowSetAnchor(gv_gameTimerWindow, c_anchorTop, 0, 10);
    TimerWindowShow(gv_gameTimerWindow, PlayerGroupAll(), true);
    if (gf_IsUserAlive(gf_GetChangelingPlayer())) {
        TriggerExecute(gt_MainGameSettingsforUser, true, false);
        TriggerExecute(gt_MainGameSettingforCharacter, true, false);
        TriggerExecute(gt_MainGameSettingforLab, true, false);
        TriggerExecute(gt_MainGameSettingsforHUD, true, false);
        gv_gameState = ge_GameState_MainGame;
        gv_mainGameState = ge_MainGameState_Normal;
    }
    else {
        gf_GameEndChangelingHasBeenKilled(c_playerAny);
    }
    SoundPlayForPlayer(SoundLink("UI_ObjectiveDiscoveredStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(8.0, c_timeGame);
    auto0B85637F_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto0B85637F_g, lv__i);
        if (lv__i < 0) { break; }
        if (true) {
            gf_DisplayTutorialMessage(StringExternal("Param/Value/37CB6C69"), gf_GetUserwithObservers(lv__i));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetGameStatetoMainGame_Init () {
    gt_SetGameStatetoMainGame = TriggerCreate("gt_SetGameStatetoMainGame_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Explosion Count
//--------------------------------------------------------------------------------------------------
bool gt_StartExplosionCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_MainGameSubState() == ge_MainGameState_Normal))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_mainGameState = ge_MainGameState_ExplosionCountReady;
    gf_SendMainGameStateChangedEvent();
    gf_SetEmergencyState(ge_EmergencyState_Normal);
    gf_SetPowerState(ge_PowerStateType_PowerOn);
    SoundPlay(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_DisplayInformationMessage(StringExternal("Param/Value/1CD0DB14"), PlayerGroupAll());
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(366), Order(AbilityCommand("UmojanLabDoorsRightLowered", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(367), Order(AbilityCommand("UmojanLabDoorsRightLowered", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(368), Order(AbilityCommand("UmojanLabDoorsRightLowered", 0)), c_orderQueueReplace);
    UnitSetState(gv_uNIT_ESCAPE_TRAIN, c_unitStateHidden, false);
    UnitIssueOrder(gv_uNIT_ESCAPE_TRAIN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(364)), c_orderQueueReplace);
    while (!((UnitOrderCount(UnitFromId(370)) == 0))) {
        Wait(0.5, c_timeGame);
    }
    UnitSetFacing(gv_uNIT_ESCAPE_TRAIN, PointGetFacing(PointFromId(364)), 2.0);
    UnitSetState(UnitFromId(369), c_unitStateHidden, false);
    UnitBehaviorAddPlayer(UnitFromId(369), "BeaconDumb", 0, 1);
    Wait(2.0, c_timeGame);
    TriggerEnable(gt_Entertheescapetrain, true);
    UnitRemove(UnitFromId(371));
    Wait(1.0, c_timeGame);
    gv_mainGameState = ge_MainGameState_ExplosionCountOn;
    gf_SetEmergencyState(ge_EmergencyState_Emergency);
    TimerStart(gv_gameTimer, gv_mAIN_GAME_TIME_EXPLOSION_COUNT, false, c_timeGame);
    TimerWindowSetTitle(gv_gameTimerWindow, StringExternal("Param/Value/E27A212B"));
    TextExpressionSetToken("Param/Expression/C7A5622B", "A", IntToText(gv_mAIN_GAME_TIME_EXPLOSION_COUNT));
    gf_DisplayAlertMessage(TextExpressionAssemble("Param/Expression/C7A5622B"), PlayerGroupAll());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartExplosionCount_Init () {
    gt_StartExplosionCount = TriggerCreate("gt_StartExplosionCount_Func");
    TriggerAddEventTimer(gt_StartExplosionCount, gv_gameTimer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: End Explosion Count
//--------------------------------------------------------------------------------------------------
bool gt_EndExplosionCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__tempInt;
    unit lv__u;
    unitgroup lv__unitgroup;
    // Automatic Variable Declarations
    playergroup auto45F1F386_g;
    unitgroup auto22C09B61_g;
    int auto22C09B61_u;
    unitgroup autoF1B1AE29_g;
    int autoF1B1AE29_u;
    const int auto47850869_ae = gv_uSER_LAST;
    const int auto47850869_ai = 1;
    const int auto1BD4783C_ae = gv_uSER_LAST;
    const int auto1BD4783C_ai = 1;
    const int autoB018239A_ae = gv_uSER_LAST;
    const int autoB018239A_ai = 1;
    playergroup auto63864A14_g;
    playergroup autoCD5113F4_g;
    // Variable Initialization
    lv__unitgroup = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_MainGameSubState() == ge_MainGameState_ExplosionCountOn))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((PlayerGroupCount(gf_GetUsersInEscapeTrain()) < 1)) {
        gf_GameEndDrawbyExplosion();
        return true;
    }
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    TriggerEnable(gt_Entertheescapetrain, false);
    gv_gameState = ge_GameState_LabExplosionScene;
    TimerWindowShow(gv_gameTimerWindow, PlayerGroupAll(), false);
    gf_SetGlobalEnvironmentState(ge_EnvironmentState_Explosion);
    auto45F1F386_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto45F1F386_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCameraModetoTrackingEscapeTrain(lv__i);
    }
    TriggerExecute(gt_CreateExplosionEffect, true, false);
    CutsceneFade(true, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    TimerWindowShow(gv_gameTimerWindow, PlayerGroupAll(), false);
    auto22C09B61_g = gf_GetCharactersInLab();
    auto22C09B61_u = UnitGroupCount(auto22C09B61_g, c_unitCountAll);
    for (;; auto22C09B61_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto22C09B61_g, auto22C09B61_u);
        if (lv__u == null) { break; }
        gf_SetUserModetoObserver(UnitGetOwner(lv__u), PlayerGroupPlayer(gf_GetUsersInEscapeTrain(), RandomInt(1, PlayerGroupCount(gf_GetUsersInEscapeTrain()))));
        UnitKill(lv__u);
    }
    autoF1B1AE29_g = gf_GetAllAberrations();
    autoF1B1AE29_u = UnitGroupCount(autoF1B1AE29_g, c_unitCountAll);
    for (;; autoF1B1AE29_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoF1B1AE29_g, autoF1B1AE29_u);
        if (lv__u == null) { break; }
        UnitKill(lv__u);
    }
    UnitIssueOrder(gv_uNIT_ESCAPE_TRAIN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(410)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    lv__i = gv_uSER_FIRST;
    for ( ; ( (auto47850869_ai >= 0 && lv__i <= auto47850869_ae) || (auto47850869_ai < 0 && lv__i >= auto47850869_ae) ) ; lv__i += auto47850869_ai ) {
        CameraShakeStart(lv__i, c_cameraPositionEye, c_cameraDirectionZ, 0.3, 3.0, 100.0, 1.0);
    }
    Wait(2.0, c_timeGame);
    lv__i = gv_uSER_FIRST;
    for ( ; ( (auto1BD4783C_ai >= 0 && lv__i <= auto1BD4783C_ae) || (auto1BD4783C_ai < 0 && lv__i >= auto1BD4783C_ae) ) ; lv__i += auto1BD4783C_ai ) {
        CameraShakeStart(lv__i, c_cameraPositionEye, c_cameraDirectionZ, 0.5, 3.0, 100.0, 1.0);
    }
    Wait(4.0, c_timeGame);
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", UnitGetPosition(UnitFromId(370)));
    SoundPlay(SoundLink("Terran_ExplosionMedium", -1), PlayerGroupAll(), 150.0, 0.0);
    lv__i = gv_uSER_FIRST;
    for ( ; ( (autoB018239A_ai >= 0 && lv__i <= autoB018239A_ae) || (autoB018239A_ai < 0 && lv__i >= autoB018239A_ae) ) ; lv__i += autoB018239A_ai ) {
        CameraShakeStart(lv__i, c_cameraPositionEye, c_cameraDirectionZ, 0.7, 4.0, 100.0, 2.0);
    }
    Wait(2.0, c_timeGame);
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(1.0, c_timeGame);
    TriggerStop(gt_CreateExplosionEffect);
    if ((PlayerGroupCount(gf_GetUsersInEscapeTrain()) == 1) && (gf_GetChangelingPlayer() == PlayerGroupPlayer(gf_GetUsersInEscapeTrain(), 1))) {
        gf_GameEndChangelingKilledAllMarines();
    }
    else {
        auto63864A14_g = gf_AliveUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto63864A14_g, lv__i);
            if (lv__i < 0) { break; }
            autoCD5113F4_g = gf_GetUserwithObservers(lv__i);
            lv__tempInt = -1;
            while (true) {
                lv__tempInt = PlayerGroupNextPlayer(autoCD5113F4_g, lv__tempInt);
                if (lv__tempInt < 0) { break; }
                gf_SetCameraModetoTPS(lv__tempInt, gf_CharacterUnit(lv__i), 0.0, 0.0, false);
            }
        }
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_SetGameStatetoInEscapeTrain, true, false);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(412)), c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
        CutsceneFade(true, 2.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndExplosionCount_Init () {
    gt_EndExplosionCount = TriggerCreate("gt_EndExplosionCount_Func");
    TriggerAddEventTimer(gt_EndExplosionCount, gv_gameTimer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enter the escape train
//--------------------------------------------------------------------------------------------------
bool gt_Entertheescapetrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    unit lv__unit;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto196597D8_g;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__unit = EventUnit();
    // Conditions
    if (testConds) {
        if (!(gf_IsUserAlive(lv__user))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_MainGameSubState() == ge_MainGameState_ExplosionCountOn))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto196597D8_g = gf_GetUserwithObservers(lv__user);
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto196597D8_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCameraModetoTPS(lv__i, gv_uNIT_ESCAPE_TRAIN, 0.0, 0.0, false);
        gf_AllowDisallowControlMinimap(lv__i, false);
        gf_ShowHideCustomMinimap(lv__i, false);
    }
    SoundPlayOnUnitForPlayer(SoundLink("Medivac_Load", -1), c_maxPlayers, PlayerGroupAll(), gf_CharacterUnit(lv__user), 0.0, 100.0, 0.0);
    gf_SetCharacterStatetoWaitingInEscapeTrain(lv__user);
    if (gf_IsChangelingUser(lv__user)) {
        if ((gf_GetChangelingDisguiseState() != ge_DisguiseState_Disguising)) {
            gf_SetChangelingDisguiseState(ge_DisguiseState_Disguising);
        }
        gf_SetChangelingState(ge_ChangelingState_Paused);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Entertheescapetrain_Init () {
    gt_Entertheescapetrain = TriggerCreate("gt_Entertheescapetrain_Func");
    TriggerEnable(gt_Entertheescapetrain, false);
    TriggerAddEventUnitRegion(gt_Entertheescapetrain, null, RegionFromId(17), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Explosion Effect
//--------------------------------------------------------------------------------------------------
bool gt_CreateExplosionEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(0.0625, c_timeGame);
    while ((gf_GameState() == ge_GameState_LabExplosionScene)) {
        libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(16)));
        SoundPlay(SoundLink("Terran_ExplosionMedium", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.1, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateExplosionEffect_Init () {
    gt_CreateExplosionEffect = TriggerCreate("gt_CreateExplosionEffect_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Game State to In Escape Train
//--------------------------------------------------------------------------------------------------
bool gt_SetGameStatetoInEscapeTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__userIndex;
    text lv__text;
    int lv__mostVotedUser;
    // Automatic Variable Declarations
    playergroup auto0322A0EE_g;
    playergroup auto5868E0A3_g;
    playergroup autoAEB8951C_g;
    playergroup auto297703DE_g;
    const int auto6516211E_n = 5;
    int auto6516211E_i;
    // Variable Initialization
    lv__mostVotedUser = c_playerAny;
    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(gf_GetUsersInEscapeTrain()) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SetGlobalEnvironmentState(ge_EnvironmentState_Normal);
    gf_CreatePlainDialog();
    gv_trainLabelDialog = DialogLastCreated();
    DialogControlCreate(gv_trainLabelDialog, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1000, 80);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_EscapeLabelText", PlayerGroupAll());
    gv_trainLabelItem = DialogControlLastCreated();
    auto0322A0EE_g = gf_GetUsersInEscapeTrain();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto0322A0EE_g, lv__i);
        if (lv__i < 0) { break; }
        gf_AllowDisallowUsertoFire(lv__i, false);
        gf_SetCharacterStatetoNormalState(lv__i);
    }
    gf_AllowDisallowUseChangelingAbility(false);
    gv_gameState = ge_GameState_InEscapeTrain;
    gv_inEscapeTrainState = ge_InEcapeTrainState_FindingChangeling;
    Wait(2.0, c_timeGame);
    auto5868E0A3_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto5868E0A3_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_CharacterHUD);
    }
    Wait(5.0, c_timeGame);
    if ((PlayerGroupHasPlayer(gf_GetUsersInEscapeTrain(), gf_GetChangelingPlayer()) == false)) {
        gv_inEscapeTrainState = ge_InEcapeTrainState_ChangelingDead;
        gf_DisplayInformationMessage(StringExternal("Param/Value/234F8D0C"), PlayerGroupAll());
        Wait(5.0, c_timeGame);
        gf_GameEndNoChangelingIsinEscapeTrain();
        return true;
    }
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(412)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    gf_SetGlobalEnvironmentState(ge_EnvironmentState_Emergency);
    gf_DisplayAlertMessage(StringExternal("Param/Value/54A14FD2"), PlayerGroupAll());
    Wait(4.0, c_timeGame);
    if ((PlayerGroupCount(gf_GetUsersInEscapeTrain()) > 2)) {
        UIDisplayMessage(gf_GetUsersInEscapeTrain(), c_messageAreaDirective, StringExternal("Param/Value/0C9754A1"));
        DialogSetVisible(DialogLastCreated(), gf_GetUsersInEscapeTrain(), true);
        TimerStart(gv_gameTimer, gv_eSCAPE_TRAIN_TIME_FOR_VOTE, false, c_timeGame);
        TimerWindowShow(gv_gameTimerWindow, gf_GetUsersInEscapeTrain(), true);
        TimerWindowSetTitle(gv_gameTimerWindow, StringExternal("Param/Value/C0DEC5CC"));
        TimerWindowSetFormat(gv_gameTimerWindow, StringToText("<min2/>:<sec2/>"));
        TimerWindowSetAnchor(gv_gameTimerWindow, c_anchorTopRight, 50, 50);
        gf_InitializeVoteDialog(gf_GetUsersInEscapeTrain());
        autoAEB8951C_g = gf_GetUsersInEscapeTrain();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoAEB8951C_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCharacterStatetoVoting(lv__i);
        }
        TriggerEnable(gt_VoteforSuspiciousMarine, true);
        while (!((TimerGetRemaining(gv_gameTimer) == 0.0))) {
            Wait(0.0625, c_timeGame);
        }
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        auto297703DE_g = gf_GetUsersInEscapeTrain();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto297703DE_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCharacterStatetoNormalState(lv__i);
        }
        TimerWindowShow(gv_gameTimerWindow, PlayerGroupAll(), false);
        lv__mostVotedUser = gf_GetMostVotedUser();
        if ((lv__mostVotedUser != c_playerAny)) {
            DialogSetVisible(gv_trainLabelDialog, PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/2B9FF129", "A", gf_RecordedUserNamewithColor(gf_GetDisguiseTargetUserifUserisChangeling(lv__mostVotedUser)));
            lv__text = TextExpressionAssemble("Param/Expression/2B9FF129");
            for (auto6516211E_i = 1; auto6516211E_i <= auto6516211E_n; auto6516211E_i += 1) {
                Wait(1.0, c_timeGame);
                libNtve_gf_SetDialogItemText(gv_trainLabelItem, lv__text, PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/60FC7072", "A", lv__text);
                lv__text = TextExpressionAssemble("Param/Expression/60FC7072");
            }
            Wait(1.0, c_timeGame);
            if ((lv__mostVotedUser == gf_GetChangelingPlayer())) {
                DialogSetVisible(gv_trainLabelDialog, PlayerGroupAll(), false);
                gf_SetGlobalEnvironmentState(ge_EnvironmentState_Normal);
                gf_DisplayInformationMessage(StringExternal("Param/Value/3C8D9936"), PlayerGroupAll());
                TriggerExecute(gt_StartFoundChangelingInEscapeTrainQ, true, false);
                return true;
            }
            else {
                DialogSetVisible(gv_trainLabelDialog, PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemText(gv_trainLabelItem, StringExternal("Param/Value/B366E698"), PlayerGroupAll());
                SoundPlayForPlayer(SoundLink("Aberration_Explode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                Wait(5.0, c_timeGame);
                DialogSetVisible(gv_trainLabelDialog, PlayerGroupAll(), false);
                gf_GameEndChangelingSurvivedInEscapeTrain();
                return true;
            }
        }
        else {
            gf_DisplayAlertMessage(StringExternal("Param/Value/EE632DED"), PlayerGroupAll());
            Wait(5.0, c_timeGame);
            gf_GameEndChangelingSurvivedInEscapeTrain();
            return true;
        }
    }
    else {
        DialogSetVisible(gv_trainLabelDialog, PlayerGroupAll(), false);
        gf_DisplayAlertMessage(StringExternal("Param/Value/B41A3863"), PlayerGroupAll());
        TriggerExecute(gt_StartFoundChangelingInEscapeTrainQ, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetGameStatetoInEscapeTrain_Init () {
    gt_SetGameStatetoInEscapeTrain = TriggerCreate("gt_SetGameStatetoInEscapeTrain_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Found Changeling In Escape Train Q
//--------------------------------------------------------------------------------------------------
bool gt_StartFoundChangelingInEscapeTrainQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__leftAmmo;
    // Automatic Variable Declarations
    playergroup auto83C68A21_g;
    playergroup auto3AA913FF_g;
    playergroup autoB763BF75_g;
    playergroup auto3164EE08_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_InEscapeTrain))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_inEscapeTrainState = ge_InEcapeTrainState_FoundChangeling;
    auto83C68A21_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto83C68A21_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_CharacterHUD);
    }
    auto3AA913FF_g = gf_AliveMarineUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto3AA913FF_g, lv__i);
        if (lv__i < 0) { break; }
        gf_AllowDisallowUsertoFire(lv__i, true);
        libNtve_gf_MakeUnitInvulnerable(gf_CharacterUnit(lv__i), true);
    }
    gf_AllowDisallowUsertoFire(gf_GetChangelingPlayer(), false);
    gf_AllowDisallowUseChangelingAbility(false);
    TimerStart(gv_gameTimer, gv_eSCAPE_TRAIN_TIME_FOR_VOTE, false, c_timeGame);
    TimerWindowSetAnchor(gv_gameTimerWindow, c_anchorTopRight, 50, 50);
    TimerWindowSetTitle(gv_gameTimerWindow, StringExternal("Param/Value/1A381A1C"));
    TimerWindowShow(gv_gameTimerWindow, gf_StartingUsers(), true);
    while ((TimerGetRemaining(gv_gameTimer) > 0.0)) {
        Wait(0.0625, c_timeGame);
        if ((!(gf_IsUserAlive(gf_GetChangelingPlayer())))) {
            gv_inEscapeTrainState = ge_InEcapeTrainState_ChangelingDead;
            return true;
        }
        else {
            lv__leftAmmo = 0;
            autoB763BF75_g = gf_AliveMarineUsers();
            lv__i = -1;
            while (true) {
                lv__i = PlayerGroupNextPlayer(autoB763BF75_g, lv__i);
                if (lv__i < 0) { break; }
                lv__leftAmmo = (lv__leftAmmo + gf_GetRemainingAmmo(lv__i));
            }
            if ((lv__leftAmmo == 0)) {
                break;
            }
        }
    }
    gv_inEscapeTrainState = ge_InEcapeTrainState_ChangelingSurvived;
    TimerWindowShow(gv_gameTimerWindow, PlayerGroupAll(), false);
    auto3164EE08_g = gf_AliveMarineUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto3164EE08_g, lv__i);
        if (lv__i < 0) { break; }
        gf_AllowDisallowUsertoFire(lv__i, false);
    }
    DialogSetVisible(gv_trainLabelDialog, PlayerGroupAll(), true);
    if ((lv__leftAmmo == 0)) {
        libNtve_gf_SetDialogItemText(gv_trainLabelItem, StringExternal("Param/Value/548909DA"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(gv_trainLabelItem, StringExternal("Param/Value/14670E2F"), PlayerGroupAll());
    }
    SoundPlayForPlayer(SoundLink("Aberration_Explode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeGame);
    DialogSetVisible(gv_trainLabelDialog, PlayerGroupAll(), false);
    gf_GameEndChangelingSurvivedInEscapeTrain();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartFoundChangelingInEscapeTrainQ_Init () {
    gt_StartFoundChangelingInEscapeTrainQ = TriggerCreate("gt_StartFoundChangelingInEscapeTrainQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Marine Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_MarineVictoryQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoD2D1550D_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_GameEnd))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    CinematicFade(false, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TextExpressionSetToken("Param/Expression/530BAAD9", "A", TextWithColor(PlayerName(gf_GetChangelingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_GetChangelingPlayer(), false))));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1300, 300, c_anchorCenter, 0, 0, TextExpressionAssemble("Param/Expression/530BAAD9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_GameEndMonologue", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
    Wait(5.0, c_timeGame);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 100.0);
    Wait(3.0, c_timeGame);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/61D70BCE"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
    Wait(6.0, c_timeGame);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 100.0);
    Wait(3.0, c_timeGame);
    autoD2D1550D_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoD2D1550D_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_CharacterRole(lv__i) != ge_CharacterRole_Changeling)) {
            GameOver(lv__i, c_gameOverVictory, true, true);
        }
        else {
            GameOver(lv__i, c_gameOverDefeat, true, true);
        }
        CameraForceMouseRelative(lv__i, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MarineVictoryQ_Init () {
    gt_MarineVictoryQ = TriggerCreate("gt_MarineVictoryQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Changeling Main Game Vicory Q
//--------------------------------------------------------------------------------------------------
bool gt_ChangelingMainGameVicoryQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoD9BC37AC_g;
    playergroup auto2FB691CC_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_GameEnd))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    CutsceneFade(false, 2.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(3.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);
    TextExpressionSetToken("Param/Expression/1E1A2D0B", "A", TextWithColor(PlayerName(gf_GetChangelingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_GetChangelingPlayer(), false))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/1E1A2D0B"));
    SoundPlay(SoundLink("Marine_Attack_NP", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    autoD9BC37AC_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoD9BC37AC_g, lv__i);
        if (lv__i < 0) { break; }
        CameraForceMouseRelative(lv__i, false);
    }
    Wait(1.0, c_timeGame);
    auto2FB691CC_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto2FB691CC_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_CharacterRole(lv__i) == ge_CharacterRole_Changeling)) {
            GameOver(lv__i, c_gameOverVictory, true, false);
        }
        else {
            GameOver(lv__i, c_gameOverDefeat, true, false);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChangelingMainGameVicoryQ_Init () {
    gt_ChangelingMainGameVicoryQ = TriggerCreate("gt_ChangelingMainGameVicoryQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for User
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforUser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__userIndex;
    // Automatic Variable Declarations
    playergroup auto9C086934_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    auto9C086934_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto9C086934_g, lv__i);
        if (lv__i < 0) { break; }
        lv__userIndex = gf_GetUserIndex(lv__i);
        if ((lv__userIndex != -1)) {
            gv_userInfoArray[lv__userIndex].lv_mode = ge_PlayMode_GamePlayer;
            gv_userInfoArray[lv__userIndex].lv_recordedName = PlayerName(lv__i);
            if ((GameIsTestMap(false) == false)) {
                gv_userInfoArray[lv__userIndex].lv_recordedHandle = PlayerHandle(lv__i);
                PlayerModifyPropertyInt(lv__i, c_playerPropMinerals, c_playerPropOperSetTo, gf_LastNumberofHandle(lv__i));
            }
            else {
                if ((PlayerType(lv__i) == c_playerTypeUser)) {
                    gv_userInfoArray[lv__userIndex].lv_recordedHandle = gf_GetHandlebyCombiningId(3, 1, 7619084);
                }
                else {
                    gv_userInfoArray[lv__userIndex].lv_recordedHandle = gf_GenerateDummyHandle(lv__i);
                }
                PlayerModifyPropertyInt(lv__i, c_playerPropMinerals, c_playerPropOperSetTo, gf_LastNumberofHandle(lv__i));
            }
        }
        else {
            gf_CustomDebugMessage(StringExternal("Param/Value/B5806677"));
        }
        PlayerGroupAdd(gv_startingUsers, lv__i);
    }
    TriggerExecute(gt_InitializationforCamera, true, false);
    TriggerExecute(gt_InitializationforBank, true, false);
    TriggerExecute(gt_InitializationforLegacyScore, true, false);
    TriggerExecute(gt_InitializationforChat, true, false);
    TriggerExecute(gt_InitializationforBlacklist, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforUser_Init () {
    gt_InitializationforUser = TriggerCreate("gt_InitializationforUser_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Settings for User
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingsforUser_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_MainGameSettingsforCamera, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingsforUser_Init () {
    gt_MainGameSettingsforUser = TriggerCreate("gt_MainGameSettingsforUser_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: User Leaves Game
//--------------------------------------------------------------------------------------------------
bool gt_UserLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() != ge_GameState_GameEnd))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CustomizedShowHideMouseCursor(lv__user, true);
    if (gf_IsUserAlive(lv__user)) {
        PlayerCreateEffectUnit(gv_pLAYER_NEUTRAL, "Kill22", gf_CharacterUnit(lv__user));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UserLeavesGame_Init () {
    gt_UserLeavesGame = TriggerCreate("gt_UserLeavesGame_Func");
    TriggerAddEventPlayerLeft(gt_UserLeavesGame, c_playerAny, c_gameResultUndecided);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Kick Acount Blocked Users
//--------------------------------------------------------------------------------------------------
bool gt_KickAcountBlockedUsers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto4F5C5910_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    auto4F5C5910_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto4F5C5910_g, lv__i);
        if (lv__i < 0) { break; }
        if ((libCBBB94A3_gf_IsUserAccountBlocked(gf_RecordedHandleofUser(lv__i)) == true)) {
            gf_KickUser(lv__i, null);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_KickAcountBlockedUsers_Init () {
    gt_KickAcountBlockedUsers = TriggerCreate("gt_KickAcountBlockedUsers_Func");
    TriggerAddEventTimeElapsed(gt_KickAcountBlockedUsers, 2.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Change Observer Target
//--------------------------------------------------------------------------------------------------
bool gt_ChangeObserverTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    int auto0F19110D_val;
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() != ge_GameState_LabExplosionScene))) {
            return false;
        }
        if (!((gf_GameState() != ge_GameState_GameEnd))) {
            return false;
        }
        if (!((gf_UserPlayMode(lv__player) == ge_PlayMode_Observer))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto0F19110D_val = EventKeyPressed();
    if ((auto0F19110D_val == gv_bUTTON_OBSERVER_CHANGE_TARGET_UP) || (auto0F19110D_val == c_keyUp)) {
        gf_SetObserverTargetUser(lv__player, gf_PreviousAliveUser(gf_GetObserverTargetUser(lv__player), ge_PlayMode_GamePlayer));
    }
    else if ((auto0F19110D_val == gv_bUTTON_OBSERVER_CHANGE_TARGET_DOWN) || (auto0F19110D_val == c_keyDown)) {
        gf_SetObserverTargetUser(lv__player, gf_NextAliveUser(gf_GetObserverTargetUser(lv__player), ge_PlayMode_GamePlayer));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChangeObserverTarget_Init () {
    gt_ChangeObserverTarget = TriggerCreate("gt_ChangeObserverTarget_Func");
    TriggerAddEventKeyPressed(gt_ChangeObserverTarget, c_playerAny, gv_bUTTON_OBSERVER_CHANGE_TARGET_UP, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_ChangeObserverTarget, c_playerAny, gv_bUTTON_OBSERVER_CHANGE_TARGET_DOWN, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_ChangeObserverTarget, c_playerAny, c_keyUp, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_ChangeObserverTarget, c_playerAny, c_keyDown, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Utility Panel for Observer
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideUtilityPanelforObserver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    // Automatic Variable Declarations
    int autoFC6F987B_val;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    // Conditions
    if (testConds) {
        if (!((lv__userIndex != -1))) {
            return false;
        }
        if (!((gf_UserPlayMode(lv__user) == ge_PlayMode_Observer))) {
            return false;
        }
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_LabExplosionScene) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoFC6F987B_val = gf_GetObserverState(lv__user);
    if (autoFC6F987B_val == ge_ObserverState_Idle) {
        gv_observerInfoArray[lv__userIndex].lv_state = ge_ObserverState_UsingUtilityPanel;
        gf_ShowHideUtilityHUD(lv__user, true, ge_UtilityPanelType_SelectionPanel);
        gf_CustomizedShowHideMouseCursor(lv__user, true);
    }
    else if (autoFC6F987B_val == ge_ObserverState_UsingUtilityPanel) {
        gv_observerInfoArray[lv__userIndex].lv_state = ge_ObserverState_Idle;
        gf_ShowHideUtilityHUD(lv__user, false, ge_UtilityPanelType_SelectionPanel);
        gf_CustomizedShowHideMouseCursor(lv__user, false);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowHideUtilityPanelforObserver_Init () {
    gt_ShowHideUtilityPanelforObserver = TriggerCreate("gt_ShowHideUtilityPanelforObserver_Func");
    TriggerAddEventKeyPressed(gt_ShowHideUtilityPanelforObserver, c_playerAny, gv_bUTTON_UTILITYHUD, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_ShowHideUtilityPanelforObserver, c_playerAny, c_keyLeft, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hide Utility Panel for Observer
//--------------------------------------------------------------------------------------------------
bool gt_HideUtilityPanelforObserver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    // Conditions
    if (testConds) {
        if (!((lv__userIndex != -1))) {
            return false;
        }
        if (!((gf_GetObserverState(lv__user) == ge_ObserverState_UsingUtilityPanel))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_observerInfoArray[lv__userIndex].lv_state = ge_ObserverState_Idle;
    gf_ShowHideUtilityHUD(lv__user, false, ge_UtilityPanelType_SelectionPanel);
    gf_CustomizedShowHideMouseCursor(lv__user, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HideUtilityPanelforObserver_Init () {
    gt_HideUtilityPanelforObserver = TriggerCreate("gt_HideUtilityPanelforObserver_Func");
    TriggerAddEventKeyPressed(gt_HideUtilityPanelforObserver, c_playerAny, gv_bUTTON_GENERIC_CANCEL_1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_HideUtilityPanelforObserver, c_playerAny, gv_bUTTON_GENERIC_CANCEL_2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Camera
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int auto5ABDBDEE_ae = gv_uSER_INDEX_MAX;
    const int auto5ABDBDEE_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv__i = 0;
    for ( ; ( (auto5ABDBDEE_ai >= 0 && lv__i <= auto5ABDBDEE_ae) || (auto5ABDBDEE_ai < 0 && lv__i >= auto5ABDBDEE_ae) ) ; lv__i += auto5ABDBDEE_ai ) {
        CameraUseHeightDisplacement(lv__i, false);
        CameraUseHeightSmoothing(lv__i, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforCamera_Init () {
    gt_InitializationforCamera = TriggerCreate("gt_InitializationforCamera_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Settings for Camera
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingsforCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_CameraTrackingLoop, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingsforCamera_Init () {
    gt_MainGameSettingsforCamera = TriggerCreate("gt_MainGameSettingsforCamera_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camera Tracking Loop
//--------------------------------------------------------------------------------------------------
bool gt_CameraTrackingLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto372AD4EE_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    while (true) {
        auto372AD4EE_g = gf_CameraTrackingUsers();
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto372AD4EE_g, lv__i);
            if (lv__i < 0) { break; }
            gf_CameraTrackingTickAction(lv__i, 0.25);
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CameraTrackingLoop_Init () {
    gt_CameraTrackingLoop = TriggerCreate("gt_CameraTrackingLoop_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Bank
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforBank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__userIndex;
    int[gv_uSER_LAST + 1] lv__count;
    string lv__tempstr;
    string lv__s;
    // Automatic Variable Declarations
    playergroup autoAE06CBC2_g;
    // Variable Initialization
    lv__s ="";
    lv__tempstr = "";
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libEFD08206_gf_StarcodeSetEncryptionAlphabet("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    autoAE06CBC2_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoAE06CBC2_g, lv__i);
        if (lv__i < 0) { break; }
        lv__userIndex = gf_GetUserIndex(lv__i);
        if ((lv__userIndex != -1)) {
            BankLoad("SOUblack",lv__i);
            gv_bankInfoArray[lv__userIndex].lv_balck = BankLastCreated();
            gf_UpdateUserNameInBlackistBank(lv__i);
            BankLoad("SOUlast",lv__i);
            gv_bankInfoArray[lv__userIndex].lv_lastPlayers = BankLastCreated();
            lv__s = BankValueGetAsString(gv_bankInfoArray[lv__userIndex].lv_lastPlayers,"k","k");
    
            if ((BankVerify(BankLastCreated()) == false)) {
                BankSectionRemove(BankLastCreated(), "k");
            }
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            gf_LoadLegacyScore(lv__i);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforBank_Init () {
    gt_InitializationforBank = TriggerCreate("gt_InitializationforBank_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Legacy Score
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforLegacyScore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_canSaveLegacyScore = (PlayerGroupCount(gf_AllPlayingUsers()) >= gv_uSER_COUNT_MAX - 2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforLegacyScore_Init () {
    gt_InitializationforLegacyScore = TriggerCreate("gt_InitializationforLegacyScore_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show Legacy Score Info of Target User
//--------------------------------------------------------------------------------------------------
bool gt_ShowLegacyScoreInfoofTargetUser_Func (bool testConds, bool runActions) {
    int init_i;
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    int lv__infoTarget;
    unit lv__hitUnit;
    int[5] lv__tempitem;
    int lv__i;
    fixed lv__f;
    // Automatic Variable Declarations
    const fixed auto08F01E24_ae = 8.0;
    const fixed auto08F01E24_ai = 0.0625;
    const int auto2D2D5619_ae = 4;
    const int auto2D2D5619_ai = 1;
    const fixed auto96998276_ae = 3.0;
    const fixed auto96998276_ai = 0.0625;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv__tempitem[init_i] = c_invalidDialogControlId;
    }
    // Conditions
    if (testConds) {
        if (!((lv__userIndex != -1))) {
            return false;
        }
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_Idle)))) {
            return false;
        }
        if (!((gf_GetLegacyScoreDialogCancelationToken(lv__user) != ge_TriggerThreadState_None))) {
            return false;
        }
        if (!((gf_GetLegacyScoreDialogCancelationToken(lv__user) != ge_TriggerThreadState_CancelationRequested))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_GetLegacyScoreDialogCancelationToken(lv__user) == ge_TriggerThreadState_Running)) {
        gv_legacyScoreDialogCancelationToken[lv__userIndex] = ge_TriggerThreadState_CancelationRequested;
        while (!((gf_GetLegacyScoreDialogCancelationToken(lv__user) == ge_TriggerThreadState_Idle))) {
            Wait(0.0625, c_timeGame);
        }
    }
    gf_CastTraceline(lv__user, UnitGetPosition(gf_CharacterUnit(lv__user)), CameraGetPitch(lv__user), CameraGetYaw(lv__user), CameraInfoGetValue(gf_CameraSampleObject(lv__user), c_cameraValueHeightOffset), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), gv_lEGACYSCORE_INFO_RAYCAST_RANGE);
    lv__hitUnit = gf_TraceLineHitUnit(lv__user);
    if ((lv__hitUnit != null) && gf_IsUser(UnitGetOwner(lv__hitUnit))) {
        if ((gf_GetChangelingPlayer() == UnitGetOwner(lv__hitUnit)) && (gf_GetChangelingDisguiseState() == ge_DisguiseState_Disguising)) {
            lv__infoTarget = gf_GetDisguiseTargetUser();
        }
        else {
            lv__infoTarget = UnitGetOwner(lv__hitUnit);
        }
    }
    else {
        if ((gf_GetChangelingPlayer() == lv__user) && (gf_GetChangelingDisguiseState() == ge_DisguiseState_Disguising)) {
            lv__infoTarget = gf_GetDisguiseTargetUser();
        }
        else {
            lv__infoTarget = lv__user;
        }
    }
    DialogCreate(350, 300, c_anchorBottomRight, 50, 125, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), gf_GetUserwithObservers(lv__user), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 50, StringToText(""), gf_GetLegacyRankImagebyScore(gf_GetLegacyScore(lv__infoTarget, ge_LegacyScoreType_KilledChangelingCount), gf_GetLegacyScore(lv__infoTarget, ge_LegacyScoreType_FoundChangelingCount), gf_GetLegacyScore(lv__infoTarget, ge_LegacyScoreType_ChangelingWinCount)), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    lv__tempitem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 110, 50, TextWithColor(PlayerName(lv__infoTarget), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv__infoTarget, false))), ColorWithAlpha(0,0,0,0), true, 0.3);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_InfoName", PlayerGroupAll());
    lv__tempitem[1] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/D5A12CED", "A", IntToText(gf_GetLegacyScore(lv__infoTarget, ge_LegacyScoreType_KilledChangelingCount)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 50, 100, TextExpressionAssemble("Param/Expression/D5A12CED"), ColorWithAlpha(0,0,0,0), true, 0.3);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_InfoLine", PlayerGroupAll());
    lv__tempitem[2] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/8C98F3A4", "A", IntToText(gf_GetLegacyScore(lv__infoTarget, ge_LegacyScoreType_FoundChangelingCount)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 50, 130, TextExpressionAssemble("Param/Expression/8C98F3A4"), ColorWithAlpha(0,0,0,0), true, 0.3);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_InfoLine", PlayerGroupAll());
    lv__tempitem[3] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/B7CEA3DD", "A", IntToText(gf_GetLegacyScore(lv__infoTarget, ge_LegacyScoreType_ChangelingWinCount)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 50, 160, TextExpressionAssemble("Param/Expression/B7CEA3DD"), ColorWithAlpha(0,0,0,0), true, 0.3);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_InfoLine", PlayerGroupAll());
    lv__tempitem[4] = DialogControlLastCreated();
    gv_legacyScoreDialogCancelationToken[lv__userIndex] = ge_TriggerThreadState_Running;
    lv__f = 0.0;
    for ( ; ( (auto08F01E24_ai >= 0 && lv__f <= auto08F01E24_ae) || (auto08F01E24_ai < 0 && lv__f >= auto08F01E24_ae) ) ; lv__f += auto08F01E24_ai ) {
        if ((gf_GetLegacyScoreDialogCancelationToken(lv__user) == ge_TriggerThreadState_Running)) {
            Wait(0.0625, c_timeGame);
        }
        else {
            gv_legacyScoreDialogCancelationToken[lv__userIndex] = ge_TriggerThreadState_Idle;
            DialogDestroy(DialogLastCreated());
            return true;
        }
    }
    lv__i = 0;
    for ( ; ( (auto2D2D5619_ai >= 0 && lv__i <= auto2D2D5619_ae) || (auto2D2D5619_ai < 0 && lv__i >= auto2D2D5619_ae) ) ; lv__i += auto2D2D5619_ai ) {
        DialogControlFadeTransparency(lv__tempitem[lv__i], PlayerGroupAll(), 2.0, 100.0);
    }
    lv__f = 0.0;
    for ( ; ( (auto96998276_ai >= 0 && lv__f <= auto96998276_ae) || (auto96998276_ai < 0 && lv__f >= auto96998276_ae) ) ; lv__f += auto96998276_ai ) {
        if ((gf_GetLegacyScoreDialogCancelationToken(lv__user) == ge_TriggerThreadState_Running)) {
            Wait(0.0625, c_timeGame);
        }
        else {
            gv_legacyScoreDialogCancelationToken[lv__userIndex] = ge_TriggerThreadState_Idle;
            DialogDestroy(DialogLastCreated());
            return true;
        }
    }
    gv_legacyScoreDialogCancelationToken[lv__userIndex] = ge_TriggerThreadState_Idle;
    DialogDestroy(DialogLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowLegacyScoreInfoofTargetUser_Init () {
    gt_ShowLegacyScoreInfoofTargetUser = TriggerCreate("gt_ShowLegacyScoreInfoofTargetUser_Func");
    TriggerAddEventMouseClicked(gt_ShowLegacyScoreInfoofTargetUser, c_playerAny, c_mouseButtonRight, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Assist User
//--------------------------------------------------------------------------------------------------
bool gt_ResetAssistUser_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    gv_legacyScoringInfo.lv_assistUser = c_playerAny;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetAssistUser_Init () {
    gt_ResetAssistUser = TriggerCreate("gt_ResetAssistUser_Func");
    TriggerAddEventTimer(gt_ResetAssistUser, gf_GetAssistUserResetTimer());
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Last User Damaging Changeling
//--------------------------------------------------------------------------------------------------
bool gt_SetLastUserDamagingChangeling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__damagingUser;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__unit = EventUnit();
    lv__damagingUser = EventUnitDamageSourcePlayer();
    // Conditions
    if (testConds) {
        if (!((lv__unit == gf_CharacterUnit(gf_GetChangelingPlayer())))) {
            return false;
        }
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
        if (!((gf_CharacterRole(lv__damagingUser) == ge_CharacterRole_Marine))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_legacyScoringInfo.lv_killingChangelingUser = lv__damagingUser;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetLastUserDamagingChangeling_Init () {
    gt_SetLastUserDamagingChangeling = TriggerCreate("gt_SetLastUserDamagingChangeling_Func");
    TriggerAddEventUnitDamaged(gt_SetLastUserDamagingChangeling, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Blacklist
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforBlacklist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__targetUser;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto4F9BA4A6_g;
    playergroup autoA2A34640_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    auto4F9BA4A6_g = gf_AllPlayingUsers();
    lv__targetUser = -1;
    while (true) {
        lv__targetUser = PlayerGroupNextPlayer(auto4F9BA4A6_g, lv__targetUser);
        if (lv__targetUser < 0) { break; }
        autoA2A34640_g = gf_GetUsersRegisteringTargetUserAsBlacklist(lv__targetUser);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoA2A34640_g, lv__i);
            if (lv__i < 0) { break; }
            TextExpressionSetToken("Param/Expression/17F4AB35", "A", gf_RecordedUserNamewithColor(lv__targetUser));
            gf_DisplayAlertMessage(TextExpressionAssemble("Param/Expression/17F4AB35"), PlayerGroupSingle(lv__i));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforBlacklist_Init () {
    gt_InitializationforBlacklist = TriggerCreate("gt_InitializationforBlacklist_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Last Players in Blacklist
//--------------------------------------------------------------------------------------------------
bool gt_UpdateLastPlayersinBlacklist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__user))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UpdateLastPlayersinBlacklist(lv__user);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateLastPlayersinBlacklist_Init () {
    gt_UpdateLastPlayersinBlacklist = TriggerCreate("gt_UpdateLastPlayersinBlacklist_Func");
    TriggerAddEventPlayerLeft(gt_UpdateLastPlayersinBlacklist, c_playerAny, c_gameResultUndecided);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Chat
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforChat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__sender;
    int lv__reciever;
    // Automatic Variable Declarations
    playergroup autoF72716F5_g;
    playergroup autoC54E68FF_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    autoF72716F5_g = gf_StartingUsers();
    lv__sender = -1;
    while (true) {
        lv__sender = PlayerGroupNextPlayer(autoF72716F5_g, lv__sender);
        if (lv__sender < 0) { break; }
        autoC54E68FF_g = gf_StartingUsers();
        lv__reciever = -1;
        while (true) {
            lv__reciever = PlayerGroupNextPlayer(autoC54E68FF_g, lv__reciever);
            if (lv__reciever < 0) { break; }
            if ((lv__sender != lv__reciever) && (gf_IsUserinBlacklistBank(lv__reciever, lv__sender, 1) == true)) {
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforChat_Init () {
    gt_InitializationforChat = TriggerCreate("gt_InitializationforChat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Chat Message Typed
//--------------------------------------------------------------------------------------------------
bool gt_ChatMessageTyped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    string lv__message;
    playergroup lv__pg;
    // Automatic Variable Declarations
    int auto87B0EC58_val;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__message = EventChatMessage(false);
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__user))) {
            return false;
        }
        if (!((StringContains(EventChatMessage(false), "@handle", c_stringBegin, c_stringNoCase) == false))) {
            return false;
        }
        if (!((StringContains(EventChatMessage(false), "@te", c_stringBegin, c_stringNoCase) == false))) {
            return false;
        }
        if (!((StringContains(EventChatMessage(false), "@ze", c_stringBegin, c_stringNoCase) == false))) {
            return false;
        }
        if (!((StringContains(EventChatMessage(false), "@score", c_stringBegin, c_stringNoCase) == false))) {
            return false;
        }
        if (!((StringContains(EventChatMessage(false), "@kick", c_stringBegin, c_stringNoCase) == false))) {
            return false;
        }
        if (!((StringContains(EventChatMessage(false), "@say", c_stringBegin, c_stringNoCase) == false))) {
            return false;
        }
        if (!((gv_interplayer[EventPlayer()] == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto87B0EC58_val = gf_UserPlayMode(lv__user);
    if ((auto87B0EC58_val == ge_PlayMode_GamePlayer) && (gf_CharacterState(lv__user) != ge_PlayerCharacterState_Dead)){
        gf_ChatMesssageFromGamePlayer(lv__user, lv__message);
    }
    else if (auto87B0EC58_val == ge_PlayMode_Observer) {
        gf_ChatMesssageFromObservers(lv__user, lv__message);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChatMessageTyped_Init () {
    gt_ChatMessageTyped = TriggerCreate("gt_ChatMessageTyped_Func");
    TriggerAddEventChatMessage(gt_ChatMessageTyped, c_playerAny, "", false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show List of User Handle
//--------------------------------------------------------------------------------------------------
bool gt_ShowListofUserHandle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto78054451_g;
    // Variable Initialization
    lv__player = EventPlayer();
    // Actions
    if (!runActions) {
        return true;
    }
    auto78054451_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto78054451_g, lv__i);
        if (lv__i < 0) { break; }
        TextExpressionSetToken("Param/Expression/18AF84A5", "name", gf_RecordedUserNamewithColor(lv__i));
        TextExpressionSetToken("Param/Expression/18AF84A5", "handle", StringToText(gf_RecordedHandleofUser(lv__i)));
        gf_DisplayMessageforChatArea(TextExpressionAssemble("Param/Expression/18AF84A5"), PlayerGroupSingle(lv__player), SoundLink("UI_ChatMessageReceived2", -1));
    }
    TextExpressionSetToken("Param/Expression/EE3B9B69", "version", StringToText(gv_gAME_VERSION));
    gf_DisplayMessageforChatArea(TextExpressionAssemble("Param/Expression/EE3B9B69"), PlayerGroupSingle(lv__player), SoundLink("UI_ChatMessageReceived2", -1));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowListofUserHandle_Init () {
    gt_ShowListofUserHandle = TriggerCreate("gt_ShowListofUserHandle_Func");
    TriggerAddEventChatMessage(gt_ShowListofUserHandle, c_playerAny, "@handle", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Anti Mass Event Calling
//--------------------------------------------------------------------------------------------------
bool gt_AntiMassEventCalling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    // Conditions
    if (testConds) {
        if (!((lv__userIndex != -1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_antiCheatInfo[lv__userIndex].lv_eventCallCounter < gv_aNTICHEAT_EVENT_CALL_MAX)) {
        gv_antiCheatInfo[lv__userIndex].lv_eventCallCounter = (gv_antiCheatInfo[lv__userIndex].lv_eventCallCounter+1);
    }
    else {
        gf_KickUser(lv__user, StringExternal("Param/Value/B94B286C"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AntiMassEventCalling_Init () {
    gt_AntiMassEventCalling = TriggerCreate("gt_AntiMassEventCalling_Func");
    TriggerAddEventMouseClicked(gt_AntiMassEventCalling, c_playerAny, c_mouseButtonNone, true);
    TriggerAddEventKeyPressed(gt_AntiMassEventCalling, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Event Calling Counter
//--------------------------------------------------------------------------------------------------
bool gt_ResetEventCallingCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto9794CA21_g;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TimerStart(gv_antiCheatTimer, 1.0, false, c_timeGame);
    auto9794CA21_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto9794CA21_g, lv__i);
        if (lv__i < 0) { break; }
        gv_antiCheatInfo[gf_GetUserIndex(lv__i)].lv_eventCallCounter = 0;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetEventCallingCounter_Init () {
    gt_ResetEventCallingCounter = TriggerCreate("gt_ResetEventCallingCounter_Func");
    TriggerAddEventMapInit(gt_ResetEventCallingCounter);
    TriggerAddEventTimer(gt_ResetEventCallingCounter, gv_antiCheatTimer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Character
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforCharacter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__temp;
    int[gv_rESPONE_INDEX_LAST + 1] lv__integerSet;
    int[gv_rESPONE_INDEX_LAST + 1] lv__responeIndexContainer;
    // Automatic Variable Declarations
    const int auto98350136_ae = gv_rESPONE_INDEX_LAST;
    const int auto98350136_ai = 1;
    const int autoB151E8B1_ae = gv_uSER_INDEX_MAX;
    const int autoB151E8B1_ai = 1;
    playergroup autoBB31F4D7_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetPlayerGroupAlliance(gf_AllPlayingUsers(), libNtve_ge_AllianceSetting_Enemy);
    lv__i = 0;
    for ( ; ( (auto98350136_ai >= 0 && lv__i <= auto98350136_ae) || (auto98350136_ai < 0 && lv__i >= auto98350136_ae) ) ; lv__i += auto98350136_ai ) {
        lv__integerSet[lv__i] = lv__i;
    }
    lv__i = 0;
    for ( ; ( (autoB151E8B1_ai >= 0 && lv__i <= autoB151E8B1_ae) || (autoB151E8B1_ai < 0 && lv__i >= autoB151E8B1_ae) ) ; lv__i += autoB151E8B1_ai ) {
        lv__temp = RandomInt(0, (gv_rESPONE_INDEX_LAST-lv__i));
        lv__responeIndexContainer[lv__i] = lv__integerSet[lv__temp];
        lv__integerSet[lv__temp] = lv__integerSet[(gv_rESPONE_INDEX_LAST-lv__i)];
    }
    autoBB31F4D7_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(autoBB31F4D7_g, lv__i);
        if (lv__i < 0) { break; }
        UnitCreate(1, gv_mAIRINE_UNITTYPE, 0, lv__i, gf_ResponePointbyIndex(lv__responeIndexContainer[gf_GetUserIndex(lv__i)]), PointGetFacing(gf_ResponePointbyIndex(gf_GetUserIndex(lv__i))));
        UnitGroupAdd(gv_unitgroups[lv__i], UnitLastCreated());
        gf_SetMarineCharacterforUser(lv__i, UnitLastCreated());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforCharacter_Init () {
    gt_InitializationforCharacter = TriggerCreate("gt_InitializationforCharacter_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Setting for Character
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingforCharacter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto55552466_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    auto55552466_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto55552466_g, lv__i);
        if (lv__i < 0) { break; }
        gv_characterInfoArray[gf_GetUserIndex(lv__i)].lv_state = ge_PlayerCharacterState_Idle;
    }
    TriggerExecute(gt_MainGameSettingsforChangeling, true, false);
    TriggerExecute(gt_MainGameSettingforBehavior, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingforCharacter_Init () {
    gt_MainGameSettingforCharacter = TriggerCreate("gt_MainGameSettingforCharacter_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Add/Remove Power State Off Behavior For Character
//--------------------------------------------------------------------------------------------------
bool gt_AddRemovePowerStateOffBehaviorForCharacter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    unit lv__u;
    // Automatic Variable Declarations
    int autoBE180C97_val;
    unitgroup autoF53DD6E6_g;
    int autoF53DD6E6_u;
    unitgroup autoCB5BE649_g;
    int autoCB5BE649_u;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoBE180C97_val = gf_TriggeringPowerState();
    if (autoBE180C97_val == ge_PowerStateType_PowerOff) {
        autoF53DD6E6_g = gf_AllAliveCharacters();
        autoF53DD6E6_u = UnitGroupCount(autoF53DD6E6_g, c_unitCountAll);
        for (;; autoF53DD6E6_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoF53DD6E6_g, autoF53DD6E6_u);
            if (lv__u == null) { break; }
            UnitBehaviorAddPlayer(lv__u, "PowerStateOff", gv_pLAYER_NEUTRAL, 1);
        }
    }
    else if (autoBE180C97_val == ge_PowerStateType_PowerOn) {
        autoCB5BE649_g = gf_AllAliveCharacters();
        autoCB5BE649_u = UnitGroupCount(autoCB5BE649_g, c_unitCountAll);
        for (;; autoCB5BE649_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoCB5BE649_g, autoCB5BE649_u);
            if (lv__u == null) { break; }
            UnitBehaviorRemovePlayer(lv__u, "PowerStateOff", gv_pLAYER_NEUTRAL, 1);
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AddRemovePowerStateOffBehaviorForCharacter_Init () {
    gt_AddRemovePowerStateOffBehaviorForCharacter = TriggerCreate("gt_AddRemovePowerStateOffBehaviorForCharacter_Func");
    gf_PowerStateofLabChanged(gt_AddRemovePowerStateOffBehaviorForCharacter);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Settings for Changeling
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingsforChangeling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SetChangelingState(ge_ChangelingState_HasEaten);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingsforChangeling_Init () {
    gt_MainGameSettingsforChangeling = TriggerCreate("gt_MainGameSettingsforChangeling_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Disguise Effect for Changeling
//--------------------------------------------------------------------------------------------------
bool gt_CreateDisguiseEffectforChangeling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Actions
    if (!runActions) {
        return true;
    }
    UnitCreateEffectUnit(gf_CharacterUnit(lv__player), "DisguiseMimic", UnitGroupUnit(UnitGroup("Forge", gf_GetDisguiseTargetUser(), RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), 1));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateDisguiseEffectforChangeling_Init () {
    gt_CreateDisguiseEffectforChangeling = TriggerCreate("gt_CreateDisguiseEffectforChangeling_Func");
    TriggerAddEventUnitAbility(gt_CreateDisguiseEffectforChangeling, null, AbilityCommand("DisguiseAsMarineWithoutShield", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Changeling Timer Expired
//--------------------------------------------------------------------------------------------------
bool gt_ChangelingTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__changelingPlayer;
    // Automatic Variable Declarations
    int autoE2F8E885_val;
    // Variable Initialization
    lv__changelingPlayer = gf_GetChangelingPlayer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoE2F8E885_val = gv_changelingInfo.lv_state;
    if (autoE2F8E885_val == ge_ChangelingState_HasEaten) {
        gf_SetChangelingState(ge_ChangelingState_HuntingWithDisguise);
        gf_DisplayInformationMessage(StringExternal("Param/Value/BD588E71"), gf_GetUserwithObservers(lv__changelingPlayer));
    }
    else if (autoE2F8E885_val == ge_ChangelingState_HuntingWithDisguise) {
        gv_changelingInfo.lv_canDisguise = false;
        Wait(1.1, c_timeGame);
        gf_SetChangelingState(ge_ChangelingState_HuntingWithoutDisguise);
        gf_DisplayInformationMessage(StringExternal("Param/Value/CA0AB3F0"), gf_GetUserwithObservers(gf_GetChangelingPlayer()));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChangelingTimerExpired_Init () {
    gt_ChangelingTimerExpired = TriggerCreate("gt_ChangelingTimerExpired_Func");
    TriggerAddEventTimer(gt_ChangelingTimerExpired, gv_changelingInfo.lv_timer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Setting for Behavior
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingforBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_UpdateBehavior, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingforBehavior_Init () {
    gt_MainGameSettingforBehavior = TriggerCreate("gt_MainGameSettingforBehavior_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Behavior
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup autoB7C830F2_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CustomDebugMessage(StringExternal("Param/Value/E5A1F2EB"));
    while (true) {
        if (((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain))) {
            autoB7C830F2_g = gf_AliveUsers();
            lv__i = -1;
            while (true) {
                lv__i = PlayerGroupNextPlayer(autoB7C830F2_g, lv__i);
                if (lv__i < 0) { break; }
                gf_BehaviorTickAction(lv__i);
            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateBehavior_Init () {
    gt_UpdateBehavior = TriggerCreate("gt_UpdateBehavior_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Utility Panel
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideUtilityPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    // Conditions
    if (testConds) {
        if (!((lv__userIndex != -1))) {
            return false;
        }
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Idle) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_UsingUtilityHUD)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_CharacterState(lv__user) != ge_PlayerCharacterState_UsingUtilityHUD)) {
        gv_characterInfoArray[lv__userIndex].lv_state = ge_PlayerCharacterState_UsingUtilityHUD;
        gf_CustomizedShowHideMouseCursor(lv__user, true);
        gf_ShowHideUtilityHUD(lv__user, true, ge_UtilityPanelType_SelectionPanel);
    }
    else {
        gf_SetCharacterStatetoNormalState(lv__user);
        gf_ShowHideUtilityHUD(lv__user, false, ge_UtilityPanelType_None);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowHideUtilityPanel_Init () {
    gt_ShowHideUtilityPanel = TriggerCreate("gt_ShowHideUtilityPanel_Func");
    TriggerAddEventKeyPressed(gt_ShowHideUtilityPanel, c_playerAny, gv_bUTTON_UTILITYHUD, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_ShowHideUtilityPanel, c_playerAny, c_keyLeft, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hide Utility Panel for Game Player
//--------------------------------------------------------------------------------------------------
bool gt_HideUtilityPanelforGamePlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
        if (!((gf_CharacterState(lv__user) == ge_PlayerCharacterState_UsingUtilityHUD))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SetCharacterStatetoNormalState(lv__user);
    gf_ShowHideUtilityHUD(lv__user, false, ge_UtilityPanelType_None);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HideUtilityPanelforGamePlayer_Init () {
    gt_HideUtilityPanelforGamePlayer = TriggerCreate("gt_HideUtilityPanelforGamePlayer_Func");
    TriggerAddEventKeyPressed(gt_HideUtilityPanelforGamePlayer, c_playerAny, gv_bUTTON_GENERIC_CANCEL_1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_HideUtilityPanelforGamePlayer, c_playerAny, gv_bUTTON_GENERIC_CANCEL_2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Search and Control Device Directly
//--------------------------------------------------------------------------------------------------
bool gt_SearchandControlDeviceDirectly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__user;
    unit lv__device;
    // Automatic Variable Declarations
    playergroup auto4F5D929D_g;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__device = gf_DevicewithIdleStateNearbycharacter(lv__user);
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_MainGameSubState() == ge_MainGameState_Normal))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Idle) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move)))) {
            return false;
        }
        if (!((lv__device != null))) {
            return false;
        }
        if (!(((gf_HasDeviceFlag(lv__device, ge_DeviceFlag_ForChangeling) == false) || (lv__user == gf_GetChangelingPlayer())))) {
            return false;
        }
        if(hotkey_jump_by_e[lv__user - 1] == 1){
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_HasDeviceFlag(lv__device, ge_DeviceFlag_UseCamera) == false)) {
        auto4F5D929D_g = gf_GetUserwithObservers(lv__user);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto4F5D929D_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCameraModetoControllingDevice(lv__i, lv__device, 0.5);
        }
    }
    gf_SetCharacterStatetoControllingDevice(lv__user, lv__device);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SearchandControlDeviceDirectly_Init () {
    gt_SearchandControlDeviceDirectly = TriggerCreate("gt_SearchandControlDeviceDirectly_Func");
    TriggerAddEventKeyPressed(gt_SearchandControlDeviceDirectly, c_playerAny, gv_bUTTON_CONTROL_DEVICE, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Search and Control Device Directly // jump by keyE 
//--------------------------------------------------------------------------------------------------
bool gt_SearchandControlDeviceDirectly_by_E_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__user;
    unit lv__device;
    // Automatic Variable Declarations
    playergroup auto4F5D929D_g;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__device = gf_DevicewithIdleStateNearbycharacter(lv__user);
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_MainGameSubState() == ge_MainGameState_Normal))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Idle) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move)))) {
            return false;
        }
        if (!((lv__device != null))) {
            return false;
        }
        if (!(((gf_HasDeviceFlag(lv__device, ge_DeviceFlag_ForChangeling) == false) || (lv__user == gf_GetChangelingPlayer())))) {
            return false;
        }
        if(hotkey_jump_by_e[lv__user - 1] == 0){
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_HasDeviceFlag(lv__device, ge_DeviceFlag_UseCamera) == false)) {
        auto4F5D929D_g = gf_GetUserwithObservers(lv__user);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto4F5D929D_g, lv__i);
            if (lv__i < 0) { break; }
            gf_SetCameraModetoControllingDevice(lv__i, lv__device, 0.5);
        }
    }
    gf_SetCharacterStatetoControllingDevice(lv__user, lv__device);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SearchandControlDeviceDirectly_by_E_Init () {
    gt_SearchandControlDeviceDirectly_by_E = TriggerCreate("gt_SearchandControlDeviceDirectly_by_E_Func");
    TriggerAddEventKeyPressed(gt_SearchandControlDeviceDirectly_by_E, c_playerAny, gv_bUTTON_CONTROL_DEVICE_by_E, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: End Controlling Device
//--------------------------------------------------------------------------------------------------
bool gt_EndControllingDevice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__playerindex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    lv__playerindex = gf_GetUserIndex(lv__player);
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((gf_CharacterState(lv__player) == ge_PlayerCharacterState_ControlingDevice))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RemoveCharacterStateofControllingDevice(lv__player);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndControllingDevice_Init () {
    gt_EndControllingDevice = TriggerCreate("gt_EndControllingDevice_Func");
    TriggerAddEventKeyPressed(gt_EndControllingDevice, c_playerAny, gv_bUTTON_GENERIC_CANCEL_1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_EndControllingDevice, c_playerAny, gv_bUTTON_GENERIC_CANCEL_2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventUnitDied(gt_EndControllingDevice, null);
    TriggerAddEventUnitDamaged(gt_EndControllingDevice, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Forced End Controlling Device (Power State Changed)
//--------------------------------------------------------------------------------------------------
bool gt_ForcedEndControllingDevicePowerStateChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto5AC5EC0B_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_TriggeringPowerState() == ge_PowerStateType_PowerOff))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto5AC5EC0B_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto5AC5EC0B_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_CharacterState(lv__i) == ge_PlayerCharacterState_ControlingDevice) && (gf_HasDeviceFlag(gf_GetDeviceInUse(lv__i), ge_DeviceFlag_NeedsPower) == true)) {
            gf_RemoveCharacterStateofControllingDevice(lv__i);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ForcedEndControllingDevicePowerStateChanged_Init () {
    gt_ForcedEndControllingDevicePowerStateChanged = TriggerCreate("gt_ForcedEndControllingDevicePowerStateChanged_Func");
    gf_PowerStateofLabChanged(gt_ForcedEndControllingDevicePowerStateChanged);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Forced End Controlling Device (Main Game State Changed)
//--------------------------------------------------------------------------------------------------
bool gt_ForcedEndControllingDeviceMainGameStateChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto1D9D28AB_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_MainGameSubState() != ge_MainGameState_Normal))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto1D9D28AB_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto1D9D28AB_g, lv__i);
        if (lv__i < 0) { break; }
        if ((gf_CharacterState(lv__i) == ge_PlayerCharacterState_ControlingDevice)) {
            gf_RemoveCharacterStateofControllingDevice(lv__i);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ForcedEndControllingDeviceMainGameStateChanged_Init () {
    gt_ForcedEndControllingDeviceMainGameStateChanged = TriggerCreate("gt_ForcedEndControllingDeviceMainGameStateChanged_Func");
    gf_MainGameStateChanged(gt_ForcedEndControllingDeviceMainGameStateChanged);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Open/Close a Gate
//--------------------------------------------------------------------------------------------------
bool gt_OpenCloseaGate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    unit lv__gate;
    int lv__i;
    text lv__text;
    timer lv__timer;
    // Automatic Variable Declarations
    playergroup auto8281BA11_g;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    lv__gate = gf_GetGateInFrontofUser(lv__user, ge_GateMode_Any);
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Idle) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move)))) {
            return false;
        }
        if (!((gf_GetPowerState() == ge_PowerStateType_PowerOn))) {
            return false;
        }
        if (!((gv_requestedToCancelUnlcokingGate[lv__userIndex] == false))) {
            return false;
        }
        if (!((lv__gate != null))) {
            return false;
        }
        if (!(((gf_GetGateState(lv__gate) == ge_GateState_Idle) || (gf_GetGateState(lv__gate) == ge_GateState_BeingUnlocked)))) {
            return false;
        }
        if(hotkey_jump_by_e[lv__user - 1] == 1){
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_UnitInRegion(lv__gate, RegionFromId(16)) == true)) {
        gf_DisplayInformationMessage(StringExternal("Param/Value/6B6E74DC"), gf_GetUserwithObservers(lv__user));
        return true;
    }
    if (gf_IsGate(lv__gate, ge_GateMode_Open)) {
        gf_OpenCloseGate(lv__gate, false);
    }
    else if (gf_IsGate(lv__gate, ge_GateMode_Closed)) {
        if (gf_IsUnitInRestrictedCell(lv__gate)) {
            if (gf_IsUnitInRestrictedCell(gf_CharacterUnit(lv__user))) {
                gf_OpenCloseGate(lv__gate, true);
                auto8281BA11_g = gf_AliveUsers();
                lv__i = -1;
                while (true) {
                    lv__i = PlayerGroupNextPlayer(auto8281BA11_g, lv__i);
                    if (lv__i < 0) { break; }
                    if ((gf_GetTargetGatetoUnlockforUser(lv__i) == lv__gate)) {
                        gf_CancelUnlockingGateforUser(lv__i);
                    }
                }
            }
            else {
                if ((gf_GetGateState(lv__gate) != ge_GateState_BeingUnlocked)) {
                    gf_SetCharacterStatetoUnlockingGate(lv__user, lv__gate);
                }
                else {
                    gf_DisplayInformationMessage(StringExternal("Param/Value/6BD313E9"), gf_GetUserwithObservers(lv__user));
                }
            }
        }
        else {
            gf_OpenCloseGate(lv__gate, true);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OpenCloseaGate_Init () {
    gt_OpenCloseaGate = TriggerCreate("gt_OpenCloseaGate_Func");
    TriggerAddEventKeyPressed(gt_OpenCloseaGate, c_playerAny, gv_bUTTON_CONTROL_DOOR, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Open/Close a Gate
//--------------------------------------------------------------------------------------------------
bool gt_OpenCloseaGate_by_E_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    unit lv__gate;
    int lv__i;
    text lv__text;
    timer lv__timer;
    // Automatic Variable Declarations
    playergroup auto8281BA11_g;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    lv__gate = gf_GetGateInFrontofUser(lv__user, ge_GateMode_Any);
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Idle) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move)))) {
            return false;
        }
        if (!((gf_GetPowerState() == ge_PowerStateType_PowerOn))) {
            return false;
        }
        if (!((gv_requestedToCancelUnlcokingGate[lv__userIndex] == false))) {
            return false;
        }
        if (!((lv__gate != null))) {
            return false;
        }
        if (!(((gf_GetGateState(lv__gate) == ge_GateState_Idle) || (gf_GetGateState(lv__gate) == ge_GateState_BeingUnlocked)))) {
            return false;
        }
        if(hotkey_jump_by_e[lv__user - 1] == 0){
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_UnitInRegion(lv__gate, RegionFromId(16)) == true)) {
        gf_DisplayInformationMessage(StringExternal("Param/Value/6B6E74DC"), gf_GetUserwithObservers(lv__user));
        return true;
    }
    if (gf_IsGate(lv__gate, ge_GateMode_Open)) {
        gf_OpenCloseGate(lv__gate, false);
    }
    else if (gf_IsGate(lv__gate, ge_GateMode_Closed)) {
        if (gf_IsUnitInRestrictedCell(lv__gate)) {
            if (gf_IsUnitInRestrictedCell(gf_CharacterUnit(lv__user))) {
                gf_OpenCloseGate(lv__gate, true);
                auto8281BA11_g = gf_AliveUsers();
                lv__i = -1;
                while (true) {
                    lv__i = PlayerGroupNextPlayer(auto8281BA11_g, lv__i);
                    if (lv__i < 0) { break; }
                    if ((gf_GetTargetGatetoUnlockforUser(lv__i) == lv__gate)) {
                        gf_CancelUnlockingGateforUser(lv__i);
                    }
                }
            }
            else {
                if ((gf_GetGateState(lv__gate) != ge_GateState_BeingUnlocked)) {
                    gf_SetCharacterStatetoUnlockingGate(lv__user, lv__gate);
                }
                else {
                    gf_DisplayInformationMessage(StringExternal("Param/Value/6BD313E9"), gf_GetUserwithObservers(lv__user));
                }
            }
        }
        else {
            gf_OpenCloseGate(lv__gate, true);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OpenCloseaGate_by_E_Init () {
    gt_OpenCloseaGate_by_E = TriggerCreate("gt_OpenCloseaGate_by_E_Func");
    TriggerAddEventKeyPressed(gt_OpenCloseaGate_by_E, c_playerAny, gv_bUTTON_CONTROL_DOOR_by_E, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Cancel Unlocking Gate
//--------------------------------------------------------------------------------------------------
bool gt_CancelUnlockingGate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__user))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_CharacterState(lv__user) == ge_PlayerCharacterState_UnlockingGate))) {
            return false;
        }
        if (!((gv_requestedToCancelUnlcokingGate[lv__userIndex] == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CancelUnlockingGateforUser(lv__user);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CancelUnlockingGate_Init () {
    gt_CancelUnlockingGate = TriggerCreate("gt_CancelUnlockingGate_Func");
    TriggerAddEventKeyPressed(gt_CancelUnlockingGate, c_playerAny, gv_bUTTON_GENERIC_CANCEL_1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_CancelUnlockingGate, c_playerAny, gv_bUTTON_GENERIC_CANCEL_2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventUnitDied(gt_CancelUnlockingGate, null);
    TriggerAddEventUnitDamaged(gt_CancelUnlockingGate, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Forced Cancelation of Unlocking Gate (Power Off)
//--------------------------------------------------------------------------------------------------
bool gt_ForcedCancelationofUnlockingGatePowerOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__userIndex;
    int lv__user;
    // Automatic Variable Declarations
    playergroup auto45C043D1_g;
    // Variable Initialization
    lv__userIndex = -1;
    // Conditions
    if (testConds) {
        if (!((gf_TriggeringPowerState() == ge_PowerStateType_PowerOff))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto45C043D1_g = gf_AliveUsers();
    lv__user = -1;
    while (true) {
        lv__user = PlayerGroupNextPlayer(auto45C043D1_g, lv__user);
        if (lv__user < 0) { break; }
        lv__userIndex = gf_GetUserIndex(lv__user);
        if ((gf_CharacterState(lv__user) == ge_PlayerCharacterState_UnlockingGate) && (gv_requestedToCancelUnlcokingGate[lv__userIndex] == false)) {
            gf_CancelUnlockingGateforUser(lv__user);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ForcedCancelationofUnlockingGatePowerOff_Init () {
    gt_ForcedCancelationofUnlockingGatePowerOff = TriggerCreate("gt_ForcedCancelationofUnlockingGatePowerOff_Func");
    gf_PowerStateofLabChanged(gt_ForcedCancelationofUnlockingGatePowerOff);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Firing
//--------------------------------------------------------------------------------------------------
bool gt_StartFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__playerIndex;
    point lv__hitPosition;
    unit lv__hitTargetUnit;
    unit eventun;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    lv__playerIndex = gf_GetUserIndex(lv__player);
    eventun = (UnitGroupUnit(gv_unitgroups[EventPlayer()],1));
    // Conditions
    if (testConds) {
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
        if (!(((gf_CharacterRole(lv__player) == ge_CharacterRole_Marine) || ((gf_CharacterRole(lv__player) == ge_CharacterRole_Changeling) && (gf_GetChangelingDisguiseState() == ge_DisguiseState_Disguising))))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__player) == ge_PlayerCharacterState_Idle) || (gf_CharacterState(lv__player) == ge_PlayerCharacterState_Move) || (gf_CharacterState(lv__player) == ge_PlayerCharacterState_Firing)))) {
            return false;
        }
        if (!((gv_shotInfoArray[lv__playerIndex].lv_isShotbuttonClicked == false))) {
            return false;
        }
        if (!((gf_IsAllowedtoFire(lv__player) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(eventun), "d");
    if ((gf_GetRemainingAmmo(lv__player) < 1)) {
        SoundPlay(SoundLink("UI_BnetDropdownOpen", -1), gf_GetUserwithObservers(lv__player), 300.0, 0.0);
        return true;
    }
    gv_shotInfoArray[lv__playerIndex].lv_isShotbuttonClicked = true;
    if ((gf_CharacterState(lv__player) == ge_PlayerCharacterState_Firing)) {
        return true;
    }
    gv_characterInfoArray[lv__playerIndex].lv_state = ge_PlayerCharacterState_Firing;
    UnitIssueOrder(gf_CharacterUnit(lv__player), Order(AbilityCommand("stopProtossBuilding", 0)), c_orderQueueReplace);
    while (((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)) && (gf_CharacterState(lv__player) == ge_PlayerCharacterState_Firing) && (gv_shotInfoArray[lv__playerIndex].lv_isShotbuttonClicked == true) && (gf_IsAllowedtoFire(lv__player) == true)) {
        if ((gf_GetRemainingAmmo(lv__player) < 1)) {
            gf_DisplayInformationMessage(StringExternal("Param/Value/E1E42F64"), gf_GetUserwithObservers(lv__player));
            gf_SetCharacterStatetoNormalState(lv__player);
            SoundPlay(SoundLink("UI_BnetDropdownOpen", -1), gf_GetUserwithObservers(lv__player), 300.0, 0.0);
            return true;
        }
        gf_CastTraceline(lv__player, UnitGetPosition(gf_CharacterUnit(lv__player)), CameraGetPitch(lv__player), CameraGetYaw(lv__player), CameraInfoGetValue(gf_CameraSampleObject(lv__player), c_cameraValueHeightOffset), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), gv_sHOT_RIFLE_RANGE);
        lv__hitPosition = gf_TraceLineHitPoint(lv__player);
        lv__hitTargetUnit = gf_TraceLineHitUnit(lv__player);
        if ((lv__hitTargetUnit != null)) {
            UnitCreateEffectUnit(gf_CharacterUnit(lv__player), gv_sHOT_EFFECT, lv__hitTargetUnit);
            if (gf_IsCharacter(lv__hitTargetUnit) && (UnitGetType(lv__hitTargetUnit) != gv_cHANGELING_UNITTYPE_NORMAL_FORM)) {
                if ((TimerGetRemaining(gf_CharacterDamageTakenTimer(gf_GetDisguiseTargetUserifUserisChangeling(UnitGetOwner(lv__hitTargetUnit)), gf_GetDisguiseTargetUserifUserisChangeling(lv__player))) == 0.0)) {
                    TextExpressionSetToken("Param/Expression/CDC5CCE3", "A", gf_RecordedUserNamewithColor(gf_GetDisguiseTargetUserifUserisChangeling(UnitGetOwner(lv__hitTargetUnit))));
                    gf_WriteRecordtoArchive(gf_GetDisguiseTargetUserifUserisChangeling(lv__player), null, ge_Cell_None, TextExpressionAssemble("Param/Expression/CDC5CCE3"));
                }
                TimerStart(gf_CharacterDamageTakenTimer(gf_GetDisguiseTargetUserifUserisChangeling(UnitGetOwner(lv__hitTargetUnit)), gf_GetDisguiseTargetUserifUserisChangeling(lv__player)), gv_dAMAGE_ALARM_DELAY, false, c_timeGame);
            }
        }
        else {
            if ((lv__hitPosition != null)) {
                UnitCreateEffectPoint(gf_CharacterUnit(lv__player), gv_sHOT_EFFECT, lv__hitPosition);
                libNtve_gf_CreateActorAtPoint("BulletImpactModel", lv__hitPosition);
            }
            else {
                SoundPlayOnUnit(SoundLink("Marine_AttackLaunch", -1), PlayerGroupAll(), gf_CharacterUnit(lv__player), 0.0, 100.0, 0.0);
            }
        }
        libNtve_gf_SendActorMessageToUnit(gf_CharacterUnit(lv__player), "AnimBracketStart Attack Attack");
        gv_shotInfoArray[lv__playerIndex].lv_ammoRemaining -= 1;
        gf_UpdateWeaponStatusforUserwithObservers(lv__player);
        Wait(0.5, c_timeGame);
        if ((gf_CharacterState(lv__player) == ge_PlayerCharacterState_Firing)) {
            libNtve_gf_SendActorMessageToUnit(gf_CharacterUnit(lv__player), "AnimBracketStop Attack");
        }
    }
    if ((gf_CharacterState(lv__player) == ge_PlayerCharacterState_Firing)) {
        gf_SetCharacterStatetoNormalState(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartFiring_Init () {
    gt_StartFiring = TriggerCreate("gt_StartFiring_Func");
    TriggerAddEventMouseClicked(gt_StartFiring, c_playerAny, c_mouseButtonLeft, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Stop Firing
//--------------------------------------------------------------------------------------------------
bool gt_StopFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__playerIndex;
    unit eventun;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    lv__playerIndex = gf_GetUserIndex(lv__player);
    eventun = (UnitGroupUnit(gv_unitgroups[EventPlayer()],1));
    // Conditions
    if (testConds) {
        if (!((gv_shotInfoArray[lv__playerIndex].lv_isShotbuttonClicked == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(eventun), "d");
    gv_shotInfoArray[lv__playerIndex].lv_isShotbuttonClicked = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StopFiring_Init () {
    gt_StopFiring = TriggerCreate("gt_StopFiring_Func");
    TriggerAddEventMouseClicked(gt_StopFiring, c_playerAny, c_mouseButtonLeft, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Move Key Pressed
//--------------------------------------------------------------------------------------------------
bool gt_MoveKeyPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__playerIndex;
    unit eventun;
    // Automatic Variable Declarations
    int autoC46EB2E0_val;
    // Variable Initialization
    lv__player = EventPlayer();
    lv__playerIndex = gf_GetUserIndex(lv__player);
    eventun = (UnitGroupUnit(gv_unitgroups[EventPlayer()],1));
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(eventun), "d");
    autoC46EB2E0_val = EventKeyPressed();
    if (autoC46EB2E0_val == c_keyW) {
        if ((gv_moveInfoArray[lv__playerIndex].lv_up == false)) {
            gv_moveInfoArray[lv__playerIndex].lv_offset[1] += 1;
            gv_moveInfoArray[lv__playerIndex].lv_up = true;
        }
    }
    else if (autoC46EB2E0_val == c_keyA) {
        if ((gv_moveInfoArray[lv__playerIndex].lv_left == false)) {
            gv_moveInfoArray[lv__playerIndex].lv_offset[0] -= 1;
            gv_moveInfoArray[lv__playerIndex].lv_left = true;
        }
    }
    else if (autoC46EB2E0_val == c_keyS) {
        if ((gv_moveInfoArray[lv__playerIndex].lv_down == false)) {
            gv_moveInfoArray[lv__playerIndex].lv_offset[1] -= 1;
            gv_moveInfoArray[lv__playerIndex].lv_down = true;
        }
    }
    else if (autoC46EB2E0_val == c_keyD) {
        if ((gv_moveInfoArray[lv__playerIndex].lv_right == false)) {
            gv_moveInfoArray[lv__playerIndex].lv_offset[0] += 1;
            gv_moveInfoArray[lv__playerIndex].lv_right = true;
        }
    }
    else {
    }
    gf_UpdateDirectionofUserMovement(lv__player);
    if (((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)) && ((gf_CharacterState(lv__player) == ge_PlayerCharacterState_Move) || (gf_CharacterState(lv__player) == ge_PlayerCharacterState_Idle))) {
        gf_SetCharacterStatetoNormalState(lv__player);
        gf_BehaviorTickAction(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MoveKeyPressed_Init () {
    gt_MoveKeyPressed = TriggerCreate("gt_MoveKeyPressed_Func");
    TriggerAddEventKeyPressed(gt_MoveKeyPressed, c_playerAny, c_keyW, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_MoveKeyPressed, c_playerAny, c_keyA, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_MoveKeyPressed, c_playerAny, c_keyS, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_MoveKeyPressed, c_playerAny, c_keyD, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Move Key Released
//--------------------------------------------------------------------------------------------------
bool gt_MoveKeyReleased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__playerindex;
    unit eventun;
    // Automatic Variable Declarations
    int auto4981F136_val;
    // Variable Initialization
    lv__player = EventPlayer();
    lv__playerindex = gf_GetUserIndex(lv__player);
    eventun = (UnitGroupUnit(gv_unitgroups[EventPlayer()],1));
    // Actions
    if (!runActions) {
        return true;
    }
    auto4981F136_val = EventKeyPressed();
    if (auto4981F136_val == c_keyW) {
        if ((gv_moveInfoArray[lv__playerindex].lv_up == true)) {
            gv_moveInfoArray[lv__playerindex].lv_offset[1] -= 1;
            gv_moveInfoArray[lv__playerindex].lv_up = false;
        }
    }
    else if (auto4981F136_val == c_keyA) {
        if ((gv_moveInfoArray[lv__playerindex].lv_left == true)) {
            gv_moveInfoArray[lv__playerindex].lv_offset[0] += 1;
            gv_moveInfoArray[lv__playerindex].lv_left = false;
        }
    }
    else if (auto4981F136_val == c_keyS) {
        if ((gv_moveInfoArray[lv__playerindex].lv_down == true)) {
            gv_moveInfoArray[lv__playerindex].lv_offset[1] += 1;
            gv_moveInfoArray[lv__playerindex].lv_down = false;
        }
    }
    else if (auto4981F136_val == c_keyD) {
        if ((gv_moveInfoArray[lv__playerindex].lv_right == true)) {
            gv_moveInfoArray[lv__playerindex].lv_offset[0] -= 1;
            gv_moveInfoArray[lv__playerindex].lv_right = false;
        }
    }
    else {
    }
    gf_UpdateDirectionofUserMovement(lv__player);
    if (((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)) && ((gf_CharacterState(lv__player) == ge_PlayerCharacterState_Move) || (gf_CharacterState(lv__player) == ge_PlayerCharacterState_Idle))) {
        gf_SetCharacterStatetoNormalState(lv__player);
        gf_BehaviorTickAction(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MoveKeyReleased_Init () {
    gt_MoveKeyReleased = TriggerCreate("gt_MoveKeyReleased_Func");
    TriggerAddEventKeyPressed(gt_MoveKeyReleased, c_playerAny, c_keyW, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_MoveKeyReleased, c_playerAny, c_keyA, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_MoveKeyReleased, c_playerAny, c_keyS, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_MoveKeyReleased, c_playerAny, c_keyD, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Run Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_RunButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_wAIT_TIME = 0.25;
    int lv__user;
    int lv__userIndex;
    fixed lv__regen;
    bool lv__isRunning;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    lv__regen = UnitGetPropertyFixed(gf_CharacterUnit(lv__user), c_unitPropEnergyRegen, c_unitPropNormal);
    lv__isRunning = true;
    // Conditions
    if (testConds) {
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(gf_CharacterUnit(lv__user), c_unitPropEnergyPercent, c_unitPropCurrent) >= 30.0))) {
            return false;
        }
        if (!((gv_isRunButtonPressed[lv__userIndex] == false))) {
            return false;
        }
        if (!((gv_isRunButtonLocked[lv__userIndex] == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_isRunButtonPressed[lv__userIndex] = true;
    gv_isRunButtonLocked[lv__userIndex] = true;
    while (((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)) && (gf_CharacterState(lv__user) != ge_PlayerCharacterState_Dead) && (gv_isRunButtonPressed[lv__userIndex] == true)) {
        if ((lv__isRunning == true)) {
            if ((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move) && (UnitGetPropertyFixed(gf_CharacterUnit(lv__user), c_unitPropEnergy, c_unitPropCurrent) >= lv__regen)) {
                UnitBehaviorAddPlayer(gf_CharacterUnit(lv__user), "Running", lv__user, 1);
            }
            else {
                lv__isRunning = false;
            }
        }
        else {
            if ((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move) && (UnitGetPropertyFixed(gf_CharacterUnit(lv__user), c_unitPropEnergyPercent, c_unitPropCurrent) >= 30.0)) {
                lv__isRunning = true;
            }
        }
        Wait(lv_wAIT_TIME, c_timeGame);
    }
    gv_isRunButtonLocked[lv__userIndex] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RunButtonPressed_Init () {
    gt_RunButtonPressed = TriggerCreate("gt_RunButtonPressed_Func");
    TriggerAddEventKeyPressed(gt_RunButtonPressed, c_playerAny, gv_bUTTON_RUN, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Run Button Released
//--------------------------------------------------------------------------------------------------
bool gt_RunButtonReleased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__playerindex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__playerindex = gf_GetUserIndex(EventPlayer());
    // Conditions
    if (testConds) {
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
        if (!((gv_isRunButtonPressed[lv__playerindex] != false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_isRunButtonPressed[lv__playerindex] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RunButtonReleased_Init () {
    gt_RunButtonReleased = TriggerCreate("gt_RunButtonReleased_Func");
    TriggerAddEventKeyPressed(gt_RunButtonReleased, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Marine Dead
//--------------------------------------------------------------------------------------------------
bool gt_MarineDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__deadUser;
    int lv__deadUserIndex;
    unit lv__unit;
    int lv__i;
    // Automatic Variable Declarations
    int auto3B87DE56_val;
    // Variable Initialization
    lv__deadUser = EventPlayer();
    lv__deadUserIndex = gf_GetUserIndex(lv__deadUser);
    lv__unit = EventUnit();
    // Conditions
    if (testConds) {
        if (!((lv__deadUserIndex != -1))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_CharacterRole(lv__deadUser) == ge_CharacterRole_Marine))) {
            return false;
        }
        if (!((gf_CharacterState(lv__deadUser) != ge_PlayerCharacterState_Dead))) {
            return false;
        }
        if (!(gf_IsCharacter(lv__unit))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_characterInfoArray[lv__deadUserIndex].lv_state = ge_PlayerCharacterState_Dead;
    auto3B87DE56_val = gf_GameState();
    if (auto3B87DE56_val == ge_GameState_MainGame) {
        if ((PlayerGroupCount(gf_AliveMarineUsers()) > 0)) {
            gf_MarineDeadMainGameQ(libNtve_gf_KillingPlayer(), lv__deadUser);
        }
        else {
            gf_GameEndChangelingKilledAllMarines();
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MarineDead_Init () {
    gt_MarineDead = TriggerCreate("gt_MarineDead_Func");
    TriggerAddEventUnitDied(gt_MarineDead, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Changeling Dead
//--------------------------------------------------------------------------------------------------
bool gt_ChangelingDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__deadplayer;
    unit lv__unit;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__deadplayer = EventPlayer();
    lv__unit = EventUnit();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__deadplayer))) {
            return false;
        }
        if (!(((gf_GameState() == ge_GameState_MainGame) || (gf_GameState() == ge_GameState_InEscapeTrain)))) {
            return false;
        }
        if (!((gf_CharacterRole(lv__deadplayer) == ge_CharacterRole_Changeling))) {
            return false;
        }
        if (!((lv__unit == gf_CharacterUnit(lv__deadplayer)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_GameEndChangelingHasBeenKilled(libNtve_gf_KillingPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChangelingDead_Init () {
    gt_ChangelingDead = TriggerCreate("gt_ChangelingDead_Func");
    TriggerAddEventUnitDied(gt_ChangelingDead, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Vote for Suspicious Marine
//--------------------------------------------------------------------------------------------------
bool gt_VoteforSuspiciousMarine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__targetUser;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__targetUser = gf_GetVoteTargetUser(EventDialogControl());
    // Conditions
    if (testConds) {
        if (!((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Voting))) {
            return false;
        }
        if (!((gf_HasVoted(lv__user) == false))) {
            return false;
        }
        if (!((lv__targetUser != c_playerAny))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_VoteforTargetUser(lv__user, lv__targetUser);
    gf_SetCharacterStatetoNormalState(lv__user);
    gf_CustomDebugMessage(StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VoteforSuspiciousMarine_Init () {
    gt_VoteforSuspiciousMarine = TriggerCreate("gt_VoteforSuspiciousMarine_Func");
    TriggerAddEventDialogControl(gt_VoteforSuspiciousMarine, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Changeling Disguise State (Button Pressed)
//--------------------------------------------------------------------------------------------------
bool gt_ToggleChangelingDisguiseStateButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__userIndex;
    // Automatic Variable Declarations
    int auto77F64573_val;
    // Variable Initialization
    lv__player = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__player);
    // Conditions
    if (testConds) {
        if (!((lv__userIndex != -1))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__player) == ge_PlayerCharacterState_Idle) || (gf_CharacterState(lv__player) == ge_PlayerCharacterState_Move)))) {
            return false;
        }
        if (!((gf_CharacterRole(lv__player) == ge_CharacterRole_Changeling))) {
            return false;
        }
        if (!((gf_ChangelingCanDisguise() == true))) {
            return false;
        }
        if (!((gf_ChangelingCanUseAbility() == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto77F64573_val = gf_GetChangelingDisguiseState();
    if (auto77F64573_val == ge_DisguiseState_Disguising) {
        gf_SetChangelingDisguiseState(ge_DisguiseState_Exposed);
    }
    else if (auto77F64573_val == ge_DisguiseState_Exposed) {
        gv_characterInfoArray[lv__userIndex].lv_state = ge_PlayerCharacterState_MorphingChangeling;
        gf_SetChangelingDisguiseState(ge_DisguiseState_Disguising);
    }
    else {
        gf_CustomDebugMessage(StringExternal("Param/Value/E520FE2C"));
    }
    gv_onOffFlash[lv__player] = false;
    gv_batteryCool[lv__player] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ToggleChangelingDisguiseStateButtonPressed_Init () {
    gt_ToggleChangelingDisguiseStateButtonPressed = TriggerCreate("gt_ToggleChangelingDisguiseStateButtonPressed_Func");
    TriggerAddEventKeyPressed(gt_ToggleChangelingDisguiseStateButtonPressed, c_playerAny, gv_bUTTON_DISGUISE, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Disguise Completed
//--------------------------------------------------------------------------------------------------
bool gt_DisguiseCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_CharacterState(lv__user) == ge_PlayerCharacterState_MorphingChangeling))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SetCharacterStatetoNormalState(lv__user);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisguiseCompleted_Init () {
    gt_DisguiseCompleted = TriggerCreate("gt_DisguiseCompleted_Func");
    TriggerAddEventUnitAbility(gt_DisguiseCompleted, null, AbilityCommand("DisguiseAsMarineWithoutShield", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Eat
//--------------------------------------------------------------------------------------------------
bool gt_Eat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    unit lv__targetUnit;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!(gf_IsUserAlive(lv__user))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Idle) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move)))) {
            return false;
        }
        if (!((gf_CharacterRole(lv__user) == ge_CharacterRole_Changeling))) {
            return false;
        }
        if (!((gf_GetChangelingDisguiseState() == ge_DisguiseState_Exposed))) {
            return false;
        }
        if (!((lv__userIndex != -1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ChangelingCanEat() == true) && (gf_ChangelingCanUseAbility() == true)) {
        gf_CastTraceline(lv__user, UnitGetPosition(gf_CharacterUnit(lv__user)), CameraGetPitch(lv__user), CameraGetYaw(lv__user), CameraInfoGetValue(gf_CameraSampleObject(lv__user), c_cameraValueHeightOffset), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), gv_eAT_RANGE);
        lv__targetUnit = gf_TraceLineHitUnit(lv__user);
        if ((lv__targetUnit != null) && gf_IsUserAlive(UnitGetOwner(lv__targetUnit)) && (UnitGetType(lv__targetUnit) == "Marine")) {
            gf_IssueOrderforChangelingtoEat(UnitGetOwner(lv__targetUnit));
        }
    }
    else {
        if ((TimerGetRemaining(gv_eatAlertMessageTimer) == 0.0)) {
            TimerStart(gv_eatAlertMessageTimer, 5.0, false, c_timeGame);
            gf_DisplayAlertMessage(StringExternal("Param/Value/88DDC0F2"), gf_GetUserwithObservers(gf_GetChangelingPlayer()));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Eat_Init () {
    gt_Eat = TriggerCreate("gt_Eat_Func");
    TriggerAddEventMouseClicked(gt_Eat, c_playerAny, c_mouseButtonLeft, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Eat Successed
//--------------------------------------------------------------------------------------------------
bool gt_EatSuccessed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__changelingPlayer;
    int lvi;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__changelingPlayer = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__changelingPlayer))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_CharacterState(lv__changelingPlayer) == ge_PlayerCharacterState_EatingChangeling))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_WriteRecordtoArchive(lv__changelingPlayer, null, ge_Cell_None, StringExternal("Param/Value/BD3EFF19"));
    gf_SetAmmoAmount(lv__changelingPlayer, (gf_GetRemainingAmmo(lv__changelingPlayer)+gf_GetRemainingAmmo(gv_eatTargetPlayer)/5));
    gf_SetTargetPlayerofDisguise(gv_eatTargetPlayer);
    UnitSetPropertyFixed(gf_CharacterUnit(lv__changelingPlayer), c_unitPropLife, UnitGetPropertyFixed(gf_CharacterUnit(lv__changelingPlayer), c_unitPropLifeMax, c_unitPropCurrent));
    gf_SetChangelingState(ge_ChangelingState_HasEaten);
    gf_SetCharacterStatetoNormalState(lv__changelingPlayer);
    for (lvi = 1 ; lvi <= 8 ; lvi += 1){
        gf_RemoveUserfromNotRecievingUserGroup(lvi,gv_eatTargetPlayer);
        if(gv_chat_notReceiving_exchange_changling_and_eattarget[lvi-1] == true){
            gf_AddUsertoNotReceivingUserGroup(lv__changelingPlayer, lvi);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EatSuccessed_Init () {
    gt_EatSuccessed = TriggerCreate("gt_EatSuccessed_Func");
    TriggerAddEventPlayerEffectUsed(gt_EatSuccessed, c_playerAny, gv_eAT_EFFECT_END);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Getting Eaten
//--------------------------------------------------------------------------------------------------
bool gt_GettingEaten_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__targetPlayer;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__targetPlayer = UnitGetOwner(EventPlayerEffectUsedUnitImpact());
    // Conditions
    if (testConds) {
        if (!(gf_IsUserAlive(lv__targetPlayer))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_CharacterState(lv__targetPlayer) != ge_PlayerCharacterState_Dead))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SetCharacterStatusFlag(lv__targetPlayer, ge_CharacterStatusFlag_Abducted, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GettingEaten_Init () {
    gt_GettingEaten = TriggerCreate("gt_GettingEaten_Func");
    TriggerAddEventPlayerEffectUsed(gt_GettingEaten, c_playerAny, gv_eAT_EFFECT);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Lab
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforLab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_labInfo.lv_emergencyState = ge_EmergencyState_Normal;
    gv_labInfo.lv_powerState = ge_PowerStateType_PowerOn;
    TriggerExecute(gt_InitializationforCell, true, false);
    TriggerExecute(gt_InitializationforDevices, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforLab_Init () {
    gt_InitializationforLab = TriggerCreate("gt_InitializationforLab_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Setting for Lab
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingforLab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MainGameSettingforDevice, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingforLab_Init () {
    gt_MainGameSettingforLab = TriggerCreate("gt_MainGameSettingforLab_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Cell
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforCell_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv__ug;
    unit lv__u;
    // Automatic Variable Declarations
    unitgroup autoACB4CE6D_g;
    int autoACB4CE6D_u;
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAdd(lv__ug, UnitFromId(190));
    gf_InitializeCellInfo(ge_Cell_SecurityCell, StringExternal("Param/Value/45EE6023"), RegionFromId(4), PointFromId(73517962), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(853));
    gf_InitializeCellInfo(ge_Cell_GeneratorCell, StringExternal("Param/Value/F830AB1B"), RegionFromId(8), PointFromId(1107556412), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(148));
    UnitGroupAdd(lv__ug, UnitFromId(340));
    gf_InitializeCellInfo(ge_Cell_RadioactiveCell, StringExternal("Param/Value/69A99E51"), RegionFromId(11), PointFromId(36282757), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(71));
    gf_InitializeCellInfo(ge_Cell_EmergencyControlCell, StringExternal("Param/Value/7B0287F2"), RegionFromId(5), PointFromId(887936924), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(664));
    gf_InitializeCellInfo(ge_Cell_IncineratorCell, StringExternal("Param/Value/A8B2CAC2"), RegionFromId(26), PointFromId(906041159), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(58));
    UnitGroupAdd(lv__ug, UnitFromId(68));
    UnitGroupAdd(lv__ug, UnitFromId(70));
    gf_InitializeCellInfo(ge_Cell_LabA, StringExternal("Param/Value/7893526F"), RegionFromId(6), PointFromId(2086042761), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(247));
    UnitGroupAdd(lv__ug, UnitFromId(248));
    gf_InitializeCellInfo(ge_Cell_LabB, StringExternal("Param/Value/29110DEE"), RegionFromId(7), PointFromId(773361266), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(69));
    UnitGroupAdd(lv__ug, UnitFromId(249));
    gf_InitializeCellInfo(ge_Cell_LabC, StringExternal("Param/Value/B96EBD84"), RegionFromId(15), PointFromId(708575335), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(994));
    gf_InitializeCellInfo(ge_Cell_SateliteControlCell, StringExternal("Param/Value/DA3795DC"), RegionFromId(28), PointFromId(1742275439), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(910));
    gf_InitializeCellInfo(ge_Cell_Infirmary, StringExternal("Param/Value/C9F06453"), RegionFromId(29), PointFromId(1442513479), ge_AccessLevel_Normal, lv__ug);
    lv__ug = UnitGroupEmpty();
    UnitGroupAdd(lv__ug, UnitFromId(195));
    gf_InitializeCellInfo(ge_Cell_Archive, StringExternal("Param/Value/482C1B71"), RegionFromId(13), PointFromId(343410091), ge_AccessLevel_Normal, lv__ug);
    autoACB4CE6D_g = gf_GetAllGates(ge_GateMode_Any);
    autoACB4CE6D_u = UnitGroupCount(autoACB4CE6D_g, c_unitCountAll);
    for (;; autoACB4CE6D_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoACB4CE6D_g, autoACB4CE6D_u);
        if (lv__u == null) { break; }
        gf_InitializeGate(lv__u);
        gf_OpenCloseGate(lv__u, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforCell_Init () {
    gt_InitializationforCell = TriggerCreate("gt_InitializationforCell_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Power State for Gates
//--------------------------------------------------------------------------------------------------
bool gt_UpdatePowerStateforGates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;
    int lv__powerState;
    // Automatic Variable Declarations
    unitgroup autoD604C909_g;
    int autoD604C909_u;
    // Variable Initialization
    lv__powerState = gf_GetPowerState();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoD604C909_g = gf_GetCellGates(ge_Cell_AnyCell);
    autoD604C909_u = UnitGroupCount(autoD604C909_g, c_unitCountAll);
    for (;; autoD604C909_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoD604C909_g, autoD604C909_u);
        if (lv__u == null) { break; }
        gf_SetPowerStateforGate(lv__u, lv__powerState);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdatePowerStateforGates_Init () {
    gt_UpdatePowerStateforGates = TriggerCreate("gt_UpdatePowerStateforGates_Func");
    gf_PowerStateofLabChanged(gt_UpdatePowerStateforGates);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Gate State to Stable
//--------------------------------------------------------------------------------------------------
bool gt_SetGateStatetoStable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__gate;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__gate = EventUnit();
    // Conditions
    if (testConds) {
        if (!(gf_IsGate(lv__gate, ge_GateMode_Any))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(lv__gate, gv_gATE_STATE_CUSTOMVALUE_INDEX, (ge_GateState_Idle));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetGateStatetoStable_Init () {
    gt_SetGateStatetoStable = TriggerCreate("gt_SetGateStatetoStable_Func");
    TriggerAddEventUnitBehaviorChange(gt_SetGateStatetoStable, null, "UmojaWait", c_unitBehaviorChangeDestroy);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Devices
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforDevices_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_InitializationforAberrationCage, true, false);
    TriggerExecute(gt_InitializationforArchive, true, false);
    TriggerExecute(gt_InitializationforIncinerator, true, false);
    TriggerExecute(gt_InitializationforMonitor, true, false);
    TriggerExecute(gt_InitializationforPowerGeneratorController, true, false);
    TriggerExecute(gt_InitializationforSateliteController, true, false);
    TriggerExecute(gt_InitializationforEmergencyControlConsole, true, false);
    TriggerExecute(gt_InitializationforAutomaticMedicalBot, true, false);
    TriggerExecute(gt_InitializationforRadiationDiagnosticTester, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforDevices_Init () {
    gt_InitializationforDevices = TriggerCreate("gt_InitializationforDevices_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Setting for Device
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingforDevice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MainGameSettingsforAberrationCage, true, false);
    TriggerExecute(gt_MainGameSettingforRDT, true, false);
    TriggerExecute(gt_MainGameSettingforSatelite, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingforDevice_Init () {
    gt_MainGameSettingforDevice = TriggerCreate("gt_MainGameSettingforDevice_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Device State
//--------------------------------------------------------------------------------------------------
bool gt_UpdateDeviceState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;
    // Automatic Variable Declarations
    int autoB013D9E9_val;
    unitgroup auto70FE28F4_g;
    int auto70FE28F4_u;
    unitgroup auto1540DD4C_g;
    int auto1540DD4C_u;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoB013D9E9_val = gf_TriggeringPowerState();
    if (autoB013D9E9_val == ge_PowerStateType_PowerOff) {
        auto70FE28F4_g = gf_AllDevices();
        auto70FE28F4_u = UnitGroupCount(auto70FE28F4_g, c_unitCountAll);
        for (;; auto70FE28F4_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto70FE28F4_g, auto70FE28F4_u);
            if (lv__u == null) { break; }
            if ((gf_HasDeviceFlag(lv__u, ge_DeviceFlag_NeedsPower) == true) && (gf_DeviceState(lv__u) == ge_DeviceState_Idle)) {
                gf_SetDeviceStatetoNormalState(lv__u);
            }
        }
    }
    else if (autoB013D9E9_val == ge_PowerStateType_PowerOn) {
        auto1540DD4C_g = gf_AllDevices();
        auto1540DD4C_u = UnitGroupCount(auto1540DD4C_g, c_unitCountAll);
        for (;; auto1540DD4C_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto1540DD4C_g, auto1540DD4C_u);
            if (lv__u == null) { break; }
            if ((gf_DeviceState(lv__u) == ge_DeviceState_Unpowered)) {
                gf_SetDeviceStatetoNormalState(lv__u);
            }
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateDeviceState_Init () {
    gt_UpdateDeviceState = TriggerCreate("gt_UpdateDeviceState_Func");
    gf_PowerStateofLabChanged(gt_UpdateDeviceState);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Aberration Cage
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforAberrationCage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv__ug;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__ug = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAdd(lv__ug, UnitFromId(92));
    UnitGroupAdd(lv__ug, UnitFromId(91));
    gf_InitializeAberrationCage(UnitFromId(442), UnitFromId(254), lv__ug);
    UnitGroupClear(lv__ug);
    UnitGroupAdd(lv__ug, UnitFromId(432));
    UnitGroupAdd(lv__ug, UnitFromId(433));
    gf_InitializeAberrationCage(UnitFromId(441), UnitFromId(402), lv__ug);
    UnitGroupClear(lv__ug);
    UnitGroupAdd(lv__ug, UnitFromId(422));
    UnitGroupAdd(lv__ug, UnitFromId(421));
    gf_InitializeAberrationCage(UnitFromId(443), UnitFromId(18), lv__ug);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforAberrationCage_Init () {
    gt_InitializationforAberrationCage = TriggerCreate("gt_InitializationforAberrationCage_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Settings for Aberration Cage
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingsforAberrationCage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_AIforAberrations, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingsforAberrationCage_Init () {
    gt_MainGameSettingsforAberrationCage = TriggerCreate("gt_MainGameSettingsforAberrationCage_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Message - Lab Holding Pen
//--------------------------------------------------------------------------------------------------
bool gt_BeaconMessageLabHoldingPen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) != false) && (lv__player == gf_GetChangelingPlayer())) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/2E573F83"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeaconMessageLabHoldingPen_Init () {
    gt_BeaconMessageLabHoldingPen = TriggerCreate("gt_BeaconMessageLabHoldingPen_Func");
    TriggerAddEventUnitRegion(gt_BeaconMessageLabHoldingPen, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageLabHoldingPen, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageLabHoldingPen, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageLabHoldingPen, null, RegionFromId(21), false);
    TriggerAddEventUnitRegion(gt_BeaconMessageLabHoldingPen, null, RegionFromId(23), false);
    TriggerAddEventUnitRegion(gt_BeaconMessageLabHoldingPen, null, RegionFromId(22), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI for Aberrations
//--------------------------------------------------------------------------------------------------
bool gt_AIforAberrations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__aberration;
    unit lv__character;
    unit lv__leastPathCostUnit;
    int lv__cell;
    unitgroup lv__ug;
    // Automatic Variable Declarations
    unitgroup auto0162E346_g;
    int auto0162E346_u;
    unitgroup auto415BDBAF_g;
    int auto415BDBAF_u;
    // Variable Initialization
    lv__cell = ge_Cell_None;
    lv__ug = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(0.0625, c_timeGame);
    while ((gf_GameState() == ge_GameState_MainGame)) {
        auto0162E346_g = gf_GetAllAberrations();
        auto0162E346_u = UnitGroupCount(auto0162E346_g, c_unitCountAll);
        for (;; auto0162E346_u -= 1) {
            lv__aberration = UnitGroupUnitFromEnd(auto0162E346_g, auto0162E346_u);
            if (lv__aberration == null) { break; }
            lv__leastPathCostUnit = gf_LeastPathCostUnit(lv__aberration, gf_AllMarines(), true);
            if ((lv__leastPathCostUnit != null)) {
                UnitIssueOrder(lv__aberration, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv__leastPathCostUnit)), c_orderQueueReplace);
            }
            else {
                UnitGroupClear(lv__ug);
                auto415BDBAF_g = gf_AllMarines();
                auto415BDBAF_u = UnitGroupCount(auto415BDBAF_g, c_unitCountAll);
                for (;; auto415BDBAF_u -= 1) {
                    lv__character = UnitGroupUnitFromEnd(auto415BDBAF_g, auto415BDBAF_u);
                    if (lv__character == null) { break; }
                    lv__leastPathCostUnit = gf_LeastPathCostUnit(lv__character, gf_GetCellGates(gf_GetCellwhereUnitExists(lv__character)), false);
                    if ((lv__leastPathCostUnit != null)) {
                        UnitGroupAdd(lv__ug, lv__leastPathCostUnit);
                    }
                }
                lv__leastPathCostUnit = gf_LeastPathCostUnit(lv__aberration, lv__ug, true);
                if ((lv__leastPathCostUnit != null)) {
                    UnitIssueOrder(lv__aberration, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv__leastPathCostUnit)), c_orderQueueReplace);
                }
                else {
                    lv__cell = gf_GetCellwhereUnitExists(lv__aberration);
                    if ((lv__cell != ge_Cell_None)) {
                        lv__leastPathCostUnit = gf_LeastPathCostUnit(lv__aberration, gf_GetCellGates(gf_GetCellwhereUnitExists(lv__aberration)), false);
                        if ((lv__leastPathCostUnit != null)) {
                            UnitIssueOrder(lv__aberration, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv__leastPathCostUnit)), c_orderQueueReplace);
                        }
                    }
                }
            }
        }
        Wait(gv_aBCAGE_TIME_UPDATING_AI, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIforAberrations_Init () {
    gt_AIforAberrations = TriggerCreate("gt_AIforAberrations_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Archive
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforArchive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__i = 1;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_InitializeArchive(UnitFromId(244));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforArchive_Init () {
    gt_InitializationforArchive = TriggerCreate("gt_InitializationforArchive_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Message - Archive
//--------------------------------------------------------------------------------------------------
bool gt_BeaconMessageArchive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_GetPowerState() == ge_PowerStateType_PowerOn) && (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true)) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/13B28A77"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeaconMessageArchive_Init () {
    gt_BeaconMessageArchive = TriggerCreate("gt_BeaconMessageArchive_Func");
    TriggerAddEventUnitRegion(gt_BeaconMessageArchive, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageArchive, null, RegionFromId(14), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unpowered - Archive Console
//--------------------------------------------------------------------------------------------------
bool gt_UnpoweredArchiveConsole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int autoC7AD7631_val;
    playergroup autoFAF62DC3_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoC7AD7631_val = gf_TriggeringPowerState();
    if (autoC7AD7631_val == ge_PowerStateType_PowerOff) {
        autoFAF62DC3_g = gf_GetUserGroupbyTypeofControllingDevice(ge_DeviceType_Archive);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(autoFAF62DC3_g, lv__i);
            if (lv__i < 0) { break; }
            gf_RemoveCharacterStateofControllingDevice(lv__i);
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnpoweredArchiveConsole_Init () {
    gt_UnpoweredArchiveConsole = TriggerCreate("gt_UnpoweredArchiveConsole_Func");
    gf_PowerStateofLabChanged(gt_UnpoweredArchiveConsole);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmit Record
//--------------------------------------------------------------------------------------------------
bool gt_TransmitRecord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__archiveIndex;
    text lv__text;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__archiveIndex = gf_GetArchiveRecordIndexFromListItem(DialogControlGetSelectedItem(gf_GetArchivePanelElement(ge_ArchivePanelElement_ListBox), lv__user));
    lv__text = gf_TextRecordfromArchive(lv__archiveIndex);
    // Conditions
    if (testConds) {
        if (!((gf_DeviceType(gf_GetDeviceInUse(lv__user)) == ge_DeviceType_Archive))) {
            return false;
        }
        if (!((EventDialogControl() == gf_GetArchivePanelElement(ge_ArchivePanelElement_Button)))) {
            return false;
        }
        if (!((TimerGetRemaining(gf_ArchiveTimer()) == 0.0))) {
            return false;
        }
        if (!((lv__text != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_GetAccessLevelofCell(gf_GetCellwhereUnitExists(gf_ArchiveUnit())) != ge_AccessLevel_Restricted)) {
        if ((gf_GetAccessLevelofCell(gf_CellRecordfromArchive(lv__archiveIndex)) != ge_AccessLevel_Restricted)) {
            TimerStart(gf_ArchiveTimer(), gv_aRCHIVE_TRANSMIT_COOLDOWN, false, c_timeGame);
            gf_DisplayDataTransferStyleMessage(gf_GetDeviceInUse(lv__user), lv__text, PlayerGroupAll(), SoundLink("UI_TransmissionStart", -1));
            gf_UpdateArchiveTransmitButton();
            if ((gf_GetDisguiseTargetUser() == gf_PlayerRecordFromArchive(lv__archiveIndex)) && (gf_HasDeviceFlag(gf_DeviceRecordFromArchive(lv__archiveIndex), ge_DeviceFlag_ForChangeling) == true)) {
                gf_CustomDebugMessage(StringExternal("Param/Value/7F290B5C"));
                gf_SetAssistUserforFoundChangelingScore(lv__archiveIndex, gv_aRCHIVE_SCORE_ASSIST_DURATION, false);
            }
        }
        else {
            gf_DisplayAlertMessage(StringExternal("Param/Value/75259BAC"), gf_GetUserwithObservers(lv__user));
        }
    }
    else {
        gf_DisplayAlertMessage(StringExternal("Param/Value/B50A1D89"), gf_GetUserwithObservers(lv__user));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmitRecord_Init () {
    gt_TransmitRecord = TriggerCreate("gt_TransmitRecord_Func");
    TriggerAddEventDialogControl(gt_TransmitRecord, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Incinerator
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforIncinerator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_InitializeIncinerator(UnitFromId(791), UnitFromId(2), RegionFromId(30));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforIncinerator_Init () {
    gt_InitializationforIncinerator = TriggerCreate("gt_InitializationforIncinerator_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Incinerator Timer Expired
//--------------------------------------------------------------------------------------------------
bool gt_IncineratorTimerExpired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8569B651_val;
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto8569B651_val = gv_incineratorInfo.lv_state;
    if (auto8569B651_val == ge_IncineratorState_Preparing) {
        gf_SetIncineratorStatetoPrepared();
    }
    else if (auto8569B651_val == ge_IncineratorState_Stabilizing) {
        gf_SetIncineratorStatetoStabilized();
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IncineratorTimerExpired_Init () {
    gt_IncineratorTimerExpired = TriggerCreate("gt_IncineratorTimerExpired_Func");
    gf_IncineratorTimerExpires(gt_IncineratorTimerExpired);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Powered/Unpowered Incinerator
//--------------------------------------------------------------------------------------------------
bool gt_PoweredUnpoweredIncinerator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int auto34124A53_val;
    playergroup auto67F19D2C_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto34124A53_val = gf_TriggeringPowerState();
    if (auto34124A53_val == ge_PowerStateType_PowerOn) {
        TimerPause(gf_IncineratorTimer(), false);
        if ((gf_IncineratorState() == ge_IncineratorState_Canceled)) {
            gf_SetIncineratorStatetoStabilizing(gv_iNCI_TIME_STABILIZING);
        }
    }
    else if (auto34124A53_val == ge_PowerStateType_PowerOff) {
        TimerPause(gf_IncineratorTimer(), true);
        gf_CancelRunningIncinerator();
        auto67F19D2C_g = gf_GetUserGroupbyTypeofControllingDevice(ge_DeviceType_SecurityController);
        lv__i = -1;
        while (true) {
            lv__i = PlayerGroupNextPlayer(auto67F19D2C_g, lv__i);
            if (lv__i < 0) { break; }
            gf_RemoveCharacterStateofControllingDevice(lv__i);
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PoweredUnpoweredIncinerator_Init () {
    gt_PoweredUnpoweredIncinerator = TriggerCreate("gt_PoweredUnpoweredIncinerator_Func");
    gf_PowerStateofLabChanged(gt_PoweredUnpoweredIncinerator);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Run Incinerator
//--------------------------------------------------------------------------------------------------
bool gt_RunIncinerator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    unitgroup lv__ug;
    unit lv__device;
    int lv__i;
    // Automatic Variable Declarations
    int auto90245F3C_val;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__ug = UnitGroupEmpty();
    lv__device = gv_deviceInfoArray[gv_incineratorInfo.lv_deviceIndex].lv_unit;
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_CharacterState(lv__user) == ge_PlayerCharacterState_ControlingDevice))) {
            return false;
        }
        if (!((gf_GetPowerState() == ge_PowerStateType_PowerOn))) {
            return false;
        }
        if (!((EventDialogControl() == gv_incineratorPanel.lv_button))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto90245F3C_val = gv_incineratorInfo.lv_state;
    if (auto90245F3C_val == ge_IncineratorState_Prepared) {
        gf_WriteRecordtoArchive(lv__user, gf_GetDeviceInUse(lv__user), gf_GetCellwhereUnitExists(lv__device), StringExternal("Param/Value/B2927FB7"));
        if ((gf_GetAccessLevelofCell(ge_Cell_IncineratorCell) == ge_AccessLevel_Normal)) {
            gf_DisplayAlertMessage(StringExternal("Param/Value/6B7D1B90"), PlayerGroupAll());
        }
        gf_RunIncinerator(lv__user, gv_iNCI_TIME_RUNNING, gv_iNCI_TIME_STABILIZING, true);
    }
    else if (auto90245F3C_val == ge_IncineratorState_Stabilized) {
        gf_WriteRecordtoArchive(lv__user, gf_GetDeviceInUse(lv__user), ge_Cell_IncineratorCell, StringExternal("Param/Value/EF2FC62B"));
        gf_SetIncineratorStatetoPreparing(gv_iNCI_TIME_PREPARING);
    }
    else {
    }
    gf_RemoveCharacterStateofControllingDevice(lv__user);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RunIncinerator_Init () {
    gt_RunIncinerator = TriggerCreate("gt_RunIncinerator_Func");
    TriggerAddEventDialogControl(gt_RunIncinerator, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Message - Incinerator
//--------------------------------------------------------------------------------------------------
bool gt_BeaconMessageIncinerator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) != false) && (lv__player == gf_GetChangelingPlayer())) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/11E7426F"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeaconMessageIncinerator_Init () {
    gt_BeaconMessageIncinerator = TriggerCreate("gt_BeaconMessageIncinerator_Func");
    TriggerAddEventUnitRegion(gt_BeaconMessageIncinerator, null, RegionFromId(27), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageIncinerator, null, RegionFromId(27), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Notify Incinerator End Operation
//--------------------------------------------------------------------------------------------------
bool gt_NotifyIncineratorEndOperation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_GetAccessLevelofCell(ge_Cell_IncineratorCell) == ge_AccessLevel_Normal)) {
        gf_DisplayInformationMessage(StringExternal("Param/Value/6A5F5B3B"), PlayerGroupAll());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NotifyIncineratorEndOperation_Init () {
    gt_NotifyIncineratorEndOperation = TriggerCreate("gt_NotifyIncineratorEndOperation_Func");
    gf_IncineratorOperationFinished(gt_NotifyIncineratorEndOperation);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Automatic Medical Bot
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforAutomaticMedicalBot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_InitializeMedicalBot(UnitFromId(974), UnitFromId(973));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforAutomaticMedicalBot_Init () {
    gt_InitializationforAutomaticMedicalBot = TriggerCreate("gt_InitializationforAutomaticMedicalBot_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Breacon Message - Automatic Medical Bot
//--------------------------------------------------------------------------------------------------
bool gt_BreaconMessageAutomaticMedicalBot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (gf_GetPowerState() == ge_PowerStateType_PowerOn)) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/A06332F8"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BreaconMessageAutomaticMedicalBot_Init () {
    gt_BreaconMessageAutomaticMedicalBot = TriggerCreate("gt_BreaconMessageAutomaticMedicalBot_Func");
    TriggerAddEventUnitRegion(gt_BreaconMessageAutomaticMedicalBot, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_BreaconMessageAutomaticMedicalBot, null, RegionFromId(31), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Monitor
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__j;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_InitializeMonitorInfo(UnitFromId(60));
    gf_InitializeMonitorInfo(UnitFromId(62));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforMonitor_Init () {
    gt_InitializationforMonitor = TriggerCreate("gt_InitializationforMonitor_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Message - Monitor
//--------------------------------------------------------------------------------------------------
bool gt_BeaconMessageMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_GetPowerState() == ge_PowerStateType_PowerOn) && (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) != false)) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/3F789E2A"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeaconMessageMonitor_Init () {
    gt_BeaconMessageMonitor = TriggerCreate("gt_BeaconMessageMonitor_Func");
    TriggerAddEventUnitRegion(gt_BeaconMessageMonitor, null, RegionFromId(2), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageMonitor, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageMonitor, null, RegionFromId(2), false);
    TriggerAddEventUnitRegion(gt_BeaconMessageMonitor, null, RegionFromId(3), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Unpowered
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnpowered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__u;
    // Automatic Variable Declarations
    int autoD0DDB7E4_val;
    const int autoB6399B26_ae = gv_mONITOR_INDEX_MAX;
    const int autoB6399B26_ai = 1;
    const int auto19A9A97C_ae = gv_mONITOR_INDEX_MAX;
    const int auto19A9A97C_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoD0DDB7E4_val = gf_TriggeringPowerState();
    if (autoD0DDB7E4_val == ge_PowerStateType_PowerOn) {
        lv__i = 0;
        for ( ; ( (autoB6399B26_ai >= 0 && lv__i <= autoB6399B26_ae) || (autoB6399B26_ai < 0 && lv__i >= autoB6399B26_ae) ) ; lv__i += autoB6399B26_ai ) {
            TimerPause(gv_monitorInfoArray[lv__i].lv_targetingDelayTimer, false);
        }
    }
    else if (autoD0DDB7E4_val == ge_PowerStateType_PowerOff) {
        lv__i = 0;
        for ( ; ( (auto19A9A97C_ai >= 0 && lv__i <= auto19A9A97C_ae) || (auto19A9A97C_ai < 0 && lv__i >= auto19A9A97C_ae) ) ; lv__i += auto19A9A97C_ai ) {
            TimerPause(gv_monitorInfoArray[lv__i].lv_targetingDelayTimer, true);
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MonitorUnpowered_Init () {
    gt_MonitorUnpowered = TriggerCreate("gt_MonitorUnpowered_Func");
    gf_PowerStateofLabChanged(gt_MonitorUnpowered);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmit Character Position
//--------------------------------------------------------------------------------------------------
bool gt_TransmitCharacterPosition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__targetUser;
    playergroup lv__targetPg;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__targetUser = gf_TargetUserOfMonitorTrakingDialog(DialogControlGetDialog(EventDialogControl()));
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_DeviceType(gf_GetDeviceInUse(lv__user)) == ge_DeviceType_Monitor))) {
            return false;
        }
        if (!(gf_IsUserAlive(lv__targetUser))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((TimerGetRemaining(gf_GetMonitorTransmitCooldownTimer(gf_GetDeviceInUse(lv__user))) == 0.0)) {
        if ((gf_GetAccessLevelofCell(gf_GetCellwhereUnitExists(gf_GetDeviceInUse(lv__user))) != ge_AccessLevel_Restricted)) {
            lv__targetPg = PlayerGroupAll();
        }
        else {
            lv__targetPg = gf_GetUsersInCellwithObs(gf_GetCellwhereUnitExists(gf_GetDeviceInUse(lv__user)));
        }
        TimerStart(gf_GetMonitorTransmitCooldownTimer(gf_GetDeviceInUse(lv__user)), gv_mONITOR_TRANSMIT_DELAY, false, c_timeGame);
        if (gf_IsChangelingUser(lv__targetUser) && (gf_GetChangelingDisguiseState() == ge_DisguiseState_Exposed)) {
            gf_DisplayDataTransferStyleMessage(gf_GetDeviceInUse(lv__user), StringExternal("Param/Value/39BBFD5C"), lv__targetPg, SoundLink("UI_PingAdvanced_Danger", -1));
            gf_CreatePointMarkerToMinimap(UnitGetPosition(gf_CharacterUnit(lv__targetUser)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv__targetUser, false)), lv__targetPg, 10.0);
            gf_CustomDebugMessage(StringExternal("Param/Value/1F03D6C9"));
            gf_SetAssistUserforFoundChangelingScore(lv__user, gv_mONITOR_SCORE_ASSIST_DURATION, false);
        }
        else {
            TextExpressionSetToken("Param/Expression/D4530DC2", "A", gf_RecordedUserNamewithColor(gf_GetDisguiseTargetUserifUserisChangeling(lv__targetUser)));
            gf_DisplayDataTransferStyleMessage(gf_GetDeviceInUse(lv__user), TextExpressionAssemble("Param/Expression/D4530DC2"), lv__targetPg, SoundLink("UI_PingAdvanced_Defend", -1));
            gf_CreatePointMarkerToMinimap(UnitGetPosition(gf_CharacterUnit(lv__targetUser)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_GetDisguiseTargetUserifUserisChangeling(lv__targetUser), false)), lv__targetPg, 10.0);
            if ((gf_HasDeviceFlag(gf_GetDeviceInUse(lv__targetUser), ge_DeviceFlag_ForChangeling) == true)) {
                gf_CustomDebugMessage(StringExternal("Param/Value/C76D544D"));
                gf_SetAssistUserforFoundChangelingScore(lv__user, gv_mONITOR_SCORE_ASSIST_DURATION, false);
            }
        }
    }
    else {
        if ((TimerGetRemaining(gv_monitorInfoArray[gf_GetMonitorIndex(gf_GetDeviceInUse(lv__user))].lv_alertMessageDealyTimer) == 0.0)) {
            TimerStart(gv_monitorInfoArray[gf_GetMonitorIndex(gf_GetDeviceInUse(lv__user))].lv_alertMessageDealyTimer, 5.0, false, c_timeGame);
            gf_DisplayAlertMessage(StringExternal("Param/Value/B893D168"), gf_GetUserwithObservers(lv__user));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmitCharacterPosition_Init () {
    gt_TransmitCharacterPosition = TriggerCreate("gt_TransmitCharacterPosition_Func");
    TriggerAddEventDialogControl(gt_TransmitCharacterPosition, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Changing Target of Monitor
//--------------------------------------------------------------------------------------------------
bool gt_StartChangingTargetofMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__monitor;
    int lv__pulldown;
    int lv__deviceType;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    lv__monitor = gf_GetMonitorbyTriggeringPulldown();
    lv__pulldown = EventDialogControl();
    lv__deviceType = gf_DeviceType(gf_GetDeviceInUse(lv__player));
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_DeviceType(lv__monitor) == ge_DeviceType_Monitor))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogControlSelectItem(lv__pulldown, PlayerGroupAll(), DialogControlGetSelectedItem(lv__pulldown, lv__player));
    TimerStart(gf_GetMonitorTargetingDelayTimer(lv__monitor), gv_mONITOR_TIME_SWITCHING, false, c_timeGame);
    gf_UpdatePanelofMonitor(lv__monitor);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartChangingTargetofMonitor_Init () {
    gt_StartChangingTargetofMonitor = TriggerCreate("gt_StartChangingTargetofMonitor_Func");
    TriggerAddEventDialogControl(gt_StartChangingTargetofMonitor, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Timer Expired
//--------------------------------------------------------------------------------------------------
bool gt_MonitorTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__monitor;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__monitor = gf_GetMonitorbyTriggeringTimer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((lv__monitor != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SetMonitoringCell(lv__monitor, gf_GetSelectedCellofMonitor(lv__monitor));
    gf_UpdatePanelofMonitor(lv__monitor);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MonitorTimerExpired_Init () {
    gt_MonitorTimerExpired = TriggerCreate("gt_MonitorTimerExpired_Func");
    gf_MonitorTimerExpires(gt_MonitorTimerExpired);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Monitor When Access Level Changed
//--------------------------------------------------------------------------------------------------
bool gt_UpdateMonitorWhenAccessLevelChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;
    int lv__cell;
    // Automatic Variable Declarations
    unitgroup autoB2718A95_g;
    int autoB2718A95_u;
    // Variable Initialization
    lv__cell = gf_TriggeringAccessLevelChangedCell();
    // Actions
    if (!runActions) {
        return true;
    }
    autoB2718A95_g = gf_GetAllMonitors();
    autoB2718A95_u = UnitGroupCount(autoB2718A95_g, c_unitCountAll);
    for (;; autoB2718A95_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoB2718A95_g, autoB2718A95_u);
        if (lv__u == null) { break; }
        if ((gf_GetMonitoringCell(lv__u) == lv__cell)) {
            gf_UpdatePanelofMonitor(lv__u);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateMonitorWhenAccessLevelChanged_Init () {
    gt_UpdateMonitorWhenAccessLevelChanged = TriggerCreate("gt_UpdateMonitorWhenAccessLevelChanged_Func");
    gf_AccessLevelChanged(gt_UpdateMonitorWhenAccessLevelChanged);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Power Generator Controller
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPowerGeneratorController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__x;
    int lv__y;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__x = 350;
    lv__y = 200;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_InitializePowerController(UnitFromId(144));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPowerGeneratorController_Init () {
    gt_InitializationforPowerGeneratorController = TriggerCreate("gt_InitializationforPowerGeneratorController_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Message - Power Controller
//--------------------------------------------------------------------------------------------------
bool gt_BeaconMessagePowerController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) != false)) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/42838C1B"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeaconMessagePowerController_Init () {
    gt_BeaconMessagePowerController = TriggerCreate("gt_BeaconMessagePowerController_Func");
    TriggerAddEventUnitRegion(gt_BeaconMessagePowerController, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_BeaconMessagePowerController, null, RegionFromId(9), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Power Controller Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_PowerControllerButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_DeviceType(gf_GetDeviceInUse(lv__user)) == ge_DeviceType_PowerController))) {
            return false;
        }
        if (!((gv_powerControllerPanel.lv_button == EventDialogControl()))) {
            return false;
        }
        if (!(((gf_PowerControllerState() == ge_PowerControllerState_Supplying) || (gf_PowerControllerState() == ge_PowerControllerState_InClosingGenerator) || (gf_PowerControllerState() == ge_PowerControllerState_NotSupplying)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_PowerControllerState() == ge_PowerControllerState_Supplying)) {
        gv_powerControllerInfo.lv_state = ge_PowerControllerState_InClosingGenerator;
        TimerStart(gv_powerControllerInfo.lv_timer, gv_pOWER_CONTROLLER_TIME_SHUT_DOWN, false, c_timeGame);
        gf_SetEmergencyState(ge_EmergencyState_Emergency);
        TextExpressionSetToken("Param/Expression/E7C7FEB8", "A", IntToText(gv_pOWER_CONTROLLER_TIME_SHUT_DOWN));
        gf_DisplayAlertMessage(TextExpressionAssemble("Param/Expression/E7C7FEB8"), PlayerGroupAll());
        gf_WriteRecordtoArchive(lv__user, gf_GetDeviceInUse(lv__user), gf_GetCellwhereUnitExists(gf_DevicebyIndex(gv_powerControllerInfo.lv_deviceIndex)), StringExternal("Param/Value/78FD335C"));
    }
    else if (((gf_PowerControllerState() == ge_PowerControllerState_InClosingGenerator) || (gf_PowerControllerState() == ge_PowerControllerState_NotSupplying))) {
        gv_powerControllerInfo.lv_state = ge_PowerControllerState_Stabilizing;
        gf_SetEmergencyState(ge_EmergencyState_Normal);
        gf_SetPowerState(ge_PowerStateType_PowerOn);
        TimerStart(gv_powerControllerInfo.lv_timer, gv_pOWER_CONTROLLER_TIME_STABILIZING, false, c_timeGame);
        gf_DisplayInformationMessage(StringExternal("Param/Value/8F14F521"), PlayerGroupAll());
        gf_WriteRecordtoArchive(lv__user, gf_GetDeviceInUse(lv__user), gf_GetCellwhereUnitExists(gf_DevicebyIndex(gv_powerControllerInfo.lv_deviceIndex)), StringExternal("Param/Value/11F4A079"));
    }
    gf_UpdatePanelofPowerController();
    gf_RemoveCharacterStateofControllingDevice(lv__user);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PowerControllerButtonClicked_Init () {
    gt_PowerControllerButtonClicked = TriggerCreate("gt_PowerControllerButtonClicked_Func");
    TriggerAddEventDialogControl(gt_PowerControllerButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Power Controller Timer Expired
//--------------------------------------------------------------------------------------------------
bool gt_PowerControllerTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    unitgroup lv__doors;
    // Automatic Variable Declarations
    int auto4815B014_val;
    // Variable Initialization
    lv__doors = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_MainGameSubState() == ge_MainGameState_Normal))) {
            return false;
        }
        if (!(((gf_PowerControllerState() == ge_PowerControllerState_InClosingGenerator) || (gf_PowerControllerState() == ge_PowerControllerState_Stabilizing)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto4815B014_val = gf_PowerControllerState();
    if (auto4815B014_val == ge_PowerControllerState_InClosingGenerator) {
        gv_powerControllerInfo.lv_state = ge_PowerControllerState_NotSupplying;
        gf_WriteRecordtoArchive(c_playerAny, null, ge_Cell_GeneratorCell, StringExternal("Param/Value/8859539C"));
        gf_SetPowerState(ge_PowerStateType_PowerOff);
    }
    else if (auto4815B014_val == ge_PowerControllerState_Stabilizing) {
        gv_powerControllerInfo.lv_state = ge_PowerControllerState_Supplying;
    }
    else {
    }
    gf_UpdatePanelofPowerController();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PowerControllerTimerExpired_Init () {
    gt_PowerControllerTimerExpired = TriggerCreate("gt_PowerControllerTimerExpired_Func");
    gf_PowerControllerTimerExpiers(gt_PowerControllerTimerExpired);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Radiation Diagnostic Tester
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforRadiationDiagnosticTester_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_InitializeRadiationDiagnosticTester(UnitFromId(166));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforRadiationDiagnosticTester_Init () {
    gt_InitializationforRadiationDiagnosticTester = TriggerCreate("gt_InitializationforRadiationDiagnosticTester_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Setting for RDT
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingforRDT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_rdtInfo.lv_timer, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingforRDT_Init () {
    gt_MainGameSettingforRDT = TriggerCreate("gt_MainGameSettingforRDT_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Message - Radiation Diagnostic Tester
//--------------------------------------------------------------------------------------------------
bool gt_BeaconMessageRadiationDiagnosticTester_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_GetPowerState() == ge_PowerStateType_PowerOn) && (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) != false)) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/5E856308"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeaconMessageRadiationDiagnosticTester_Init () {
    gt_BeaconMessageRadiationDiagnosticTester = TriggerCreate("gt_BeaconMessageRadiationDiagnosticTester_Func");
    TriggerAddEventUnitRegion(gt_BeaconMessageRadiationDiagnosticTester, null, RegionFromId(12), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageRadiationDiagnosticTester, null, RegionFromId(12), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Scanning Target User
//--------------------------------------------------------------------------------------------------
bool gt_StartScanningTargetUser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__i;
    text lv__text;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_DeviceType(gf_GetDeviceInUse(lv__player)) == ge_DeviceType_RadiationDiagnosticTester))) {
            return false;
        }
        if (!((EventDialogControl() == gv_rdtPanel.lv_button))) {
            return false;
        }
        if (!((gv_rdtInfo.lv_state == ge_RDTState_Prepared))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RDTStartScanning(lv__player, gv_rDT_SCAN_DELAY_TIME, gv_rDT_PREPARING_TIME);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartScanningTargetUser_Init () {
    gt_StartScanningTargetUser = TriggerCreate("gt_StartScanningTargetUser_Func");
    TriggerAddEventDialogControl(gt_StartScanningTargetUser, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Pause/Unpause RDT Timer
//--------------------------------------------------------------------------------------------------
bool gt_PauseUnpauseRDTTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int autoDA93B27D_val;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoDA93B27D_val = gf_TriggeringPowerState();
    if (autoDA93B27D_val == ge_PowerStateType_PowerOn) {
        TimerPause(gv_rdtInfo.lv_timer, false);
    }
    else if (autoDA93B27D_val == ge_PowerStateType_PowerOff) {
        TimerPause(gv_rdtInfo.lv_timer, true);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PauseUnpauseRDTTimer_Init () {
    gt_PauseUnpauseRDTTimer = TriggerCreate("gt_PauseUnpauseRDTTimer_Func");
    gf_PowerStateofLabChanged(gt_PauseUnpauseRDTTimer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update RDT State
//--------------------------------------------------------------------------------------------------
bool gt_UpdateRDTState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    // Automatic Variable Declarations
    int autoF29BDAFC_val;
    // Variable Initialization
    lv__user = gf_DeviceUser(gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex));
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoF29BDAFC_val = gv_rdtInfo.lv_state;
    if (autoF29BDAFC_val == ge_RDTState_Preparing) {
        gf_SetRDTStatetoPrepared();
    }
    else if (autoF29BDAFC_val == ge_RDTState_Scanning) {
        gf_RDTScanTargetUser(gf_GetTargetUserofRDT());
        if ((gf_DeviceState(gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex)) == ge_DeviceState_InUse)) {
            gf_RemoveCharacterStateofControllingDevice(gf_DeviceUser(gf_DevicebyIndex(gv_rdtInfo.lv_deviceIndex)));
        }
        gf_SetRDTStatetoPreparing(gv_rDT_PREPARING_TIME);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateRDTState_Init () {
    gt_UpdateRDTState = TriggerCreate("gt_UpdateRDTState_Func");
    TriggerAddEventTimer(gt_UpdateRDTState, gv_rdtInfo.lv_timer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Satelite Controller
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforSateliteController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_InitializeSateliteController(UnitFromId(1036), gv_sCC_FIRST_PREPARING_TIME);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforSateliteController_Init () {
    gt_InitializationforSateliteController = TriggerCreate("gt_InitializationforSateliteController_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Setting for Satelite
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingforSatelite_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_sateliteControllerInfo.lv_timer, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingforSatelite_Init () {
    gt_MainGameSettingforSatelite = TriggerCreate("gt_MainGameSettingforSatelite_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Message - SCC
//--------------------------------------------------------------------------------------------------
bool gt_BeaconMessageSCC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_GetPowerState() == ge_PowerStateType_PowerOn) && (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) != false)) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/FEAEF3B5"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeaconMessageSCC_Init () {
    gt_BeaconMessageSCC = TriggerCreate("gt_BeaconMessageSCC_Func");
    TriggerAddEventUnitRegion(gt_BeaconMessageSCC, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageSCC, null, RegionFromId(32), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Satelite Controller Unpowered
//--------------------------------------------------------------------------------------------------
bool gt_SateliteControllerUnpowered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int auto2748F125_val;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto2748F125_val = gf_TriggeringPowerState();
    if (auto2748F125_val == ge_PowerStateType_PowerOn) {
        TimerPause(gv_sateliteControllerInfo.lv_timer, false);
    }
    else if (auto2748F125_val == ge_PowerStateType_PowerOff) {
        TimerPause(gv_sateliteControllerInfo.lv_timer, true);
        if (((gf_GetSateliteControllerState() == ge_SateliteControllerState_StartingTracking) || (gf_GetSateliteControllerState() == ge_SateliteControllerState_Tracking))) {
            gf_SetSateliteControllerStatetoPreparing(gv_sCC_PREPARING_TIME);
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SateliteControllerUnpowered_Init () {
    gt_SateliteControllerUnpowered = TriggerCreate("gt_SateliteControllerUnpowered_Func");
    gf_PowerStateofLabChanged(gt_SateliteControllerUnpowered);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Order Satelite to Start Tracking
//--------------------------------------------------------------------------------------------------
bool gt_OrderSatelitetoStartTracking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_DeviceType(gf_GetDeviceInUse(lv__player)) == ge_DeviceType_SateliteController))) {
            return false;
        }
        if (!((EventDialogControl() == gv_sateliteControllerPanel.lv_button))) {
            return false;
        }
        if (!((gf_GetSateliteControllerState() == ge_SateliteControllerState_Prepared))) {
            return false;
        }
        if (!((gf_GetPowerState() == ge_PowerStateType_PowerOn))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_OrderSatelitetoStartTracking(lv__player, gf_AllPlayingUsers(), gv_sCC_TRACKING_DELAY_TIME, gv_sCC_TRACKING_DURATION_TIME, gv_sCC_PREPARING_TIME);
    if ((gf_DeviceUser(gf_GetSatatliteController()) != c_playerAny)) {
        gf_RemoveCharacterStateofControllingDevice(gf_DeviceUser(gf_GetSatatliteController()));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OrderSatelitetoStartTracking_Init () {
    gt_OrderSatelitetoStartTracking = TriggerCreate("gt_OrderSatelitetoStartTracking_Func");
    TriggerAddEventDialogControl(gt_OrderSatelitetoStartTracking, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Satelite Controller State to Prepared
//--------------------------------------------------------------------------------------------------
bool gt_SetSateliteControllerStatetoPrepared_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_GetSateliteControllerState() == ge_SateliteControllerState_Preparing))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SetSateliteControllerStatetoPrepared();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetSateliteControllerStatetoPrepared_Init () {
    gt_SetSateliteControllerStatetoPrepared = TriggerCreate("gt_SetSateliteControllerStatetoPrepared_Func");
    TriggerAddEventTimer(gt_SetSateliteControllerStatetoPrepared, gv_sateliteControllerInfo.lv_timer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Emergency Control Console
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforEmergencyControlConsole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_InitializeEmergencyControlConsole(UnitFromId(74));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforEmergencyControlConsole_Init () {
    gt_InitializationforEmergencyControlConsole = TriggerCreate("gt_InitializationforEmergencyControlConsole_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Message -  Index of Target Cell of 
//--------------------------------------------------------------------------------------------------
bool gt_BeaconMessageIndexofTargetCellof_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__player;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_GetPowerState() == ge_PowerStateType_PowerOn) && (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) != false)) {
        gf_DisplayDirectiveMessageforPlayerwithObs(StringExternal("Param/Value/9B3F07AB"), lv__player);
    }
    else {
        gf_ClearDirectiveMessageforPlayerwithObs(lv__player);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeaconMessageIndexofTargetCellof_Init () {
    gt_BeaconMessageIndexofTargetCellof = TriggerCreate("gt_BeaconMessageIndexofTargetCellof_Func");
    TriggerAddEventUnitRegion(gt_BeaconMessageIndexofTargetCellof, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_BeaconMessageIndexofTargetCellof, null, RegionFromId(10), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Emergency Control Console Unpowered
//--------------------------------------------------------------------------------------------------
bool gt_EmergencyControlConsoleUnpowered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    int auto91A83444_val;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto91A83444_val = gf_TriggeringPowerState();
    if (auto91A83444_val == ge_PowerStateType_PowerOn) {
        TimerPause(gv_emergencyControlConsoleInfo.lv_timer, false);
    }
    else if (auto91A83444_val == ge_PowerStateType_PowerOff) {
        TimerPause(gv_emergencyControlConsoleInfo.lv_timer, true);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EmergencyControlConsoleUnpowered_Init () {
    gt_EmergencyControlConsoleUnpowered = TriggerCreate("gt_EmergencyControlConsoleUnpowered_Func");
    gf_PowerStateofLabChanged(gt_EmergencyControlConsoleUnpowered);
    gf_PowerStateofLabChanged(gt_EmergencyControlConsoleUnpowered);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Emergency Control Console Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_EmergencyControlConsoleButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__item;
    int lv__index;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__item = EventDialogControl();
    lv__index = gf_GetCellIndexbyEmergencyControlConsolebutton(lv__item);
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gf_DeviceType(gf_GetDeviceInUse(lv__user)) == ge_DeviceType_SecurityController))) {
            return false;
        }
        if (!((lv__index != -1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_emergencyControlConsoleInfo.lv_indexOfTargetCell = lv__index;
    if ((gv_cellInfoArray[lv__index].lv_securitylevel == ge_AccessLevel_Normal)) {
        gv_emergencyControlConsoleInfo.lv_state = ge_EmergencyControlConsoleState_InSettingToRestrict;
        TimerStart(gv_emergencyControlConsoleInfo.lv_timer, gv_eMERGENCYCONSOLE_TIME_SETTING_RESTRICT, false, c_timeGame);
        TextExpressionSetToken("Param/Expression/01F5D26D", "room", gv_cellInfoArray[lv__index].lv_name);
        gf_WriteRecordtoArchive(lv__user, gf_GetDeviceInUse(lv__user), gf_GetCellwhereUnitExists(gf_GetEmergencyControlConsole()), TextExpressionAssemble("Param/Expression/01F5D26D"));
    }
    else {
        gv_emergencyControlConsoleInfo.lv_state = ge_EmergencyControlConsoleState_InSettingToNoraml;
        TimerStart(gv_emergencyControlConsoleInfo.lv_timer, gv_eMERGENCYCONSOLE_TIME_SETTING_NORMAL, false, c_timeGame);
        TextExpressionSetToken("Param/Expression/6772A7DC", "room", gv_cellInfoArray[lv__index].lv_name);
        gf_WriteRecordtoArchive(lv__user, gf_GetDeviceInUse(lv__user), gf_GetCellwhereUnitExists(gf_GetEmergencyControlConsole()), TextExpressionAssemble("Param/Expression/6772A7DC"));
    }
    gf_UpdatePanelofEmergencyControlConsole();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EmergencyControlConsoleButtonPressed_Init () {
    gt_EmergencyControlConsoleButtonPressed = TriggerCreate("gt_EmergencyControlConsoleButtonPressed_Func");
    TriggerAddEventDialogControl(gt_EmergencyControlConsoleButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Emergency Control Console Timer Expired
//--------------------------------------------------------------------------------------------------
bool gt_EmergencyControlConsoleTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((gv_emergencyControlConsoleInfo.lv_indexOfTargetCell != -1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_cellInfoArray[gv_emergencyControlConsoleInfo.lv_indexOfTargetCell].lv_securitylevel == ge_AccessLevel_Restricted)) {
        gf_SetAccessLevelofCell(gf_GetCellbyIndex(gv_emergencyControlConsoleInfo.lv_indexOfTargetCell), ge_AccessLevel_Normal);
        TextExpressionSetToken("Param/Expression/8835ABA0", "A", gf_GetCellName(gf_GetCellbyIndex(gv_emergencyControlConsoleInfo.lv_indexOfTargetCell)));
        gf_DisplayInformationMessage(TextExpressionAssemble("Param/Expression/8835ABA0"), PlayerGroupAll());
    }
    else {
        gf_SetAccessLevelofCell(gf_GetCellbyIndex(gv_emergencyControlConsoleInfo.lv_indexOfTargetCell), ge_AccessLevel_Restricted);
        TextExpressionSetToken("Param/Expression/31F92CFF", "A", gf_GetCellName(gf_GetCellbyIndex(gv_emergencyControlConsoleInfo.lv_indexOfTargetCell)));
        gf_DisplayAlertMessage(TextExpressionAssemble("Param/Expression/31F92CFF"), PlayerGroupAll());
    }
    gv_emergencyControlConsoleInfo.lv_state = ge_EmergencyControlConsoleState_Idle;
    gv_emergencyControlConsoleInfo.lv_indexOfTargetCell = -1;
    gf_UpdatePanelofEmergencyControlConsole();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EmergencyControlConsoleTimerExpired_Init () {
    gt_EmergencyControlConsoleTimerExpired = TriggerCreate("gt_EmergencyControlConsoleTimerExpired_Func");
    TriggerAddEventTimer(gt_EmergencyControlConsoleTimerExpired, gv_emergencyControlConsoleInfo.lv_timer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for HUD
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforHUD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_InitializationforPanelofChangelingSelection, true, false);
    TriggerExecute(gt_InitializationforCharacterHUD, true, false);
    TriggerExecute(gt_InitializationforDeviceHUD, true, false);
    TriggerExecute(gt_InitializationforPanelofGatUnlockProcess, true, false);
    TriggerExecute(gt_InitializationforMinimap, true, false);
    TriggerExecute(gt_InitializationforUtilityHUD, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforHUD_Init () {
    gt_InitializationforHUD = TriggerCreate("gt_InitializationforHUD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Settings for HUD
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingsforHUD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto4FF52F55_g;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MainGameSettingforMinimap, true, false);
    TriggerExecute(gt_MainGameSettingsforCharacterHUD, true, false);
    TriggerExecute(gt_MainGameSettingsForPanelofMonitor, true, false);
    auto4FF52F55_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto4FF52F55_g, lv__i);
        if (lv__i < 0) { break; }
        gf_SetCurrentFullScreenDialogforPlayer(lv__i, ge_CustomFullScreenDialogType_CharacterHUD);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingsforHUD_Init () {
    gt_MainGameSettingsforHUD = TriggerCreate("gt_MainGameSettingsforHUD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Changeling Selection
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofChangelingSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_tempString2;
    // Automatic Variable Declarations
    playergroup autoC292E384_g;
    // Variable Initialization
    lv_tempString2 = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_changelingSelectionPanel.lv_dialog != c_invalidDialogId)) {
        return true;
    }
    gf_CreatePlainDialog();
    gv_changelingSelectionPanel.lv_dialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "_ChangelingSelectionPanel/ChangelingRandomPickPanel");
    gv_changelingSelectionPanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(gv_changelingSelectionPanel.lv_panel, c_triggerControlTypeButton, "ApplyButton");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/88717394"), PlayerGroupAll());
    gv_changelingSelectionPanel.lv_applyButton = DialogControlLastCreated();
    DialogControlHookup(gv_changelingSelectionPanel.lv_panel, c_triggerControlTypePanel, "PlayerList");
    gv_changelingSelectionPanel.lv_playerList = DialogControlLastCreated();
    DialogControlHookup(gv_changelingSelectionPanel.lv_panel, c_triggerControlTypePanel, "GameStartCounter");
    lv_tempString2 = DialogControlLastCreated();
    DialogControlHookup(lv_tempString2, c_triggerControlTypeLabel, "TitleText");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DD1A1A32"), PlayerGroupAll());
    DialogControlHookup(lv_tempString2, c_triggerControlTypeLabel, "CounterText");
    gv_changelingSelectionPanel.lv_gameStartCounterText = DialogControlLastCreated();
    lv_tempString2 = c_invalidDialogControlId;
    autoC292E384_g = gf_StartingUsers();
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoC292E384_g, lv_i);
        if (lv_i < 0) { break; }
        DialogControlCreateInPanelFromTemplate(gv_changelingSelectionPanel.lv_playerList, c_triggerControlTypePanel, "_ChangelingSelectionPanel/PlayerListItemFrame");
        if ((lv_tempString2 == c_invalidDialogControlId)) {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, gv_changelingSelectionPanel.lv_playerList, c_anchorTop, 0, 0);
        }
        else {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_tempString2, c_anchorBottom, 0, 0);
        }
        lv_tempString2 = DialogControlLastCreated();
        DialogControlHookup(lv_tempString2, c_triggerControlTypeImage, "RankImage");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gf_GetLegacyRankImagefromUser(lv_i), PlayerGroupAll());
        gv_changelingSelectionPanel.lv_playerRankImage[gf_GetUserIndex(lv_i)] = DialogControlLastCreated();
        DialogControlHookup(lv_tempString2, c_triggerControlTypeLabel, "PlayerNameLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), gf_RecordedUserNamewithColor(lv_i), PlayerGroupAll());
        gv_changelingSelectionPanel.lv_playerNameLabel[gf_GetUserIndex(lv_i)] = DialogControlLastCreated();
        DialogControlHookup(lv_tempString2, c_triggerControlTypeButton, "KickVoteButton");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/452042F9"), PlayerGroupAll());
        gv_changelingSelectionPanel.lv_kickVoteButton[gf_GetUserIndex(lv_i)] = DialogControlLastCreated();
        DialogControlHookup(lv_tempString2, c_triggerControlTypeLabel, "KickVoteCountLabel");
        gv_changelingSelectionPanel.lv_kickVoteCountLabel[gf_GetUserIndex(lv_i)] = DialogControlLastCreated();
        if ((PlayerGroupCount(gf_GetUsersRegisteringTargetUserAsBlacklist(lv_i)) >= gv_rEQUIRED_NUMBER_OF_USERS_FOR_USE_KICKBUTTON)) {
            DialogControlSetVisible(gv_changelingSelectionPanel.lv_kickVoteButton[gf_GetUserIndex(lv_i)], PlayerGroupAll(), true);
            DialogControlSetVisible(gv_changelingSelectionPanel.lv_kickVoteCountLabel[gf_GetUserIndex(lv_i)], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(gv_changelingSelectionPanel.lv_kickVoteButton[gf_GetUserIndex(lv_i)], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_changelingSelectionPanel.lv_kickVoteCountLabel[gf_GetUserIndex(lv_i)], PlayerGroupAll(), false);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofChangelingSelection_Init () {
    gt_InitializationforPanelofChangelingSelection = TriggerCreate("gt_InitializationforPanelofChangelingSelection_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Character HUD
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforCharacterHUD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__tempPanel;
    // Automatic Variable Declarations
    playergroup auto024FC844_g;
    // Variable Initialization
    lv__tempPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_characterHUDDailog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "_CharacterHUD/CharacterHUDFrame");
    gv_characterHUDPanel = DialogControlLastCreated();
    DialogControlHookup(gv_characterHUDPanel, c_triggerControlTypePanel, "CharacterStatusFrame");
    gv_characterStatusPanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(gv_characterStatusPanel.lv_panel, c_triggerControlTypePanel, "HealthBarFrame");
    lv__tempPanel = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeImage, "BarImage");
    gv_characterStatusPanel.lv_healthBarImage = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeImage, "BarEmptyImage");
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeImage, "BorderImage");
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 600, PlayerGroupAll());
    DialogControlHookup(gv_characterStatusPanel.lv_panel, c_triggerControlTypePanel, "StaminaBarFrame");
    lv__tempPanel = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeImage, "BarImage");
    gv_characterStatusPanel.lv_staminaBarImage = DialogControlLastCreated();
    DialogControlHookup(gv_characterStatusPanel.lv_panel, c_triggerControlTypePanel, "ChangelingProgressBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_characterStatusPanel.lv_changelingProcessBarPanel = DialogControlLastCreated();
    DialogControlHookup(gv_characterStatusPanel.lv_changelingProcessBarPanel, c_triggerControlTypeImage, "BarImage");
    gv_characterStatusPanel.lv_changelingProcessBarImage = DialogControlLastCreated();
    DialogControlHookup(gv_characterHUDPanel, c_triggerControlTypePanel, "WeaponStatusFrame");
    gv_weaponPanel = DialogControlLastCreated();
    DialogControlHookup(gv_weaponPanel, c_triggerControlTypeImage, "WeaponIconBorderImage");
    gv_weaponIconBorderImage = DialogControlLastCreated();
    DialogControlHookup(gv_weaponPanel, c_triggerControlTypeImage, "WeaponIconImage");
    gv_weaponIconImage = DialogControlLastCreated();
    DialogControlHookup(gv_weaponPanel, c_triggerControlTypeLabel, "WeaponAmmoLabel");
    gv_weaponAmmoText = DialogControlLastCreated();
    auto024FC844_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto024FC844_g, lv__i);
        if (lv__i < 0) { break; }
        gf_UpdateWeaponStatusforUserwithObservers(lv__i);
    }
    DialogControlHookup(gv_characterHUDPanel, c_triggerControlTypeImage, "AimBoxImage");
    gv_aimBox = DialogControlLastCreated();
    DialogControlHookup(gv_characterHUDPanel, c_triggerControlTypeImage, "HitBoxImage");
    gv_hitBox = DialogControlLastCreated();
    DialogControlFadeTransparency(gv_hitBox,PlayerGroupAll(),0.0,100);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforCharacterHUD_Init () {
    gt_InitializationforCharacterHUD = TriggerCreate("gt_InitializationforCharacterHUD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Settings for Character HUD
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingsforCharacterHUD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_UpdateChangelingCharacterHUD, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingsforCharacterHUD_Init () {
    gt_MainGameSettingsforCharacterHUD = TriggerCreate("gt_MainGameSettingsforCharacterHUD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Changeling Character HUD
//--------------------------------------------------------------------------------------------------
bool gt_UpdateChangelingCharacterHUD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__width;
    int lv__cnt;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(0.0625, c_timeGame);
    DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBar), gf_GetUserwithObservers(gf_GetChangelingPlayer()), true);
    while ((gf_GameState() == ge_GameState_MainGame)) {
        if ((lv__cnt == 0)) {
            lv__cnt = 15;
            if ((gf_GetChangelingDisguiseState() == ge_DisguiseState_Exposed)) {
                gf_UpdateWeaponFrameToAbduct(gf_GetUserwithObservers(gf_GetChangelingPlayer()));
            }
        }
        else {
            lv__cnt = (lv__cnt-1);
        }
        if ((gf_GetChangelingState() == ge_ChangelingState_HasEaten)) {
            libNtve_gf_SetDialogItemColor(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBarImage), gv_bAR_CHANGELINGPROCESS_COLOR1, PlayerGroupAll());
            lv__width = FixedToInt((gv_bAR_CHANGELINGPROCESS_WIDHT * TimerGetRemaining(gf_GetChangelingTimer()) / gv_cHANGELING_TIME_FOR_EAT));
        }
        else if (((gf_GetChangelingState() == ge_ChangelingState_HuntingWithDisguise) || (gf_GetChangelingState() == ge_ChangelingState_HuntingWithoutDisguise))) {
            libNtve_gf_SetDialogItemColor(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBarImage), gv_bAR_CHANGELINGPROCESS_COLOR2, PlayerGroupAll());
            lv__width = FixedToInt((gv_bAR_CHANGELINGPROCESS_WIDHT * TimerGetRemaining(gf_GetChangelingTimer()) / gv_cHANGELING_TIME_DISGUISE_LIMIT));
        }
        else if (true) {
            Wait(0.0625, c_timeGame);
            continue;
        }
        if ((lv__width > 0)) {
            DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBarImage), PlayerGroupAll(), true);
            DialogControlSetSize(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBarImage), PlayerGroupAll(), lv__width, gv_bAR_CHANGELINGPROCESS_HEIGHT);
        }
        else {
            DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBarImage), PlayerGroupAll(), false);
        }
        Wait(0.0625, c_timeGame);
    }
    DialogControlSetVisible(gf_GetCharacterStatusPanelElement(ge_CharacterStatusPanelElement_ChangelingProcessBar), PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateChangelingCharacterHUD_Init () {
    gt_UpdateChangelingCharacterHUD = TriggerCreate("gt_UpdateChangelingCharacterHUD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Character Property Changed
//--------------------------------------------------------------------------------------------------
bool gt_CharacterPropertyChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    fixed lv__damaged;
    int lv__barsize;
    fixed lv__range;
    // Automatic Variable Declarations
    int auto28D366E8_val;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__damaged = EventUnitPropertyChangeFixed();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__user))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__user)))) {
            return false;
        }
        if (!((gv_characterHUDDailog != c_invalidDialogId))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto28D366E8_val = EventUnitProperty();
    if (auto28D366E8_val == c_unitPropLife) {
        gf_UpdateCharacterHealthBar(lv__user, gf_GetUserwithObservers(lv__user));
        if ((lv__damaged > 0.0)) {
            return true;
        }
        DialogControlCreateInPanel(gv_characterStatusPanel.lv_panel, c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_kerrigan_healthbar_fill.dds", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), FixedToInt(gf_CalcualteUnitPropertyBarWidth(UnitGetPropertyFixed(gf_CharacterUnit(lv__user), c_unitPropLife, c_unitPropNormal), (-1 * lv__damaged), gv_bAR_HEALTH_WIDHT)), (gv_bAR_HEALTH_HEIGHT-2));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), gf_GetUserwithObservers(lv__user), true);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, gv_characterStatusPanel.lv_healthBarImage, c_anchorBottomRight, (-1*gf_CalcualteUnitPropertyBarWidth(UnitGetPropertyFixed(gf_CharacterUnit(lv__user), c_unitPropLife, c_unitPropNormal), UnitGetPropertyFixed(gf_CharacterUnit(lv__user), c_unitPropLife, c_unitPropCurrent), gv_bAR_HEALTH_WIDHT)), 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 520, PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
        Wait(1.1, c_timeGame);
        DialogControlDestroy(DialogControlLastCreated());
    }
    else if (auto28D366E8_val == c_unitPropEnergy) {
        gf_UpdateCharacterStaminaBar(lv__user, gf_GetUserwithObservers(lv__user));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CharacterPropertyChanged_Init () {
    gt_CharacterPropertyChanged = TriggerCreate("gt_CharacterPropertyChanged_Func");
    TriggerAddEventUnitProperty(gt_CharacterPropertyChanged, null, c_unitPropLife);
    TriggerAddEventUnitProperty(gt_CharacterPropertyChanged, null, c_unitPropEnergy);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Device HUD
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforDeviceHUD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreatePlainDialog();
    gv_deviceHUDDialog = DialogLastCreated();
    TriggerExecute(gt_InitializationforPanelofAberrationCage, true, false);
    TriggerExecute(gt_InitializationforPanelofArchive, true, false);
    TriggerExecute(gt_InitializationforPanelofIncinerator, true, false);
    TriggerExecute(gt_InitializationforPanelofMedicalBot, true, false);
    TriggerExecute(gt_InitializationforPanelofMonitor, true, false);
    TriggerExecute(gt_InitializationforPanelofPowerGeneratorController, true, false);
    TriggerExecute(gt_InitializationforPanelofRDT, true, false);
    TriggerExecute(gt_InitializationforPanelofSateliteController, true, false);
    TriggerExecute(gt_InitializationforPanelofEmergencyControlConsole, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforDeviceHUD_Init () {
    gt_InitializationforDeviceHUD = TriggerCreate("gt_InitializationforDeviceHUD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Aberration Cage
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofAberrationCage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__innerPanel;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__innerPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_deviceHUDDialog, 600, 400);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_aberrationCagePanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "InnerPanel");
    lv__innerPanel = DialogControlLastCreated();
    gf_CreateCustomizedProgressBarInPanel(lv__innerPanel);
    gv_aberrationCagePanel.lv_progressBar = DialogControlLastCreated();
    gf_HookupNameLabelinCustomizedProgressBar(DialogControlLastCreated());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/43AC52F7"), PlayerGroupAll());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofAberrationCage_Init () {
    gt_InitializationforPanelofAberrationCage = TriggerCreate("gt_InitializationforPanelofAberrationCage_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Archive
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofArchive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__innerPanel;
    int lv__recordingNumberFrame;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__innerPanel = c_invalidDialogControlId;
    lv__recordingNumberFrame = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlCreateFromTemplate(gv_deviceHUDDialog, c_triggerControlTypePanel, "_DeviceHUD/ArchiveFrame");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 20);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_archivePanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(gv_archivePanel.lv_panel, c_triggerControlTypePanel, "InnerPanel");
    lv__innerPanel = DialogControlLastCreated();
    DialogControlHookup(lv__innerPanel, c_triggerControlTypeListBox, "RecordListBox");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(""));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    gv_archivePanel.lv_list = DialogControlLastCreated();
    DialogControlHookup(lv__innerPanel, c_triggerControlTypeButton, "TransmitButton");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9D663828"), PlayerGroupAll());
    gv_archivePanel.lv_button = DialogControlLastCreated();
    DialogControlHookup(lv__innerPanel, c_triggerControlTypePanel, "RecordingNumberFrame");
    lv__recordingNumberFrame = DialogControlLastCreated();
    DialogControlHookup(lv__recordingNumberFrame, c_triggerControlTypeLabel, "TitleLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DF9AFFF2"), PlayerGroupAll());
    DialogControlHookup(lv__recordingNumberFrame, c_triggerControlTypeLabel, "NumberLabel");
    gv_archivePanel.lv_numberLabel = DialogControlLastCreated();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofArchive_Init () {
    gt_InitializationforPanelofArchive = TriggerCreate("gt_InitializationforPanelofArchive_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Panel of Archive
//--------------------------------------------------------------------------------------------------
bool gt_UpdatePanelofArchive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UpdateArchivePanel();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdatePanelofArchive_Init () {
    gt_UpdatePanelofArchive = TriggerCreate("gt_UpdatePanelofArchive_Func");
    gf_AccessLevelChanged(gt_UpdatePanelofArchive);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Archive Button
//--------------------------------------------------------------------------------------------------
bool gt_UpdateArchiveButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UpdateArchiveTransmitButton();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateArchiveButton_Init () {
    gt_UpdateArchiveButton = TriggerCreate("gt_UpdateArchiveButton_Func");
    TriggerAddEventTimer(gt_UpdateArchiveButton, gf_ArchiveTimer());
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Incinerator
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofIncinerator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_deviceHUDDialog, 600, 400);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_incineratorPanel.lv_panel = DialogControlLastCreated();
    gf_CreateCustomizedButtonInPanel(DialogControlLastCreated(), StringExternal("Param/Value/407B16E3"));
    TextExpressionSetToken("Param/Expression/FD6CD3D5", "A", IntToText(gv_iNCI_TIME_PREPARING));
    TextExpressionSetToken("Param/Expression/FD6CD3D5", "B", IntToText(gv_iNCI_TIME_STABILIZING));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/FD6CD3D5"), PlayerGroupAll());
    gv_incineratorPanel.lv_button = DialogControlLastCreated();
    TimerWindowCreate(gf_IncineratorTimer(), StringExternal("Param/Value/63EC8A7C"), false, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 150);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    gv_incineratorPanel.lv_timerWindow = TimerWindowLastCreated();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofIncinerator_Init () {
    gt_InitializationforPanelofIncinerator = TriggerCreate("gt_InitializationforPanelofIncinerator_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Medical Bot
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofMedicalBot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__tempPanel;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__tempPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_deviceHUDDialog, 600, 400);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_medicalBotPanel.lv_panel = DialogControlLastCreated();
    gf_CreateCustomizedProgressBarInPanel(DialogControlLastCreated());
    gv_medicalBotPanel.lv_progressBar = DialogControlLastCreated();
    gf_HookupNameLabelinCustomizedProgressBar(gv_medicalBotPanel.lv_progressBar);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C3BA3ABC"), PlayerGroupAll());
    gv_medicalBotPanel.lv_progressBarNameLabel = DialogControlLastCreated();
    gf_SetColorofBarImageinProgressBar(gv_medicalBotPanel.lv_progressBar, Color(100.00, 100.00, 0.00));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofMedicalBot_Init () {
    gt_InitializationforPanelofMedicalBot = TriggerCreate("gt_InitializationforPanelofMedicalBot_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Monitor
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__monitorIndex;
    int lv__cellIndex;
    // Automatic Variable Declarations
    playergroup auto71543D86_g;
    int auto01BC2A96_ae;
    const int auto01BC2A96_ai = 1;
    int autoCE4686B0_ae;
    const int autoCE4686B0_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    auto71543D86_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto71543D86_g, lv__i);
        if (lv__i < 0) { break; }
        DialogCreate(150, 50, c_anchorCenter, 0, 0, true);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/39C1C80A"), "");
        gv_monitorTrackingDialog[gf_GetUserIndex(lv__i)] = DialogLastCreated();
    }
    auto01BC2A96_ae = gv_monitorIndexLast;
    lv__monitorIndex = 0;
    for ( ; ( (auto01BC2A96_ai >= 0 && lv__monitorIndex <= auto01BC2A96_ae) || (auto01BC2A96_ai < 0 && lv__monitorIndex >= auto01BC2A96_ae) ) ; lv__monitorIndex += auto01BC2A96_ai ) {
        gf_CreatePlainPanelInDialog(gv_deviceHUDDialog);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_monitorPanelArray[lv__monitorIndex].lv_panel = DialogControlLastCreated();
        DialogControlCreateInPanel(gv_monitorPanelArray[lv__monitorIndex].lv_panel, c_triggerControlTypeImage);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 100, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
        gv_monitorPanelArray[lv__monitorIndex].lv_blackImage = DialogControlLastCreated();
        DialogControlCreateInPanel(gv_monitorPanelArray[lv__monitorIndex].lv_panel, c_triggerControlTypeLabel);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_monitorPanelArray[lv__monitorIndex].lv_panel, c_anchorCenter, 0, 0);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 60);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_EscapeLabelText", PlayerGroupAll());
        libNtve_gf_SetDialogItemTextWriteout(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemTextWriteoutDuration(DialogControlLastCreated(), 0.2, PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_monitorPanelArray[lv__monitorIndex].lv_restrictLabel = DialogControlLastCreated();
        DialogControlCreateInPanel(gv_monitorPanelArray[lv__monitorIndex].lv_panel, c_triggerControlTypePulldown);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 50, 50);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 75);
        gv_monitorPanelArray[lv__monitorIndex].lv_pulldown = DialogControlLastCreated();
        autoCE4686B0_ae = (gv_initializedCellCounter-1);
        lv__cellIndex = 0;
        for ( ; ( (autoCE4686B0_ai >= 0 && lv__cellIndex <= autoCE4686B0_ae) || (autoCE4686B0_ai < 0 && lv__cellIndex >= autoCE4686B0_ae) ) ; lv__cellIndex += autoCE4686B0_ai ) {
            TextExpressionSetToken("Param/Expression/A654960A", "A", gf_GetCellName(gf_GetCellbyIndex(lv__cellIndex)));
            DialogControlAddItem(gv_monitorPanelArray[lv__monitorIndex].lv_pulldown, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/A654960A"));
        }
        DialogControlSelectItem(gv_monitorPanelArray[lv__monitorIndex].lv_pulldown, PlayerGroupAll(), gf_GetPulldownItemIndexforMonitoringCell(gf_GetMonitor(lv__monitorIndex)));
        TimerWindowCreate(gv_monitorInfoArray[lv__monitorIndex].lv_targetingDelayTimer, StringExternal("Param/Value/B478FE65"), false, false);
        TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 75);
        TimerWindowSetTimer(TimerWindowLastCreated(), gv_monitorInfoArray[lv__monitorIndex].lv_targetingDelayTimer);
        TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
        TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
        gv_monitorPanelArray[lv__monitorIndex].lv_timerWindow = TimerWindowLastCreated();
        gf_UpdatePanelofMonitor(gv_monitorInfoArray[lv__monitorIndex].lv_unit);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofMonitor_Init () {
    gt_InitializationforPanelofMonitor = TriggerCreate("gt_InitializationforPanelofMonitor_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Tracking Dialog Of Security Monitor
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTrackingDialogOfSecurityMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    unit lv__character;
    unit lv__u;
    // Automatic Variable Declarations
    unitgroup autoA1274438_g;
    int autoA1274438_u;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__character = EventUnit();
    // Conditions
    if (testConds) {
        if (!(gf_IsCharacter(lv__character))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_IsUserAlive(lv__user)) {
        autoA1274438_g = gf_AllDevicesofDeviceType(ge_DeviceType_Monitor);
        autoA1274438_u = UnitGroupCount(autoA1274438_g, c_unitCountAll);
        for (;; autoA1274438_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoA1274438_g, autoA1274438_u);
            if (lv__u == null) { break; }
            if ((gf_GetCellbyRegion(EventUnitRegion()) == gf_GetMonitoringCell(lv__u))) {
                gf_UpdateTrackingDialogOfSecurityMonitor(lv__u);
            }
        }
    }
    else {
        DialogSetVisible(gf_MonitorTrackingDialog(lv__user), PlayerGroupAll(), false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateTrackingDialogOfSecurityMonitor_Init () {
    gt_UpdateTrackingDialogOfSecurityMonitor = TriggerCreate("gt_UpdateTrackingDialogOfSecurityMonitor_Func");
    gf_UnitEntersLeavesCell(gt_UpdateTrackingDialogOfSecurityMonitor, true);
    gf_UnitEntersLeavesCell(gt_UpdateTrackingDialogOfSecurityMonitor, false);
    TriggerAddEventUnitDied(gt_UpdateTrackingDialogOfSecurityMonitor, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Tracking Dialog For Changeling Cloak
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTrackingDialogForChangelingCloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__monitor;
    // Automatic Variable Declarations
    unitgroup auto0CDBA44F_g;
    int auto0CDBA44F_u;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(gf_IsChangelingUser(UnitGetOwner(EventUnit())))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        DialogSetVisible(gf_MonitorTrackingDialog(gf_GetChangelingPlayer()), PlayerGroupAll(), false);
    }
    else {
        auto0CDBA44F_g = gf_AllDevicesofDeviceType(ge_DeviceType_Monitor);
        auto0CDBA44F_u = UnitGroupCount(auto0CDBA44F_g, c_unitCountAll);
        for (;; auto0CDBA44F_u -= 1) {
            lv__monitor = UnitGroupUnitFromEnd(auto0CDBA44F_g, auto0CDBA44F_u);
            if (lv__monitor == null) { break; }
            if ((gf_GetCellwhereUnitExists(gf_CharacterUnit(gf_GetChangelingPlayer())) != ge_Cell_None) && (gf_GetCellwhereUnitExists(gf_CharacterUnit(gf_GetChangelingPlayer())) == gf_GetMonitoringCell(lv__monitor))) {
                gf_UpdateTrackingDialogOfSecurityMonitor(lv__monitor);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateTrackingDialogForChangelingCloak_Init () {
    gt_UpdateTrackingDialogForChangelingCloak = TriggerCreate("gt_UpdateTrackingDialogForChangelingCloak_Func");
    TriggerAddEventUnitBehaviorChange(gt_UpdateTrackingDialogForChangelingCloak, null, "ChangelingCloack", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_UpdateTrackingDialogForChangelingCloak, null, "PowerStateOff", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_UpdateTrackingDialogForChangelingCloak, null, "ChangelingCloack", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_UpdateTrackingDialogForChangelingCloak, null, "PowerStateOff", c_unitBehaviorChangeDeactivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Settings For Panel of Monitor
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingsForPanelofMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto66674467_g;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto66674467_g = gf_AliveUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto66674467_g, lv__i);
        if (lv__i < 0) { break; }
        DialogSetPositionRelativeToUnitWithAnchor(gv_monitorTrackingDialog[gf_GetUserIndex(lv__i)], gf_CharacterUnit(lv__i), "Ref_Overhead", c_anchorBottom, 0, 0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingsForPanelofMonitor_Init () {
    gt_MainGameSettingsForPanelofMonitor = TriggerCreate("gt_MainGameSettingsForPanelofMonitor_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Power Generator Controller
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofPowerGeneratorController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__tempPanel;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__tempPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_deviceHUDDialog, 600, 400);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_powerControllerPanel.lv_panel = DialogControlLastCreated();
    gf_CreateCustomizedButtonInPanel(gv_powerControllerPanel.lv_panel, gv_pGC_TEXT_SHUTDOWN);
    TextExpressionSetToken("Param/Expression/1AD22C4D", "A", IntToText(gv_pOWER_CONTROLLER_TIME_SHUT_DOWN));
    TextExpressionSetToken("Param/Expression/1AD22C4D", "B", IntToText(gv_pOWER_CONTROLLER_TIME_STABILIZING));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/1AD22C4D"), PlayerGroupAll());
    gv_powerControllerPanel.lv_button = DialogControlLastCreated();
    TimerWindowCreate(gf_PowerControllerTimer(), StringExternal("Param/Value/E127F88A"), false, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 100);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    gv_powerControllerPanel.lv_timerWindow = TimerWindowLastCreated();
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofPowerGeneratorController_Init () {
    gt_InitializationforPanelofPowerGeneratorController = TriggerCreate("gt_InitializationforPanelofPowerGeneratorController_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of RDT
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofRDT_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__innerPanel;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__innerPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_deviceHUDDialog, 600, 400);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_rdtPanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "InnerPanel");
    lv__innerPanel = DialogControlLastCreated();
    gf_CreateCustomizedButtonInPanel(lv__innerPanel, StringExternal("Param/Value/3F648837"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D83F4DF3"), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv__innerPanel, c_anchorCenter, 0, 0);
    gv_rdtPanel.lv_button = DialogControlLastCreated();
    gf_CreateCustomizedProgressBarInPanel(lv__innerPanel);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv__innerPanel, c_anchorCenter, 0, 0);
    gv_rdtPanel.lv_progressBar = DialogControlLastCreated();
    gf_HookupNameLabelinCustomizedProgressBar(gv_rdtPanel.lv_progressBar);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/08F43ECE"), PlayerGroupAll());
    gf_HookupBarImageinCustomizedProgressBar(gv_rdtPanel.lv_progressBar);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(14.12, 85.88, 32.16), PlayerGroupAll());
    TimerWindowCreate(gv_rdtInfo.lv_timer, StringExternal("Param/Value/7435CDCC"), false, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 100);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    gv_rdtPanel.lv_timerWindow = TimerWindowLastCreated();
    gf_UpdatePanelofRDT();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofRDT_Init () {
    gt_InitializationforPanelofRDT = TriggerCreate("gt_InitializationforPanelofRDT_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Emergency Control Console
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofEmergencyControlConsole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    int lv__tempPanel;
    // Automatic Variable Declarations
    int autoBBA95005_ae;
    const int autoBBA95005_ai = 1;
    // Variable Initialization
    lv__tempPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_deviceHUDDialog, 1000, 850);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 20);
    gv_emergencyControlConsolePanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(gv_emergencyControlConsolePanel.lv_panel, c_triggerControlTypePanel, "InnerPanel");
    lv__tempPanel = DialogControlLastCreated();
    autoBBA95005_ae = (gv_initializedCellCounter-1);
    lv__i = 0;
    for ( ; ( (autoBBA95005_ai >= 0 && lv__i <= autoBBA95005_ae) || (autoBBA95005_ai < 0 && lv__i >= autoBBA95005_ae) ) ; lv__i += autoBBA95005_ai ) {
        DialogControlCreateInPanel(lv__tempPanel, c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 700, 60);
        if ((lv__i == 0)) {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv__tempPanel, c_anchorTop, 0, 10);
        }
        else {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, gv_emergencyControlConsolePanel.lv_panelItem[(lv__i-1)], c_anchorBottom, 0, 0);
        }
        gv_emergencyControlConsolePanel.lv_panelItem[lv__i] = DialogControlLastCreated();
        DialogControlCreateInPanel(gv_emergencyControlConsolePanel.lv_panelItem[lv__i], c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 0, 0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_SecurityControllerCellName", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), gf_GetCellName(gf_GetCellbyIndex(lv__i)), PlayerGroupAll());
        DialogControlCreateInPanel(gv_emergencyControlConsolePanel.lv_panelItem[lv__i], c_triggerControlTypeButton);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, 0, 0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_SecurityControllerButton", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_load_frame_columtitle_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_load_frame_columtitle_normaloverpressedover.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lv__i, PlayerGroupAll());
        gv_emergencyControlConsolePanel.lv_controlButtonArray[lv__i] = DialogControlLastCreated();
    }
    TimerWindowCreate(gv_emergencyControlConsoleInfo.lv_timer, StringExternal("Param/Value/A7BFE6FB"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 150);
    TimerWindowShowBorder(TimerWindowLastCreated(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    gv_emergencyControlConsolePanel.lv_timerWindow = TimerWindowLastCreated();
    gf_UpdatePanelofEmergencyControlConsole();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofEmergencyControlConsole_Init () {
    gt_InitializationforPanelofEmergencyControlConsole = TriggerCreate("gt_InitializationforPanelofEmergencyControlConsole_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Satelite Controller
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofSateliteController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_deviceHUDDialog, 600, 400);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_sateliteControllerPanel.lv_panel = DialogControlLastCreated();
    gf_CreateCustomizedButtonInPanel(DialogControlLastCreated(), StringExternal("Param/Value/2A59E981"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/24D4BEF8"), PlayerGroupAll());
    gv_sateliteControllerPanel.lv_button = DialogControlLastCreated();
    TimerWindowCreate(gv_sateliteControllerInfo.lv_timer, StringExternal("Param/Value/A223422B"), false, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 150);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    gv_sateliteControllerPanel.lv_timerWindow = TimerWindowLastCreated();
    gf_UpdatePanelofSateliteController();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofSateliteController_Init () {
    gt_InitializationforPanelofSateliteController = TriggerCreate("gt_InitializationforPanelofSateliteController_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Gat Unlock Process
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofGatUnlockProcess_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__innerPanel;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__innerPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreatePlainDialog();
    gv_gateUnlockProcessPanel.lv_dialog = DialogLastCreated();
    gf_CreateCustomizedPanelInDialog(gv_gateUnlockProcessPanel.lv_dialog, 600, 400);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "InnerPanel");
    lv__innerPanel = DialogControlLastCreated();
    gf_CreateCustomizedProgressBarInPanel(lv__innerPanel);
    gv_gateUnlockProcessPanel.lv_processBar = DialogControlLastCreated();
    gf_HookupNameLabelinCustomizedProgressBar(gv_gateUnlockProcessPanel.lv_processBar);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8FC3AB84"), PlayerGroupAll());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofGatUnlockProcess_Init () {
    gt_InitializationforPanelofGatUnlockProcess = TriggerCreate("gt_InitializationforPanelofGatUnlockProcess_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Minimap
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforMinimap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__t;
    int lv__i;
    point lv__p;
    // Automatic Variable Declarations
    const int auto0F607A6B_ae = gv_cELL_INDEX_MAX;
    const int auto0F607A6B_ai = 1;
    const int auto1B3529E7_ae = gv_aBCAGE_ARRAY_INDEX_MAX;
    const int auto1B3529E7_ai = 1;
    const int auto002B2681_ae = gv_uSER_INDEX_MAX;
    const int auto002B2681_ai = 1;
    // Variable Initialization
    lv__t = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(gv_mINIMAP_SIZE_X, gv_mINIMAP_SIZE_Y, c_anchorTopRight, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_customMinimap.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_mINIMAP_SIZE_X, gv_mINIMAP_SIZE_Y, c_anchorCenter, 0, 0, StringToText(""), "EntireMapImageCompleted.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    gv_customMinimap.lv_mapImage = DialogControlLastCreated();
    lv__i = 0;
    for ( ; ( (auto0F607A6B_ai >= 0 && lv__i <= auto0F607A6B_ae) || (auto0F607A6B_ai < 0 && lv__i >= auto0F607A6B_ae) ) ; lv__i += auto0F607A6B_ai ) {
        lv__p = gf_GetCellPointbyIndex(lv__i);
        if ((lv__p != null)) {
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
            TextExpressionSetToken("Param/Expression/73A0E837", "A", gf_GetCellName(gf_GetCellbyIndex(lv__i)));
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/73A0E837"), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_MinimapCellNameLabel", PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
            gf_UpdateDialogItemPositionInCustomMimimap(DialogControlLastCreated(), lv__p, PlayerGroupAll());
            gv_customMinimap.lv_celLabelArray[lv__i] = DialogControlLastCreated();
        }
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/BE3F2651"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_MinimapCellNameLabel", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    gf_UpdateDialogItemPositionInCustomMimimap(DialogControlLastCreated(), PointFromId(1067109248), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_mINIMAP_ICON_LENGTH, gv_mINIMAP_ICON_LENGTH, c_anchorBottomLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-unit-terran-marine.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_customMinimap.lv_characterIconImage = DialogControlLastCreated();
    lv__i = 0;
    for ( ; ( (auto1B3529E7_ai >= 0 && lv__i <= auto1B3529E7_ae) || (auto1B3529E7_ai < 0 && lv__i >= auto1B3529E7_ae) ) ; lv__i += auto1B3529E7_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_mINIMAP_ICON_LENGTH, gv_mINIMAP_ICON_LENGTH, c_anchorBottomLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-unit-zerg-aberration.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_customMinimap.lv_abberationImage[lv__i] = DialogControlLastCreated();
    }
    lv__i = 0;
    for ( ; ( (auto002B2681_ai >= 0 && lv__i <= auto002B2681_ae) || (auto002B2681_ai < 0 && lv__i >= auto002B2681_ae) ) ; lv__i += auto002B2681_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_mINIMAP_ICON_LENGTH, gv_mINIMAP_ICON_LENGTH, c_anchorBottomLeft, 50, 50, StringToText(""), "Assets\\Textures\\ping3.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_customMinimap.lv_sateliteTargetImage[lv__i] = DialogControlLastCreated();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforMinimap_Init () {
    gt_InitializationforMinimap = TriggerCreate("gt_InitializationforMinimap_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Game Setting for Minimap
//--------------------------------------------------------------------------------------------------
bool gt_MainGameSettingforMinimap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    const int auto0740492D_ae = gv_aBCAGE_ARRAY_INDEX_MAX;
    const int auto0740492D_ai = 1;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetDialogItemImage(gv_customMinimap.lv_characterIconImage, "Assets\\Textures\\btn-unit-zerg-changeling.dds", gf_GetUserwithObservers(gf_GetChangelingPlayer()));
    lv__i = 0;
    for ( ; ( (auto0740492D_ai >= 0 && lv__i <= auto0740492D_ae) || (auto0740492D_ai < 0 && lv__i >= auto0740492D_ae) ) ; lv__i += auto0740492D_ai ) {
        DialogControlSetVisible(gv_customMinimap.lv_abberationImage[lv__i], gf_GetUserwithObservers(gf_GetChangelingPlayer()), true);
        gf_UpdateDialogItemPositionInCustomMimimap(gv_customMinimap.lv_abberationImage[lv__i], UnitGetPosition(gf_GetAberrationCageBuildingbyIndex(lv__i)), PlayerGroupAll());
    }
    TriggerExecute(gt_LoopforUpdateMinimap, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainGameSettingforMinimap_Init () {
    gt_MainGameSettingforMinimap = TriggerCreate("gt_MainGameSettingforMinimap_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Loop for Update Minimap
//--------------------------------------------------------------------------------------------------
bool gt_LoopforUpdateMinimap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(0.0625, c_timeGame);
    while ((gf_GameState() == ge_GameState_MainGame)) {
        gf_CustomMinimapTickActions();
        Wait(0.0625, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoopforUpdateMinimap_Init () {
    gt_LoopforUpdateMinimap = TriggerCreate("gt_LoopforUpdateMinimap_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Minimap Key Pressed
//--------------------------------------------------------------------------------------------------
bool gt_MinimapKeyPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__userIndex;
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__userIndex = gf_GetUserIndex(lv__user);
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!(((gf_CharacterState(lv__user) == ge_PlayerCharacterState_Move) || (gf_CharacterState(lv__user) == ge_PlayerCharacterState_Idle)))) {
            return false;
        }
        if (!((gf_CanControlMinimap(lv__user) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_customMinimap.lv_isVisible[lv__userIndex] == false)) {
        gf_ShowHideCustomMinimap(lv__user, true);
    }
    else {
        gf_ShowHideCustomMinimap(lv__user, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MinimapKeyPressed_Init () {
    gt_MinimapKeyPressed = TriggerCreate("gt_MinimapKeyPressed_Func");
    TriggerAddEventKeyPressed(gt_MinimapKeyPressed, c_playerAny, gv_bUTTON_MAP_VIEW, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hide Icon Image of MInimap
//--------------------------------------------------------------------------------------------------
bool gt_HideIconImageofMInimap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__userIndex;
    int lv__aberrationIndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__unit = EventUnit();
    lv__userIndex = gf_GetUserIndex(UnitGetOwner(lv__unit));
    lv__aberrationIndex = gf_GetAberrationCageIndexbyAberration(lv__unit);
    // Conditions
    if (testConds) {
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!(((lv__userIndex != -1) || (lv__aberrationIndex != -1)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((lv__userIndex != -1)) {
        DialogControlSetVisible(gv_customMinimap.lv_sateliteTargetImage[lv__userIndex], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(gv_customMinimap.lv_abberationImage[lv__aberrationIndex], PlayerGroupAll(), false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HideIconImageofMInimap_Init () {
    gt_HideIconImageofMInimap = TriggerCreate("gt_HideIconImageofMInimap_Func");
    TriggerAddEventUnitDied(gt_HideIconImageofMInimap, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Utility HUD
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforUtilityHUD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreatePlainDialog();
    gv_utilityDialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 1000);
    TriggerExecute(gt_InitializationforUtilitySelectionPanel, true, false);
    TriggerExecute(gt_InitializationforPanelofHelpText, true, false);
    TriggerExecute(gt_InitializationforPanelofBlacklist, true, false);
    TriggerExecute(gt_InitializationforPanelofChatSettings, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforUtilityHUD_Init () {
    gt_InitializationforUtilityHUD = TriggerCreate("gt_InitializationforUtilityHUD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Utility Selection Panel
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforUtilitySelectionPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__innerPanel;
    int lv__i;
    // Automatic Variable Declarations
    const int auto62C98C79_ae = gv_sELECTION_MENU_ITEM_INDEX_MAX;
    const int auto62C98C79_ai = 1;
    // Variable Initialization
    lv__innerPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_utilityDialog, 510, (160 + gv_sELECTION_MENU_ITEM_HEIGHT * (gv_sELECTION_MENU_ITEM_INDEX_MAX + 1)));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_selectionPanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "InnerPanel");
    lv__innerPanel = DialogControlLastCreated();
    lv__i = 0;
    for ( ; ( (auto62C98C79_ai >= 0 && lv__i <= auto62C98C79_ae) || (auto62C98C79_ai < 0 && lv__i >= auto62C98C79_ae) ) ; lv__i += auto62C98C79_ai ) {
        gf_CreateCustomizedButtonInPanel(lv__innerPanel, null);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "_UtilitySelectionButton", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 350, gv_sELECTION_MENU_ITEM_HEIGHT);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv__innerPanel, c_anchorTop, 0, (gv_sELECTION_MENU_ITEM_HEIGHT * lv__i));
        gv_selectionPanel.lv_menuItems[lv__i] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemText(gv_selectionPanel.lv_menuItems[0], StringExternal("Param/Value/CFDDF97C"), PlayerGroupAll());
    gv_selectionPanel.lv_menuValueTable[0] = ge_UtilityPanelType_HelpPanel;
    libNtve_gf_SetDialogItemText(gv_selectionPanel.lv_menuItems[1], StringExternal("Param/Value/675DE471"), PlayerGroupAll());
    gv_selectionPanel.lv_menuValueTable[1] = ge_UtilityPanelType_BlacklistPanel;
    libNtve_gf_SetDialogItemText(gv_selectionPanel.lv_menuItems[2], StringExternal("Param/Value/805358D8"), PlayerGroupAll());
    gv_selectionPanel.lv_menuValueTable[2] = ge_UtilityPanelType_ChatSettingPanel;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforUtilitySelectionPanel_Init () {
    gt_InitializationforUtilitySelectionPanel = TriggerCreate("gt_InitializationforUtilitySelectionPanel_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Select Utility Panel
//--------------------------------------------------------------------------------------------------
bool gt_SelectUtilityPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__utilityPanelType;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__utilityPanelType = gf_GetUtilityPanelTypeofSelectionPanelMenuItem(EventDialogControl());
    // Conditions
    if (testConds) {
        if (!((lv__utilityPanelType != ge_UtilityPanelType_None))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ShowHideUtilityHUD(lv__user, true, lv__utilityPanelType);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SelectUtilityPanel_Init () {
    gt_SelectUtilityPanel = TriggerCreate("gt_SelectUtilityPanel_Func");
    TriggerAddEventDialogControl(gt_SelectUtilityPanel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Help Text
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofHelpText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__innerPanel;
    unit lv__u;
    int lv__deviceType;
    int lv__deviceTypeIndex;
    // Automatic Variable Declarations
    unitgroup auto8FCA306B_g;
    int auto8FCA306B_u;
    // Variable Initialization
    lv__innerPanel = c_invalidDialogControlId;
    lv__deviceType = ge_DeviceType_None;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlCreateFromTemplate(gv_utilityDialog, c_triggerControlTypePanel, "_UtilityHUD/HelpPanel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_helpTextPanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "InnerPanel");
    lv__innerPanel = DialogControlLastCreated();
    DialogControlHookup(lv__innerPanel, c_triggerControlTypeListBox, "ItemContainer");
    gv_helpTextPanel.lv_listBox = DialogControlLastCreated();
    DialogControlHookup(lv__innerPanel, c_triggerControlTypeLabel, "BodyTextArea");
    gv_helpTextPanel.lv_bodyTextLabel = DialogControlLastCreated();
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/9C76BC5D"));
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/B40506A4"));
    gv_helpTextPanel.lv_commandHelp.lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
    TextExpressionSetToken("Param/Expression/9E6D841B", "A", FixedToText(gv_cHANGELING_TIME_FOR_EAT, 0));
    gv_helpTextPanel.lv_commandHelp.lv_text = TextExpressionAssemble("Param/Expression/9E6D841B");
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/15C41B43"));
    gv_helpTextPanel.lv_synopsis.lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
    gv_helpTextPanel.lv_synopsis.lv_text = StringExternal("Param/Value/CA2D0A36");
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/78BAAAD7"));
    gv_helpTextPanel.lv_objectMarine.lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
    gv_helpTextPanel.lv_objectMarine.lv_text = StringExternal("Param/Value/4B9F26F5");
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/95956629"));
    gv_helpTextPanel.lv_objectChangeling.lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
    gv_helpTextPanel.lv_objectChangeling.lv_text = StringExternal("Param/Value/7D7A37BA");
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/78E73460"));
    gv_helpTextPanel.lv_legacyScoreHelp.lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
    gv_helpTextPanel.lv_legacyScoreHelp.lv_text = StringExternal("Param/Value/40E6D7D3");
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/F18D4A46"));
    gv_helpTextPanel.lv_blacklistHelp.lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
    gv_helpTextPanel.lv_blacklistHelp.lv_text = TextExpressionAssemble("Param/Expression/5BCAD4CA");
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/9DD7E980"));
    gv_helpTextPanel.lv_accountBanHelp.lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
    TextExpressionSetToken("Param/Expression/A195018D", "banManager", StringExternal("Param/Value/7F941951"));
    gv_helpTextPanel.lv_accountBanHelp.lv_text = TextExpressionAssemble("Param/Expression/A195018D");
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/ED9694DD"));
    auto8FCA306B_g = gf_AllDevices();
    auto8FCA306B_u = UnitGroupCount(auto8FCA306B_g, c_unitCountAll);
    for (;; auto8FCA306B_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto8FCA306B_g, auto8FCA306B_u);
        if (lv__u == null) { break; }
        lv__deviceType = gf_DeviceType(lv__u);
        lv__deviceTypeIndex = gf_DeviceTypeIndex(lv__deviceType);
        if ((lv__deviceTypeIndex != -1) && (gf_GetHelpTextPanelListBoxItemIndex(ge_HelpTextPanelItemType_Device, lv__deviceType) == -1)) {
            TextExpressionSetToken("Param/Expression/7E0FBCCE", "A", gf_DeviceName(lv__deviceType));
            DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/7E0FBCCE"));
            gv_helpTextPanel.lv_deviceHelp[lv__deviceTypeIndex].lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
            gv_helpTextPanel.lv_deviceHelp[lv__deviceTypeIndex].lv_text = gf_CreateDeviceHelpText(lv__deviceType);
        }
    }
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/C0B860FE"));
    DialogControlAddItem(gv_helpTextPanel.lv_listBox, PlayerGroupAll(), StringExternal("Param/Value/803C6878"));
    gv_helpTextPanel.lv_comment.lv_listBoxIndex = DialogControlGetItemCount(gv_helpTextPanel.lv_listBox, gv_pLAYER_NEUTRAL);
    gv_helpTextPanel.lv_comment.lv_text = TextExpressionAssemble("Param/Expression/9855A3AA");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofHelpText_Init () {
    gt_InitializationforPanelofHelpText = TriggerCreate("gt_InitializationforPanelofHelpText_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show Help Text
//--------------------------------------------------------------------------------------------------
bool gt_ShowHelpText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__lisxBox;
    text lv__helpText;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__lisxBox = EventDialogControl();
    lv__helpText = gf_GetHelpTextPanelTextbyListBoxItemIndex(DialogControlGetSelectedItem(lv__lisxBox, lv__user));
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__user))) {
            return false;
        }
        if (!((lv__lisxBox == gv_helpTextPanel.lv_listBox))) {
            return false;
        }
        if (!((lv__helpText != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetDialogItemText(gv_helpTextPanel.lv_bodyTextLabel, lv__helpText, PlayerGroupSingle(lv__user));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowHelpText_Init () {
    gt_ShowHelpText = TriggerCreate("gt_ShowHelpText_Func");
    TriggerAddEventDialogControl(gt_ShowHelpText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Blacklist
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofBlacklist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__innerPanel;
    int lv__tempPanel;
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto0B948F85_g;
    // Variable Initialization
    lv__innerPanel = c_invalidDialogControlId;
    lv__tempPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlCreateFromTemplate(gv_utilityDialog, c_triggerControlTypePanel, "_UtilityHUD/BlacklistPanel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_blacklistPanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "InnerPanel");
    lv__innerPanel = DialogControlLastCreated();
    DialogControlHookup(lv__innerPanel, c_triggerControlTypePulldown, "UserListDisplayTypePulldown");
    gv_blacklistPanel.lv_targetUserListTypePulldown = DialogControlLastCreated();
    DialogControlHookup(lv__innerPanel, c_triggerControlTypePanel, "LeftPanel");
    lv__tempPanel = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1A07DE4E"), PlayerGroupAll());
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeListBox, "UserListBox");
    gv_blacklistPanel.lv_targetUserListBox = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeEditBox, "HandleEditBox");
    gv_blacklistPanel.lv_targetUserHandleEditBox = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeButton, "ActionButton");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/B9703ED6"), PlayerGroupAll());
    gv_blacklistPanel.lv_addTargetUserButton = DialogControlLastCreated();
    DialogControlHookup(lv__innerPanel, c_triggerControlTypePanel, "RightPanel");
    lv__tempPanel = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2631D50D"), PlayerGroupAll());
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeListBox, "UserListBox");
    gv_blacklistPanel.lv_registeredUserListBox = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeEditBox, "HandleEditBox");
    gv_blacklistPanel.lv_registeredUserHandleEditBox = DialogControlLastCreated();
    DialogControlHookup(lv__tempPanel, c_triggerControlTypeButton, "ActionButton");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2C079A55"), PlayerGroupAll());
    gv_blacklistPanel.lv_removeRegisteredUserButton = DialogControlLastCreated();
    DialogControlAddItem(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListTypePulldown), PlayerGroupAll(), StringExternal("Param/Value/75BDCFFD"));
    DialogControlAddItem(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListTypePulldown), PlayerGroupAll(), StringExternal("Param/Value/93B2B8AB"));
    auto0B948F85_g = gf_AllPlayingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto0B948F85_g, lv__i);
        if (lv__i < 0) { break; }
        gf_UpdateBlacklistRegisteredUserListBox(lv__i);
    }
    DialogControlSelectItem(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListTypePulldown), PlayerGroupAll(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofBlacklist_Init () {
    gt_InitializationforPanelofBlacklist = TriggerCreate("gt_InitializationforPanelofBlacklist_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Blacklist Target User List Box
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBlacklistTargetUserListBox_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__user))) {
            return false;
        }
        if (!((EventDialogControl() == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListTypePulldown)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UpdateBlacklistTargetUserListBox(lv__user, DialogControlGetSelectedItem(EventDialogControl(), lv__user));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateBlacklistTargetUserListBox_Init () {
    gt_UpdateBlacklistTargetUserListBox = TriggerCreate("gt_UpdateBlacklistTargetUserListBox_Func");
    TriggerAddEventDialogControl(gt_UpdateBlacklistTargetUserListBox, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Handle Edit Box In Blacklist Panel
//--------------------------------------------------------------------------------------------------
bool gt_UpdateHandleEditBoxInBlacklistPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__selectedItemIndex;
    // Automatic Variable Declarations
    int auto54F3A28C_val;
    int auto9D965879_val;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__selectedItemIndex = DialogControlGetSelectedItem(EventDialogControl(), lv__user);
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__user))) {
            return false;
        }
        if (!(((EventDialogControl() == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListBox)) || (EventDialogControl() == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox))))) {
            return false;
        }
        if (!(((lv__selectedItemIndex >= 1) && (lv__selectedItemIndex <= DialogControlGetItemCount(EventDialogControl(), lv__user))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto54F3A28C_val = EventDialogControl();
    if (auto54F3A28C_val == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListBox)) {
        auto9D965879_val = gf_GetCurrentBlacklistTargetUserListType(lv__user);
        if (auto9D965879_val == ge_BlacklistTargetUserListType_CurrentUsers) {
            libNtve_gf_SetDialogItemEditorValue(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserHandleEditBox), gf_RecordedHandleofUser(gf_GetBlacklistTargetUserInCurrentUserList(lv__user, lv__selectedItemIndex)), PlayerGroupSingle(lv__user));
        }
        else if (auto9D965879_val == ge_BlacklistTargetUserListType_LastUsers) {
            libNtve_gf_SetDialogItemEditorValue(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserHandleEditBox), gf_GetUserHandleFromBlacklistBankbyKeyIndex(lv__user, gf_GetBlacklistBankKeyIndexFromListBox(lv__user, gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListBox), lv__selectedItemIndex), 0), PlayerGroupSingle(lv__user));
        }
        else {
            libNtve_gf_SetDialogItemEditorValue(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserHandleEditBox), "", PlayerGroupSingle(lv__user));
        }
    }
    else if (auto54F3A28C_val == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox)) {
        libNtve_gf_SetDialogItemEditorValue(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserHandleEditBox), gf_GetUserHandleFromBlacklistBankbyKeyIndex(lv__user, gf_GetBlacklistBankKeyIndexFromListBox(lv__user, gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox), lv__selectedItemIndex), 1), PlayerGroupSingle(lv__user));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateHandleEditBoxInBlacklistPanel_Init () {
    gt_UpdateHandleEditBoxInBlacklistPanel = TriggerCreate("gt_UpdateHandleEditBoxInBlacklistPanel_Func");
    TriggerAddEventDialogControl(gt_UpdateHandleEditBoxInBlacklistPanel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Add User To Blacklist
//--------------------------------------------------------------------------------------------------
bool gt_AddUserToBlacklist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__tempInt;
    int lv__selectedIItemndex;
    string lv__s;
    // Automatic Variable Declarations
    int auto4752E2B5_val;
    // Variable Initialization
    lv__user = EventPlayer();
    lv__tempInt = c_playerAny;
    lv__selectedIItemndex = DialogControlGetSelectedItem(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListBox), lv__user);
    lv__s = "";
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_AddUserToBlacklistButton)))) {
            return false;
        }
        if (!(((lv__selectedIItemndex >= 1) && (lv__selectedIItemndex <= DialogControlGetItemCount(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListBox), lv__user))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto4752E2B5_val = gf_GetCurrentBlacklistTargetUserListType(lv__user);
    if (auto4752E2B5_val == ge_BlacklistTargetUserListType_CurrentUsers) {
        if (((lv__selectedIItemndex >= 1) && (lv__selectedIItemndex <= PlayerGroupCount(gf_StartingUsers())))) {
            lv__tempInt = PlayerGroupPlayer(gf_StartingUsers(), lv__selectedIItemndex);
            if ((lv__tempInt != lv__user)) {
                if ((gf_IsUserinBlacklistBank(lv__user, lv__tempInt, 1) == false)) {
                    gf_AddUsertoBlacklist(lv__user, gf_RecordedUserName(lv__tempInt), gf_RecordedHandleofUser(lv__tempInt));
                }
                else {
                    gf_DisplayInformationMessage(StringExternal("Param/Value/64EE6CA2"), PlayerGroupSingle(lv__user));
                }
            }
            else {
                gf_DisplayInformationMessage(StringExternal("Param/Value/1FCA1B0C"), PlayerGroupSingle(lv__user));
            }
        }
    }
    else if (auto4752E2B5_val == ge_BlacklistTargetUserListType_LastUsers) {
        lv__tempInt = gf_GetBlacklistBankKeyIndexFromListBox(lv__user, gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_TargetUserListBox), lv__selectedIItemndex);
        lv__s = gf_GetUserHandleFromBlacklistBankbyKeyIndex(lv__user, lv__tempInt, 0);
        if ((lv__s != gf_RecordedHandleofUser(lv__user))) {
            if ((gf_IsHandleinBlacklistBank(lv__user, lv__s, 1) == false)) {
                gf_AddUsertoBlacklist(lv__user, gf_GetUserNameFromBlacklistBank(lv__user, lv__s, 0), lv__s);
            }
            else {
                gf_DisplayInformationMessage(StringExternal("Param/Value/15681390"), PlayerGroupSingle(lv__user));
            }
        }
        else {
            gf_DisplayInformationMessage(StringExternal("Param/Value/98CDF2C1"), PlayerGroupSingle(lv__user));
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AddUserToBlacklist_Init () {
    gt_AddUserToBlacklist = TriggerCreate("gt_AddUserToBlacklist_Func");
    TriggerAddEventDialogControl(gt_AddUserToBlacklist, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Remove User From Blacklist
//--------------------------------------------------------------------------------------------------
bool gt_RemoveUserFromBlacklist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__selectedIItemndex;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__selectedIItemndex = DialogControlGetSelectedItem(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox), lv__user);
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RemoveUserFromBlacklistButton)))) {
            return false;
        }
        if (!(((lv__selectedIItemndex >= 1) && (lv__selectedIItemndex <= DialogControlGetItemCount(gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox), lv__user))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RemoveUserfromBlacklist(lv__user, gf_GetUserHandleFromBlacklistBankbyKeyIndex(lv__user, gf_GetBlacklistBankKeyIndexFromListBox(lv__user, gf_GetBlacklistPanelElement(ge_BlacklistPanelElement_RegisteredUserListBox), lv__selectedIItemndex), 1));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RemoveUserFromBlacklist_Init () {
    gt_RemoveUserFromBlacklist = TriggerCreate("gt_RemoveUserFromBlacklist_Func");
    TriggerAddEventDialogControl(gt_RemoveUserFromBlacklist, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Panel of Chat Settings
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforPanelofChatSettings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__innerPanel;
    int lv__tempPanel;
    int lv__i;
    int lv__tempInt;
    int lv__cnt;
    // Automatic Variable Declarations
    playergroup auto0B665C7D_g;
    // Variable Initialization
    lv__innerPanel = c_invalidDialogControlId;
    lv__tempPanel = c_invalidDialogControlId;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateCustomizedPanelInDialog(gv_utilityDialog, 650, (160 + gv_cHAT_SETTING_PANEL_ITEM_HEIGHT * (gv_uSER_COUNT_MAX)));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_chatSettingPanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "InnerPanel");
    lv__innerPanel = DialogControlLastCreated();
    auto0B665C7D_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto0B665C7D_g, lv__i);
        if (lv__i < 0) { break; }
        DialogControlCreateInPanelFromTemplate(lv__innerPanel, c_triggerControlTypePanel, "_UtilityHUD/ChatSettingsPanelItem");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv__innerPanel, c_anchorTop, 0, (gv_cHAT_SETTING_PANEL_ITEM_HEIGHT * lv__cnt));
        lv__tempPanel = DialogControlLastCreated();
        DialogControlHookup(lv__tempPanel, c_triggerControlTypeLabel, "UserNameLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), gf_RecordedUserNamewithColor(lv__i), PlayerGroupAll());
        DialogControlHookup(lv__tempPanel, c_triggerControlTypeCheckBox, "BlockChatCheckBox");
        TextExpressionSetToken("Param/Expression/C50FAF7E", "A", gf_RecordedUserNamewithColor(lv__i));
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/C50FAF7E"), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lv__i, PlayerGroupAll());
        lv__tempInt = gf_GetUserIndex(lv__i);
        if ((lv__tempInt != -1)) {
            gv_chatSettingPanel.lv_checkBoxArray[lv__tempInt] = DialogControlLastCreated();
        }
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, gf_GetChatNotReceivingUsers(lv__i));
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(lv__i), false);
        lv__cnt = (lv__cnt+1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforPanelofChatSettings_Init () {
    gt_InitializationforPanelofChatSettings = TriggerCreate("gt_InitializationforPanelofChatSettings_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Chat Block State
//--------------------------------------------------------------------------------------------------
bool gt_ToggleChatBlockState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__user;
    int lv__targetUser;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__user = EventPlayer();
    lv__targetUser = gf_GetCheckBoxOwnerofChatSettingsPanel(EventDialogControl());
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__user))) {
            return false;
        }
        if (!((gf_GetCheckBoxOwnerofChatSettingsPanel(EventDialogControl()) != c_playerAny))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv__user) == true)) {
        gf_AddUsertoNotReceivingUserGroup(lv__targetUser, lv__user);
    }
    else {
        gf_RemoveUserfromNotRecievingUserGroup(lv__targetUser, lv__user);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ToggleChatBlockState_Init () {
    gt_ToggleChatBlockState = TriggerCreate("gt_ToggleChatBlockState_Func");
    TriggerAddEventDialogControl(gt_ToggleChatBlockState, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for UI
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    playergroup auto74824E10_g;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogMessageLogButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeStatusUI, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogPauseButton, false);
    auto74824E10_g = gf_StartingUsers();
    lv__i = -1;
    while (true) {
        lv__i = PlayerGroupNextPlayer(auto74824E10_g, lv__i);
        if (lv__i < 0) { break; }
        VisSetFoWAlpha(lv__i, 100.0);
        VisRevealerCreate(lv__i, RegionEntireMap());
        VisRevealerEnable(VisRevealerLastCreated(), true);
        gv_revealerInfoArray[gf_GetUserIndex(lv__i)].lv_vision = VisRevealerLastCreated();
        PlayerSetState(lv__i, c_playerStateShowWorldTip, false);
    }
    TriggerExecute(gt_InitializationforTutorialMessage, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforUI_Init () {
    gt_InitializationforUI = TriggerCreate("gt_InitializationforUI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Text Crawl for Entering Cell
//--------------------------------------------------------------------------------------------------
bool gt_TextCrawlforEnteringCell_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__cell;
    // Automatic Variable Declarations
    // Variable Initialization
    lv__player = EventPlayer();
    lv__cell = gf_GetCellbyRegion(EventUnitRegion());
    // Conditions
    if (testConds) {
        if (!(gf_IsUser(lv__player))) {
            return false;
        }
        if (!((lv__cell != ge_Cell_None))) {
            return false;
        }
        if (!((gf_GameState() == ge_GameState_MainGame))) {
            return false;
        }
        if (!((EventUnit() == gf_CharacterUnit(lv__player)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIShowTextCrawl(gf_GetUserwithObservers(lv__player), gf_GetCellName(lv__cell), (StringExternal("Param/Value/302B5304") + TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_gameTimer)))), 10.0, SoundLink("TextCrawlType", -1), SoundLink("TextCrawlType", -1));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TextCrawlforEnteringCell_Init () {
    gt_TextCrawlforEnteringCell = TriggerCreate("gt_TextCrawlforEnteringCell_Func");
    gf_UnitEntersLeavesCell(gt_TextCrawlforEnteringCell, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization for Tutorial Message
//--------------------------------------------------------------------------------------------------
bool gt_InitializationforTutorialMessage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreatePlainDialog();
    gv_tutorialMessageInfo.lv_dialog = DialogLastCreated();
    DialogSetVisible(gv_tutorialMessageInfo.lv_dialog, PlayerGroupAll(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationforTutorialMessage_Init () {
    gt_InitializationforTutorialMessage = TriggerCreate("gt_InitializationforTutorialMessage_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization - Tracline
//--------------------------------------------------------------------------------------------------
bool gt_InitializationTracline_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializationTracline_Init () {
    gt_InitializationTracline = TriggerCreate("gt_InitializationTracline_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void StartTriggers () {
    gt_InitializationforGame_Init();
    gt_DelayedInitializationforChangelingSelection_Init();
    gt_RandomChangelingPlayerSelection_Init();
    gt_ApplyForChangeling_Init();
    gt_VoteUserToKick_Init();
    gt_SetGameStatetoMainGame_Init();
    gt_StartExplosionCount_Init();
    gt_EndExplosionCount_Init();
    gt_Entertheescapetrain_Init();
    gt_CreateExplosionEffect_Init();
    gt_SetGameStatetoInEscapeTrain_Init();
    gt_StartFoundChangelingInEscapeTrainQ_Init();
    gt_MarineVictoryQ_Init();
    gt_ChangelingMainGameVicoryQ_Init();
    gt_InitializationforUser_Init();
    gt_MainGameSettingsforUser_Init();
    gt_UserLeavesGame_Init();
    gt_KickAcountBlockedUsers_Init();
    gt_ChangeObserverTarget_Init();
    gt_ShowHideUtilityPanelforObserver_Init();
    gt_HideUtilityPanelforObserver_Init();
    gt_InitializationforCamera_Init();
    gt_MainGameSettingsforCamera_Init();
    gt_CameraTrackingLoop_Init();
    gt_InitializationforBank_Init();
    gt_InitializationforLegacyScore_Init();
    gt_ShowLegacyScoreInfoofTargetUser_Init();
    gt_ResetAssistUser_Init();
    gt_SetLastUserDamagingChangeling_Init();
    gt_InitializationforBlacklist_Init();
    gt_UpdateLastPlayersinBlacklist_Init();
    gt_InitializationforChat_Init();
    gt_ChatMessageTyped_Init();
    gt_ShowListofUserHandle_Init();
    gt_AntiMassEventCalling_Init();
    gt_ResetEventCallingCounter_Init();
    gt_InitializationforCharacter_Init();
    gt_MainGameSettingforCharacter_Init();
    gt_AddRemovePowerStateOffBehaviorForCharacter_Init();
    gt_MainGameSettingsforChangeling_Init();
    gt_CreateDisguiseEffectforChangeling_Init();
    gt_ChangelingTimerExpired_Init();
    gt_MainGameSettingforBehavior_Init();
    gt_UpdateBehavior_Init();
    gt_ShowHideUtilityPanel_Init();
    gt_HideUtilityPanelforGamePlayer_Init();
    gt_SearchandControlDeviceDirectly_Init();
    gt_SearchandControlDeviceDirectly_by_E_Init();
    gt_EndControllingDevice_Init();
    gt_ForcedEndControllingDevicePowerStateChanged_Init();
    gt_ForcedEndControllingDeviceMainGameStateChanged_Init();
    gt_OpenCloseaGate_Init();
    gt_OpenCloseaGate_by_E_Init();
    gt_CancelUnlockingGate_Init();
    gt_ForcedCancelationofUnlockingGatePowerOff_Init();
    gt_StartFiring_Init();
    gt_StopFiring_Init();
    gt_MoveKeyPressed_Init();
    gt_MoveKeyReleased_Init();
    gt_RunButtonPressed_Init();
    gt_RunButtonReleased_Init();
    gt_MarineDead_Init();
    gt_ChangelingDead_Init();
    gt_VoteforSuspiciousMarine_Init();
    gt_ToggleChangelingDisguiseStateButtonPressed_Init();
    gt_DisguiseCompleted_Init();
    gt_Eat_Init();
    gt_EatSuccessed_Init();
    gt_GettingEaten_Init();
    gt_InitializationforLab_Init();
    gt_MainGameSettingforLab_Init();
    gt_InitializationforCell_Init();
    gt_UpdatePowerStateforGates_Init();
    gt_SetGateStatetoStable_Init();
    gt_InitializationforDevices_Init();
    gt_MainGameSettingforDevice_Init();
    gt_UpdateDeviceState_Init();
    gt_InitializationforAberrationCage_Init();
    gt_MainGameSettingsforAberrationCage_Init();
    gt_BeaconMessageLabHoldingPen_Init();
    gt_AIforAberrations_Init();
    gt_InitializationforArchive_Init();
    gt_BeaconMessageArchive_Init();
    gt_UnpoweredArchiveConsole_Init();
    gt_TransmitRecord_Init();
    gt_InitializationforIncinerator_Init();
    gt_IncineratorTimerExpired_Init();
    gt_PoweredUnpoweredIncinerator_Init();
    gt_RunIncinerator_Init();
    gt_BeaconMessageIncinerator_Init();
    gt_NotifyIncineratorEndOperation_Init();
    gt_InitializationforAutomaticMedicalBot_Init();
    gt_BreaconMessageAutomaticMedicalBot_Init();
    gt_InitializationforMonitor_Init();
    gt_BeaconMessageMonitor_Init();
    gt_MonitorUnpowered_Init();
    gt_TransmitCharacterPosition_Init();
    gt_StartChangingTargetofMonitor_Init();
    gt_MonitorTimerExpired_Init();
    gt_UpdateMonitorWhenAccessLevelChanged_Init();
    gt_InitializationforPowerGeneratorController_Init();
    gt_BeaconMessagePowerController_Init();
    gt_PowerControllerButtonClicked_Init();
    gt_PowerControllerTimerExpired_Init();
    gt_InitializationforRadiationDiagnosticTester_Init();
    gt_MainGameSettingforRDT_Init();
    gt_BeaconMessageRadiationDiagnosticTester_Init();
    gt_StartScanningTargetUser_Init();
    gt_PauseUnpauseRDTTimer_Init();
    gt_UpdateRDTState_Init();
    gt_InitializationforSateliteController_Init();
    gt_MainGameSettingforSatelite_Init();
    gt_BeaconMessageSCC_Init();
    gt_SateliteControllerUnpowered_Init();
    gt_OrderSatelitetoStartTracking_Init();
    gt_SetSateliteControllerStatetoPrepared_Init();
    gt_InitializationforEmergencyControlConsole_Init();
    gt_BeaconMessageIndexofTargetCellof_Init();
    gt_EmergencyControlConsoleUnpowered_Init();
    gt_EmergencyControlConsoleButtonPressed_Init();
    gt_EmergencyControlConsoleTimerExpired_Init();
    gt_InitializationforHUD_Init();
    gt_MainGameSettingsforHUD_Init();
    gt_InitializationforPanelofChangelingSelection_Init();
    gt_InitializationforCharacterHUD_Init();
    gt_MainGameSettingsforCharacterHUD_Init();
    gt_UpdateChangelingCharacterHUD_Init();
    gt_CharacterPropertyChanged_Init();
    gt_InitializationforDeviceHUD_Init();
    gt_InitializationforPanelofAberrationCage_Init();
    gt_InitializationforPanelofArchive_Init();
    gt_UpdatePanelofArchive_Init();
    gt_UpdateArchiveButton_Init();
    gt_InitializationforPanelofIncinerator_Init();
    gt_InitializationforPanelofMedicalBot_Init();
    gt_InitializationforPanelofMonitor_Init();
    gt_UpdateTrackingDialogOfSecurityMonitor_Init();
    gt_UpdateTrackingDialogForChangelingCloak_Init();
    gt_MainGameSettingsForPanelofMonitor_Init();
    gt_InitializationforPanelofPowerGeneratorController_Init();
    gt_InitializationforPanelofRDT_Init();
    gt_InitializationforPanelofEmergencyControlConsole_Init();
    gt_InitializationforPanelofSateliteController_Init();
    gt_InitializationforPanelofGatUnlockProcess_Init();
    gt_InitializationforMinimap_Init();
    gt_MainGameSettingforMinimap_Init();
    gt_LoopforUpdateMinimap_Init();
    gt_MinimapKeyPressed_Init();
    gt_HideIconImageofMInimap_Init();
    gt_InitializationforUtilityHUD_Init();
    gt_InitializationforUtilitySelectionPanel_Init();
    gt_SelectUtilityPanel_Init();
    gt_InitializationforPanelofHelpText_Init();
    gt_ShowHelpText_Init();
    gt_InitializationforPanelofBlacklist_Init();
    gt_UpdateBlacklistTargetUserListBox_Init();
    gt_UpdateHandleEditBoxInBlacklistPanel_Init();
    gt_AddUserToBlacklist_Init();
    gt_RemoveUserFromBlacklist_Init();
    gt_InitializationforPanelofChatSettings_Init();
    gt_ToggleChatBlockState_Init();
    gt_InitializationforUI_Init();
    gt_TextCrawlforEnteringCell_Init();
    gt_InitializationforTutorialMessage_Init();
    gt_InitializationTracline_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void StartMap () {
    StartLibs();
    StartGlobals();
    StartTriggers();
}